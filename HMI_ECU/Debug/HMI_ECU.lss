
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000136  00800060  00003d20  00003db4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800196  00800196  00003eea  2**0
                  ALLOC
  3 .stab         000038d0  00000000  00000000  00003eec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013c9  00000000  00000000  000077bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008b85  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008cc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008e35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000aa7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b969  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c718  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c878  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000cb05  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d2d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 74 1c 	jmp	0x38e8	; 0x38e8 <__vector_4>
      14:	0c 94 41 1c 	jmp	0x3882	; 0x3882 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 0e 1c 	jmp	0x381c	; 0x381c <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 db 1b 	jmp	0x37b6	; 0x37b6 <__vector_9>
      28:	0c 94 a8 1b 	jmp	0x3750	; 0x3750 <__vector_10>
      2c:	0c 94 75 1b 	jmp	0x36ea	; 0x36ea <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e2       	ldi	r30, 0x20	; 32
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e9       	ldi	r26, 0x96	; 150
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3a       	cpi	r26, 0xAF	; 175
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <main>
      8a:	0c 94 8e 1e 	jmp	0x3d1c	; 0x3d1c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 12 1e 	jmp	0x3c24	; 0x3c24 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e7       	ldi	r26, 0x7F	; 127
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2e 1e 	jmp	0x3c5c	; 0x3c5c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1e 1e 	jmp	0x3c3c	; 0x3c3c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3a 1e 	jmp	0x3c74	; 0x3c74 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1e 1e 	jmp	0x3c3c	; 0x3c3c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3a 1e 	jmp	0x3c74	; 0x3c74 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 12 1e 	jmp	0x3c24	; 0x3c24 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e7       	ldi	r24, 0x7F	; 127
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2e 1e 	jmp	0x3c5c	; 0x3c5c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1e 1e 	jmp	0x3c3c	; 0x3c3c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 3a 1e 	jmp	0x3c74	; 0x3c74 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 1e 1e 	jmp	0x3c3c	; 0x3c3c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 3a 1e 	jmp	0x3c74	; 0x3c74 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 1e 1e 	jmp	0x3c3c	; 0x3c3c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 3a 1e 	jmp	0x3c74	; 0x3c74 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 22 1e 	jmp	0x3c44	; 0x3c44 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 3e 1e 	jmp	0x3c7c	; 0x3c7c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Timer1_callback>:

// Global variable to track time ticks for timer management
volatile uint16 g_tick = 0;

// Timer1 callback function to increment tick count
void Timer1_callback(void) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	g_tick++;  // Increment the tick counter on each timer compare match
     b4e:	80 91 98 01 	lds	r24, 0x0198
     b52:	90 91 99 01 	lds	r25, 0x0199
     b56:	01 96       	adiw	r24, 0x01	; 1
     b58:	90 93 99 01 	sts	0x0199, r25
     b5c:	80 93 98 01 	sts	0x0198, r24
}
     b60:	cf 91       	pop	r28
     b62:	df 91       	pop	r29
     b64:	08 95       	ret

00000b66 <setupTimer1>:

// Timer setup function to initialize Timer1 with a 1-second interval
void setupTimer1(void) {
     b66:	df 93       	push	r29
     b68:	cf 93       	push	r28
     b6a:	cd b7       	in	r28, 0x3d	; 61
     b6c:	de b7       	in	r29, 0x3e	; 62
     b6e:	2c 97       	sbiw	r28, 0x0c	; 12
     b70:	0f b6       	in	r0, 0x3f	; 63
     b72:	f8 94       	cli
     b74:	de bf       	out	0x3e, r29	; 62
     b76:	0f be       	out	0x3f, r0	; 63
     b78:	cd bf       	out	0x3d, r28	; 61
	Timer_ConfigType timerConfig = {0, 7812, TIMER_1, TIMER_CLOCK_1024, TIMER_COMPARE_MODE};  // Configuring timer for 1-second interval with 8MHz clock
     b7a:	ce 01       	movw	r24, r28
     b7c:	01 96       	adiw	r24, 0x01	; 1
     b7e:	99 87       	std	Y+9, r25	; 0x09
     b80:	88 87       	std	Y+8, r24	; 0x08
     b82:	e7 e8       	ldi	r30, 0x87	; 135
     b84:	f1 e0       	ldi	r31, 0x01	; 1
     b86:	fb 87       	std	Y+11, r31	; 0x0b
     b88:	ea 87       	std	Y+10, r30	; 0x0a
     b8a:	f7 e0       	ldi	r31, 0x07	; 7
     b8c:	fc 87       	std	Y+12, r31	; 0x0c
     b8e:	ea 85       	ldd	r30, Y+10	; 0x0a
     b90:	fb 85       	ldd	r31, Y+11	; 0x0b
     b92:	00 80       	ld	r0, Z
     b94:	8a 85       	ldd	r24, Y+10	; 0x0a
     b96:	9b 85       	ldd	r25, Y+11	; 0x0b
     b98:	01 96       	adiw	r24, 0x01	; 1
     b9a:	9b 87       	std	Y+11, r25	; 0x0b
     b9c:	8a 87       	std	Y+10, r24	; 0x0a
     b9e:	e8 85       	ldd	r30, Y+8	; 0x08
     ba0:	f9 85       	ldd	r31, Y+9	; 0x09
     ba2:	00 82       	st	Z, r0
     ba4:	88 85       	ldd	r24, Y+8	; 0x08
     ba6:	99 85       	ldd	r25, Y+9	; 0x09
     ba8:	01 96       	adiw	r24, 0x01	; 1
     baa:	99 87       	std	Y+9, r25	; 0x09
     bac:	88 87       	std	Y+8, r24	; 0x08
     bae:	9c 85       	ldd	r25, Y+12	; 0x0c
     bb0:	91 50       	subi	r25, 0x01	; 1
     bb2:	9c 87       	std	Y+12, r25	; 0x0c
     bb4:	ec 85       	ldd	r30, Y+12	; 0x0c
     bb6:	ee 23       	and	r30, r30
     bb8:	51 f7       	brne	.-44     	; 0xb8e <setupTimer1+0x28>
	Timer_init(&timerConfig);  // Initialize timer with specified configuration
     bba:	ce 01       	movw	r24, r28
     bbc:	01 96       	adiw	r24, 0x01	; 1
     bbe:	0e 94 0f 1a 	call	0x341e	; 0x341e <Timer_init>
	Timer_setCallBack(Timer1_callback, TIMER_1);  // Set the callback function for Timer1
     bc2:	83 ea       	ldi	r24, 0xA3	; 163
     bc4:	95 e0       	ldi	r25, 0x05	; 5
     bc6:	61 e0       	ldi	r22, 0x01	; 1
     bc8:	0e 94 3c 1b 	call	0x3678	; 0x3678 <Timer_setCallBack>
}
     bcc:	2c 96       	adiw	r28, 0x0c	; 12
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	f8 94       	cli
     bd2:	de bf       	out	0x3e, r29	; 62
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	cd bf       	out	0x3d, r28	; 61
     bd8:	cf 91       	pop	r28
     bda:	df 91       	pop	r29
     bdc:	08 95       	ret

00000bde <Timer1Stop>:

// Stop Timer1 function to deinitialize the timer
void Timer1Stop(void) {
     bde:	df 93       	push	r29
     be0:	cf 93       	push	r28
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
	Timer_deInit(TIMER_1);  // Deinitialize Timer1 to stop it
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <Timer_deInit>
}
     bec:	cf 91       	pop	r28
     bee:	df 91       	pop	r29
     bf0:	08 95       	ret

00000bf2 <main>:

int main(void) {
     bf2:	df 93       	push	r29
     bf4:	cf 93       	push	r28
     bf6:	cd b7       	in	r28, 0x3d	; 61
     bf8:	de b7       	in	r29, 0x3e	; 62
     bfa:	e9 97       	sbiw	r28, 0x39	; 57
     bfc:	0f b6       	in	r0, 0x3f	; 63
     bfe:	f8 94       	cli
     c00:	de bf       	out	0x3e, r29	; 62
     c02:	0f be       	out	0x3f, r0	; 63
     c04:	cd bf       	out	0x3d, r28	; 61
	// Initialize system peripherals
	initializeSystem();
     c06:	0e 94 09 08 	call	0x1012	; 0x1012 <initializeSystem>
	sei();  // Enable global interrupts
     c0a:	78 94       	sei

	// Display initial screen with system information
	LCD_displayString("Smart Door");
     c0c:	80 e6       	ldi	r24, 0x60	; 96
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	0e 94 5e 19 	call	0x32bc	; 0x32bc <LCD_displayString>
	LCD_displayStringRowColumn(1, 0, "locking system");
     c14:	2b e6       	ldi	r18, 0x6B	; 107
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	60 e0       	ldi	r22, 0x00	; 0
     c1c:	a9 01       	movw	r20, r18
     c1e:	0e 94 c9 19 	call	0x3392	; 0x3392 <LCD_displayStringRowColumn>
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	aa e7       	ldi	r26, 0x7A	; 122
     c28:	b4 e4       	ldi	r27, 0x44	; 68
     c2a:	8d ab       	std	Y+53, r24	; 0x35
     c2c:	9e ab       	std	Y+54, r25	; 0x36
     c2e:	af ab       	std	Y+55, r26	; 0x37
     c30:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c32:	6d a9       	ldd	r22, Y+53	; 0x35
     c34:	7e a9       	ldd	r23, Y+54	; 0x36
     c36:	8f a9       	ldd	r24, Y+55	; 0x37
     c38:	98 ad       	ldd	r25, Y+56	; 0x38
     c3a:	20 e0       	ldi	r18, 0x00	; 0
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	4a ef       	ldi	r20, 0xFA	; 250
     c40:	54 e4       	ldi	r21, 0x44	; 68
     c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c46:	dc 01       	movw	r26, r24
     c48:	cb 01       	movw	r24, r22
     c4a:	89 ab       	std	Y+49, r24	; 0x31
     c4c:	9a ab       	std	Y+50, r25	; 0x32
     c4e:	ab ab       	std	Y+51, r26	; 0x33
     c50:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     c52:	69 a9       	ldd	r22, Y+49	; 0x31
     c54:	7a a9       	ldd	r23, Y+50	; 0x32
     c56:	8b a9       	ldd	r24, Y+51	; 0x33
     c58:	9c a9       	ldd	r25, Y+52	; 0x34
     c5a:	20 e0       	ldi	r18, 0x00	; 0
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	40 e8       	ldi	r20, 0x80	; 128
     c60:	5f e3       	ldi	r21, 0x3F	; 63
     c62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c66:	88 23       	and	r24, r24
     c68:	2c f4       	brge	.+10     	; 0xc74 <main+0x82>
		__ticks = 1;
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	98 ab       	std	Y+48, r25	; 0x30
     c70:	8f a7       	std	Y+47, r24	; 0x2f
     c72:	3f c0       	rjmp	.+126    	; 0xcf2 <main+0x100>
	else if (__tmp > 65535)
     c74:	69 a9       	ldd	r22, Y+49	; 0x31
     c76:	7a a9       	ldd	r23, Y+50	; 0x32
     c78:	8b a9       	ldd	r24, Y+51	; 0x33
     c7a:	9c a9       	ldd	r25, Y+52	; 0x34
     c7c:	20 e0       	ldi	r18, 0x00	; 0
     c7e:	3f ef       	ldi	r19, 0xFF	; 255
     c80:	4f e7       	ldi	r20, 0x7F	; 127
     c82:	57 e4       	ldi	r21, 0x47	; 71
     c84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c88:	18 16       	cp	r1, r24
     c8a:	4c f5       	brge	.+82     	; 0xcde <main+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c8c:	6d a9       	ldd	r22, Y+53	; 0x35
     c8e:	7e a9       	ldd	r23, Y+54	; 0x36
     c90:	8f a9       	ldd	r24, Y+55	; 0x37
     c92:	98 ad       	ldd	r25, Y+56	; 0x38
     c94:	20 e0       	ldi	r18, 0x00	; 0
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	40 e2       	ldi	r20, 0x20	; 32
     c9a:	51 e4       	ldi	r21, 0x41	; 65
     c9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ca0:	dc 01       	movw	r26, r24
     ca2:	cb 01       	movw	r24, r22
     ca4:	bc 01       	movw	r22, r24
     ca6:	cd 01       	movw	r24, r26
     ca8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cac:	dc 01       	movw	r26, r24
     cae:	cb 01       	movw	r24, r22
     cb0:	98 ab       	std	Y+48, r25	; 0x30
     cb2:	8f a7       	std	Y+47, r24	; 0x2f
     cb4:	0f c0       	rjmp	.+30     	; 0xcd4 <main+0xe2>
     cb6:	88 ec       	ldi	r24, 0xC8	; 200
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	9e a7       	std	Y+46, r25	; 0x2e
     cbc:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cbe:	8d a5       	ldd	r24, Y+45	; 0x2d
     cc0:	9e a5       	ldd	r25, Y+46	; 0x2e
     cc2:	01 97       	sbiw	r24, 0x01	; 1
     cc4:	f1 f7       	brne	.-4      	; 0xcc2 <main+0xd0>
     cc6:	9e a7       	std	Y+46, r25	; 0x2e
     cc8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cca:	8f a5       	ldd	r24, Y+47	; 0x2f
     ccc:	98 a9       	ldd	r25, Y+48	; 0x30
     cce:	01 97       	sbiw	r24, 0x01	; 1
     cd0:	98 ab       	std	Y+48, r25	; 0x30
     cd2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cd4:	8f a5       	ldd	r24, Y+47	; 0x2f
     cd6:	98 a9       	ldd	r25, Y+48	; 0x30
     cd8:	00 97       	sbiw	r24, 0x00	; 0
     cda:	69 f7       	brne	.-38     	; 0xcb6 <main+0xc4>
     cdc:	14 c0       	rjmp	.+40     	; 0xd06 <main+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cde:	69 a9       	ldd	r22, Y+49	; 0x31
     ce0:	7a a9       	ldd	r23, Y+50	; 0x32
     ce2:	8b a9       	ldd	r24, Y+51	; 0x33
     ce4:	9c a9       	ldd	r25, Y+52	; 0x34
     ce6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cea:	dc 01       	movw	r26, r24
     cec:	cb 01       	movw	r24, r22
     cee:	98 ab       	std	Y+48, r25	; 0x30
     cf0:	8f a7       	std	Y+47, r24	; 0x2f
     cf2:	8f a5       	ldd	r24, Y+47	; 0x2f
     cf4:	98 a9       	ldd	r25, Y+48	; 0x30
     cf6:	9c a7       	std	Y+44, r25	; 0x2c
     cf8:	8b a7       	std	Y+43, r24	; 0x2b
     cfa:	8b a5       	ldd	r24, Y+43	; 0x2b
     cfc:	9c a5       	ldd	r25, Y+44	; 0x2c
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	f1 f7       	brne	.-4      	; 0xcfe <main+0x10c>
     d02:	9c a7       	std	Y+44, r25	; 0x2c
     d04:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1000);  // Short delay for screen visibility
	LCD_clearScreen();
     d06:	0e 94 05 1a 	call	0x340a	; 0x340a <LCD_clearScreen>
	LCD_displayString("DONE BY:");
     d0a:	8a e7       	ldi	r24, 0x7A	; 122
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	0e 94 5e 19 	call	0x32bc	; 0x32bc <LCD_displayString>
	LCD_displayStringRowColumn(1, 0, "Mohamed Bahaa");
     d12:	23 e8       	ldi	r18, 0x83	; 131
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	60 e0       	ldi	r22, 0x00	; 0
     d1a:	a9 01       	movw	r20, r18
     d1c:	0e 94 c9 19 	call	0x3392	; 0x3392 <LCD_displayStringRowColumn>
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	aa e7       	ldi	r26, 0x7A	; 122
     d26:	b4 e4       	ldi	r27, 0x44	; 68
     d28:	8f a3       	std	Y+39, r24	; 0x27
     d2a:	98 a7       	std	Y+40, r25	; 0x28
     d2c:	a9 a7       	std	Y+41, r26	; 0x29
     d2e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d30:	6f a1       	ldd	r22, Y+39	; 0x27
     d32:	78 a5       	ldd	r23, Y+40	; 0x28
     d34:	89 a5       	ldd	r24, Y+41	; 0x29
     d36:	9a a5       	ldd	r25, Y+42	; 0x2a
     d38:	20 e0       	ldi	r18, 0x00	; 0
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	4a ef       	ldi	r20, 0xFA	; 250
     d3e:	54 e4       	ldi	r21, 0x44	; 68
     d40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d44:	dc 01       	movw	r26, r24
     d46:	cb 01       	movw	r24, r22
     d48:	8b a3       	std	Y+35, r24	; 0x23
     d4a:	9c a3       	std	Y+36, r25	; 0x24
     d4c:	ad a3       	std	Y+37, r26	; 0x25
     d4e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     d50:	6b a1       	ldd	r22, Y+35	; 0x23
     d52:	7c a1       	ldd	r23, Y+36	; 0x24
     d54:	8d a1       	ldd	r24, Y+37	; 0x25
     d56:	9e a1       	ldd	r25, Y+38	; 0x26
     d58:	20 e0       	ldi	r18, 0x00	; 0
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	40 e8       	ldi	r20, 0x80	; 128
     d5e:	5f e3       	ldi	r21, 0x3F	; 63
     d60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d64:	88 23       	and	r24, r24
     d66:	2c f4       	brge	.+10     	; 0xd72 <main+0x180>
		__ticks = 1;
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	9a a3       	std	Y+34, r25	; 0x22
     d6e:	89 a3       	std	Y+33, r24	; 0x21
     d70:	3f c0       	rjmp	.+126    	; 0xdf0 <main+0x1fe>
	else if (__tmp > 65535)
     d72:	6b a1       	ldd	r22, Y+35	; 0x23
     d74:	7c a1       	ldd	r23, Y+36	; 0x24
     d76:	8d a1       	ldd	r24, Y+37	; 0x25
     d78:	9e a1       	ldd	r25, Y+38	; 0x26
     d7a:	20 e0       	ldi	r18, 0x00	; 0
     d7c:	3f ef       	ldi	r19, 0xFF	; 255
     d7e:	4f e7       	ldi	r20, 0x7F	; 127
     d80:	57 e4       	ldi	r21, 0x47	; 71
     d82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d86:	18 16       	cp	r1, r24
     d88:	4c f5       	brge	.+82     	; 0xddc <main+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d8a:	6f a1       	ldd	r22, Y+39	; 0x27
     d8c:	78 a5       	ldd	r23, Y+40	; 0x28
     d8e:	89 a5       	ldd	r24, Y+41	; 0x29
     d90:	9a a5       	ldd	r25, Y+42	; 0x2a
     d92:	20 e0       	ldi	r18, 0x00	; 0
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	40 e2       	ldi	r20, 0x20	; 32
     d98:	51 e4       	ldi	r21, 0x41	; 65
     d9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d9e:	dc 01       	movw	r26, r24
     da0:	cb 01       	movw	r24, r22
     da2:	bc 01       	movw	r22, r24
     da4:	cd 01       	movw	r24, r26
     da6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     daa:	dc 01       	movw	r26, r24
     dac:	cb 01       	movw	r24, r22
     dae:	9a a3       	std	Y+34, r25	; 0x22
     db0:	89 a3       	std	Y+33, r24	; 0x21
     db2:	0f c0       	rjmp	.+30     	; 0xdd2 <main+0x1e0>
     db4:	88 ec       	ldi	r24, 0xC8	; 200
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	98 a3       	std	Y+32, r25	; 0x20
     dba:	8f 8f       	std	Y+31, r24	; 0x1f
     dbc:	8f 8d       	ldd	r24, Y+31	; 0x1f
     dbe:	98 a1       	ldd	r25, Y+32	; 0x20
     dc0:	01 97       	sbiw	r24, 0x01	; 1
     dc2:	f1 f7       	brne	.-4      	; 0xdc0 <main+0x1ce>
     dc4:	98 a3       	std	Y+32, r25	; 0x20
     dc6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dc8:	89 a1       	ldd	r24, Y+33	; 0x21
     dca:	9a a1       	ldd	r25, Y+34	; 0x22
     dcc:	01 97       	sbiw	r24, 0x01	; 1
     dce:	9a a3       	std	Y+34, r25	; 0x22
     dd0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dd2:	89 a1       	ldd	r24, Y+33	; 0x21
     dd4:	9a a1       	ldd	r25, Y+34	; 0x22
     dd6:	00 97       	sbiw	r24, 0x00	; 0
     dd8:	69 f7       	brne	.-38     	; 0xdb4 <main+0x1c2>
     dda:	14 c0       	rjmp	.+40     	; 0xe04 <main+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ddc:	6b a1       	ldd	r22, Y+35	; 0x23
     dde:	7c a1       	ldd	r23, Y+36	; 0x24
     de0:	8d a1       	ldd	r24, Y+37	; 0x25
     de2:	9e a1       	ldd	r25, Y+38	; 0x26
     de4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     de8:	dc 01       	movw	r26, r24
     dea:	cb 01       	movw	r24, r22
     dec:	9a a3       	std	Y+34, r25	; 0x22
     dee:	89 a3       	std	Y+33, r24	; 0x21
     df0:	89 a1       	ldd	r24, Y+33	; 0x21
     df2:	9a a1       	ldd	r25, Y+34	; 0x22
     df4:	9e 8f       	std	Y+30, r25	; 0x1e
     df6:	8d 8f       	std	Y+29, r24	; 0x1d
     df8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     dfa:	9e 8d       	ldd	r25, Y+30	; 0x1e
     dfc:	01 97       	sbiw	r24, 0x01	; 1
     dfe:	f1 f7       	brne	.-4      	; 0xdfc <main+0x20a>
     e00:	9e 8f       	std	Y+30, r25	; 0x1e
     e02:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);

	// Start password creation process
	createPassword();
     e04:	0e 94 42 08 	call	0x1084	; 0x1084 <createPassword>

	while (1) {
		if (isPasswordSet) {
     e08:	80 91 97 01 	lds	r24, 0x0197
     e0c:	88 23       	and	r24, r24
     e0e:	09 f4       	brne	.+2      	; 0xe12 <main+0x220>
     e10:	fd c0       	rjmp	.+506    	; 0x100c <main+0x41a>
			// Display main menu if password is set
			mainMenu();
     e12:	0e 94 8f 09 	call	0x131e	; 0x131e <mainMenu>
			uint8 option = KEYPAD_getPressedKey();  // Get user input for menu option
     e16:	0e 94 59 13 	call	0x26b2	; 0x26b2 <KEYPAD_getPressedKey>
     e1a:	89 af       	std	Y+57, r24	; 0x39
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	aa ef       	ldi	r26, 0xFA	; 250
     e22:	b3 e4       	ldi	r27, 0x43	; 67
     e24:	89 8f       	std	Y+25, r24	; 0x19
     e26:	9a 8f       	std	Y+26, r25	; 0x1a
     e28:	ab 8f       	std	Y+27, r26	; 0x1b
     e2a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e2c:	69 8d       	ldd	r22, Y+25	; 0x19
     e2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e30:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e32:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	4a ef       	ldi	r20, 0xFA	; 250
     e3a:	54 e4       	ldi	r21, 0x44	; 68
     e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e40:	dc 01       	movw	r26, r24
     e42:	cb 01       	movw	r24, r22
     e44:	8d 8b       	std	Y+21, r24	; 0x15
     e46:	9e 8b       	std	Y+22, r25	; 0x16
     e48:	af 8b       	std	Y+23, r26	; 0x17
     e4a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e4c:	6d 89       	ldd	r22, Y+21	; 0x15
     e4e:	7e 89       	ldd	r23, Y+22	; 0x16
     e50:	8f 89       	ldd	r24, Y+23	; 0x17
     e52:	98 8d       	ldd	r25, Y+24	; 0x18
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	40 e8       	ldi	r20, 0x80	; 128
     e5a:	5f e3       	ldi	r21, 0x3F	; 63
     e5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e60:	88 23       	and	r24, r24
     e62:	2c f4       	brge	.+10     	; 0xe6e <main+0x27c>
		__ticks = 1;
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	9c 8b       	std	Y+20, r25	; 0x14
     e6a:	8b 8b       	std	Y+19, r24	; 0x13
     e6c:	3f c0       	rjmp	.+126    	; 0xeec <main+0x2fa>
	else if (__tmp > 65535)
     e6e:	6d 89       	ldd	r22, Y+21	; 0x15
     e70:	7e 89       	ldd	r23, Y+22	; 0x16
     e72:	8f 89       	ldd	r24, Y+23	; 0x17
     e74:	98 8d       	ldd	r25, Y+24	; 0x18
     e76:	20 e0       	ldi	r18, 0x00	; 0
     e78:	3f ef       	ldi	r19, 0xFF	; 255
     e7a:	4f e7       	ldi	r20, 0x7F	; 127
     e7c:	57 e4       	ldi	r21, 0x47	; 71
     e7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e82:	18 16       	cp	r1, r24
     e84:	4c f5       	brge	.+82     	; 0xed8 <main+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e86:	69 8d       	ldd	r22, Y+25	; 0x19
     e88:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e8e:	20 e0       	ldi	r18, 0x00	; 0
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	40 e2       	ldi	r20, 0x20	; 32
     e94:	51 e4       	ldi	r21, 0x41	; 65
     e96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	bc 01       	movw	r22, r24
     ea0:	cd 01       	movw	r24, r26
     ea2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ea6:	dc 01       	movw	r26, r24
     ea8:	cb 01       	movw	r24, r22
     eaa:	9c 8b       	std	Y+20, r25	; 0x14
     eac:	8b 8b       	std	Y+19, r24	; 0x13
     eae:	0f c0       	rjmp	.+30     	; 0xece <main+0x2dc>
     eb0:	88 ec       	ldi	r24, 0xC8	; 200
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	9a 8b       	std	Y+18, r25	; 0x12
     eb6:	89 8b       	std	Y+17, r24	; 0x11
     eb8:	89 89       	ldd	r24, Y+17	; 0x11
     eba:	9a 89       	ldd	r25, Y+18	; 0x12
     ebc:	01 97       	sbiw	r24, 0x01	; 1
     ebe:	f1 f7       	brne	.-4      	; 0xebc <main+0x2ca>
     ec0:	9a 8b       	std	Y+18, r25	; 0x12
     ec2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ec4:	8b 89       	ldd	r24, Y+19	; 0x13
     ec6:	9c 89       	ldd	r25, Y+20	; 0x14
     ec8:	01 97       	sbiw	r24, 0x01	; 1
     eca:	9c 8b       	std	Y+20, r25	; 0x14
     ecc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ece:	8b 89       	ldd	r24, Y+19	; 0x13
     ed0:	9c 89       	ldd	r25, Y+20	; 0x14
     ed2:	00 97       	sbiw	r24, 0x00	; 0
     ed4:	69 f7       	brne	.-38     	; 0xeb0 <main+0x2be>
     ed6:	14 c0       	rjmp	.+40     	; 0xf00 <main+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ed8:	6d 89       	ldd	r22, Y+21	; 0x15
     eda:	7e 89       	ldd	r23, Y+22	; 0x16
     edc:	8f 89       	ldd	r24, Y+23	; 0x17
     ede:	98 8d       	ldd	r25, Y+24	; 0x18
     ee0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ee4:	dc 01       	movw	r26, r24
     ee6:	cb 01       	movw	r24, r22
     ee8:	9c 8b       	std	Y+20, r25	; 0x14
     eea:	8b 8b       	std	Y+19, r24	; 0x13
     eec:	8b 89       	ldd	r24, Y+19	; 0x13
     eee:	9c 89       	ldd	r25, Y+20	; 0x14
     ef0:	98 8b       	std	Y+16, r25	; 0x10
     ef2:	8f 87       	std	Y+15, r24	; 0x0f
     ef4:	8f 85       	ldd	r24, Y+15	; 0x0f
     ef6:	98 89       	ldd	r25, Y+16	; 0x10
     ef8:	01 97       	sbiw	r24, 0x01	; 1
     efa:	f1 f7       	brne	.-4      	; 0xef8 <main+0x306>
     efc:	98 8b       	std	Y+16, r25	; 0x10
     efe:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);  // Debounce delay to avoid multiple key press detection

			// Handle menu options for opening door or changing password
			if (option == COMMAND_OPEN_DOOR || option == COMMAND_CHANGE_PASSWORD) {
     f00:	89 ad       	ldd	r24, Y+57	; 0x39
     f02:	8b 32       	cpi	r24, 0x2B	; 43
     f04:	19 f0       	breq	.+6      	; 0xf0c <main+0x31a>
     f06:	89 ad       	ldd	r24, Y+57	; 0x39
     f08:	8d 32       	cpi	r24, 0x2D	; 45
     f0a:	21 f4       	brne	.+8      	; 0xf14 <main+0x322>
				handleOperation(option);
     f0c:	89 ad       	ldd	r24, Y+57	; 0x39
     f0e:	0e 94 a3 09 	call	0x1346	; 0x1346 <handleOperation>
     f12:	7a cf       	rjmp	.-268    	; 0xe08 <main+0x216>
			} else {
				LCD_clearScreen();
     f14:	0e 94 05 1a 	call	0x340a	; 0x340a <LCD_clearScreen>
				LCD_displayStringRowColumn(1, 0, "Invalid Option");  // Invalid option feedback
     f18:	21 e9       	ldi	r18, 0x91	; 145
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	a9 01       	movw	r20, r18
     f22:	0e 94 c9 19 	call	0x3392	; 0x3392 <LCD_displayStringRowColumn>
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	aa e7       	ldi	r26, 0x7A	; 122
     f2c:	b4 e4       	ldi	r27, 0x44	; 68
     f2e:	8b 87       	std	Y+11, r24	; 0x0b
     f30:	9c 87       	std	Y+12, r25	; 0x0c
     f32:	ad 87       	std	Y+13, r26	; 0x0d
     f34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f36:	6b 85       	ldd	r22, Y+11	; 0x0b
     f38:	7c 85       	ldd	r23, Y+12	; 0x0c
     f3a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f3c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	4a ef       	ldi	r20, 0xFA	; 250
     f44:	54 e4       	ldi	r21, 0x44	; 68
     f46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f4a:	dc 01       	movw	r26, r24
     f4c:	cb 01       	movw	r24, r22
     f4e:	8f 83       	std	Y+7, r24	; 0x07
     f50:	98 87       	std	Y+8, r25	; 0x08
     f52:	a9 87       	std	Y+9, r26	; 0x09
     f54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f56:	6f 81       	ldd	r22, Y+7	; 0x07
     f58:	78 85       	ldd	r23, Y+8	; 0x08
     f5a:	89 85       	ldd	r24, Y+9	; 0x09
     f5c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	40 e8       	ldi	r20, 0x80	; 128
     f64:	5f e3       	ldi	r21, 0x3F	; 63
     f66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f6a:	88 23       	and	r24, r24
     f6c:	2c f4       	brge	.+10     	; 0xf78 <main+0x386>
		__ticks = 1;
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	9e 83       	std	Y+6, r25	; 0x06
     f74:	8d 83       	std	Y+5, r24	; 0x05
     f76:	3f c0       	rjmp	.+126    	; 0xff6 <main+0x404>
	else if (__tmp > 65535)
     f78:	6f 81       	ldd	r22, Y+7	; 0x07
     f7a:	78 85       	ldd	r23, Y+8	; 0x08
     f7c:	89 85       	ldd	r24, Y+9	; 0x09
     f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	3f ef       	ldi	r19, 0xFF	; 255
     f84:	4f e7       	ldi	r20, 0x7F	; 127
     f86:	57 e4       	ldi	r21, 0x47	; 71
     f88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f8c:	18 16       	cp	r1, r24
     f8e:	4c f5       	brge	.+82     	; 0xfe2 <main+0x3f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f90:	6b 85       	ldd	r22, Y+11	; 0x0b
     f92:	7c 85       	ldd	r23, Y+12	; 0x0c
     f94:	8d 85       	ldd	r24, Y+13	; 0x0d
     f96:	9e 85       	ldd	r25, Y+14	; 0x0e
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	40 e2       	ldi	r20, 0x20	; 32
     f9e:	51 e4       	ldi	r21, 0x41	; 65
     fa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fa4:	dc 01       	movw	r26, r24
     fa6:	cb 01       	movw	r24, r22
     fa8:	bc 01       	movw	r22, r24
     faa:	cd 01       	movw	r24, r26
     fac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fb0:	dc 01       	movw	r26, r24
     fb2:	cb 01       	movw	r24, r22
     fb4:	9e 83       	std	Y+6, r25	; 0x06
     fb6:	8d 83       	std	Y+5, r24	; 0x05
     fb8:	0f c0       	rjmp	.+30     	; 0xfd8 <main+0x3e6>
     fba:	88 ec       	ldi	r24, 0xC8	; 200
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	9c 83       	std	Y+4, r25	; 0x04
     fc0:	8b 83       	std	Y+3, r24	; 0x03
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	9c 81       	ldd	r25, Y+4	; 0x04
     fc6:	01 97       	sbiw	r24, 0x01	; 1
     fc8:	f1 f7       	brne	.-4      	; 0xfc6 <main+0x3d4>
     fca:	9c 83       	std	Y+4, r25	; 0x04
     fcc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fce:	8d 81       	ldd	r24, Y+5	; 0x05
     fd0:	9e 81       	ldd	r25, Y+6	; 0x06
     fd2:	01 97       	sbiw	r24, 0x01	; 1
     fd4:	9e 83       	std	Y+6, r25	; 0x06
     fd6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fd8:	8d 81       	ldd	r24, Y+5	; 0x05
     fda:	9e 81       	ldd	r25, Y+6	; 0x06
     fdc:	00 97       	sbiw	r24, 0x00	; 0
     fde:	69 f7       	brne	.-38     	; 0xfba <main+0x3c8>
     fe0:	13 cf       	rjmp	.-474    	; 0xe08 <main+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fe2:	6f 81       	ldd	r22, Y+7	; 0x07
     fe4:	78 85       	ldd	r23, Y+8	; 0x08
     fe6:	89 85       	ldd	r24, Y+9	; 0x09
     fe8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fee:	dc 01       	movw	r26, r24
     ff0:	cb 01       	movw	r24, r22
     ff2:	9e 83       	std	Y+6, r25	; 0x06
     ff4:	8d 83       	std	Y+5, r24	; 0x05
     ff6:	8d 81       	ldd	r24, Y+5	; 0x05
     ff8:	9e 81       	ldd	r25, Y+6	; 0x06
     ffa:	9a 83       	std	Y+2, r25	; 0x02
     ffc:	89 83       	std	Y+1, r24	; 0x01
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	9a 81       	ldd	r25, Y+2	; 0x02
    1002:	01 97       	sbiw	r24, 0x01	; 1
    1004:	f1 f7       	brne	.-4      	; 0x1002 <main+0x410>
    1006:	9a 83       	std	Y+2, r25	; 0x02
    1008:	89 83       	std	Y+1, r24	; 0x01
    100a:	fe ce       	rjmp	.-516    	; 0xe08 <main+0x216>
				_delay_ms(1000);
			}
		} else {
			// If password is not set, prompt to create password again
			createPassword();
    100c:	0e 94 42 08 	call	0x1084	; 0x1084 <createPassword>
    1010:	fb ce       	rjmp	.-522    	; 0xe08 <main+0x216>

00001012 <initializeSystem>:
		}
	}
}

// System initialization function for peripherals and UART setup
void initializeSystem() {
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
    101a:	2c 97       	sbiw	r28, 0x0c	; 12
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	de bf       	out	0x3e, r29	; 62
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	cd bf       	out	0x3d, r28	; 61
	LCD_init();  // Initialize LCD for display
    1026:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <LCD_init>
	UART_ConfigType uartConfig = {8, 0, 1, 9600};  // UART configuration for 9600 baud rate
    102a:	ce 01       	movw	r24, r28
    102c:	01 96       	adiw	r24, 0x01	; 1
    102e:	99 87       	std	Y+9, r25	; 0x09
    1030:	88 87       	std	Y+8, r24	; 0x08
    1032:	ee e8       	ldi	r30, 0x8E	; 142
    1034:	f1 e0       	ldi	r31, 0x01	; 1
    1036:	fb 87       	std	Y+11, r31	; 0x0b
    1038:	ea 87       	std	Y+10, r30	; 0x0a
    103a:	f7 e0       	ldi	r31, 0x07	; 7
    103c:	fc 87       	std	Y+12, r31	; 0x0c
    103e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1040:	fb 85       	ldd	r31, Y+11	; 0x0b
    1042:	00 80       	ld	r0, Z
    1044:	8a 85       	ldd	r24, Y+10	; 0x0a
    1046:	9b 85       	ldd	r25, Y+11	; 0x0b
    1048:	01 96       	adiw	r24, 0x01	; 1
    104a:	9b 87       	std	Y+11, r25	; 0x0b
    104c:	8a 87       	std	Y+10, r24	; 0x0a
    104e:	e8 85       	ldd	r30, Y+8	; 0x08
    1050:	f9 85       	ldd	r31, Y+9	; 0x09
    1052:	00 82       	st	Z, r0
    1054:	88 85       	ldd	r24, Y+8	; 0x08
    1056:	99 85       	ldd	r25, Y+9	; 0x09
    1058:	01 96       	adiw	r24, 0x01	; 1
    105a:	99 87       	std	Y+9, r25	; 0x09
    105c:	88 87       	std	Y+8, r24	; 0x08
    105e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1060:	91 50       	subi	r25, 0x01	; 1
    1062:	9c 87       	std	Y+12, r25	; 0x0c
    1064:	ec 85       	ldd	r30, Y+12	; 0x0c
    1066:	ee 23       	and	r30, r30
    1068:	51 f7       	brne	.-44     	; 0x103e <initializeSystem+0x2c>
	UART_init(&uartConfig);  // Initialize UART with specified configuration
    106a:	ce 01       	movw	r24, r28
    106c:	01 96       	adiw	r24, 0x01	; 1
    106e:	0e 94 a7 1c 	call	0x394e	; 0x394e <UART_init>
}
    1072:	2c 96       	adiw	r28, 0x0c	; 12
    1074:	0f b6       	in	r0, 0x3f	; 63
    1076:	f8 94       	cli
    1078:	de bf       	out	0x3e, r29	; 62
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	cd bf       	out	0x3d, r28	; 61
    107e:	cf 91       	pop	r28
    1080:	df 91       	pop	r29
    1082:	08 95       	ret

00001084 <createPassword>:

// Function to create and set the password
void createPassword() {
    1084:	df 93       	push	r29
    1086:	cf 93       	push	r28
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	6f 97       	sbiw	r28, 0x1f	; 31
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	de bf       	out	0x3e, r29	; 62
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	cd bf       	out	0x3d, r28	; 61
	while (1) {
		// Get the two passwords from the user
		enterPasswords(password1, password2);
    1098:	8a ea       	ldi	r24, 0xAA	; 170
    109a:	91 e0       	ldi	r25, 0x01	; 1
    109c:	20 ea       	ldi	r18, 0xA0	; 160
    109e:	31 e0       	ldi	r19, 0x01	; 1
    10a0:	b9 01       	movw	r22, r18
    10a2:	0e 94 14 0b 	call	0x1628	; 0x1628 <enterPasswords>

		// Send the entered passwords to Control_ECU for verification
		UART_sendByte(START_COMMUNICATION);
    10a6:	85 e1       	ldi	r24, 0x15	; 21
    10a8:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <UART_sendByte>
		for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
    10ac:	1e 8e       	std	Y+30, r1	; 0x1e
    10ae:	0c c0       	rjmp	.+24     	; 0x10c8 <createPassword+0x44>
			UART_sendByte(password1[i]);  // Send first password
    10b0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10b2:	88 2f       	mov	r24, r24
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	fc 01       	movw	r30, r24
    10b8:	e6 55       	subi	r30, 0x56	; 86
    10ba:	fe 4f       	sbci	r31, 0xFE	; 254
    10bc:	80 81       	ld	r24, Z
    10be:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <UART_sendByte>
		// Get the two passwords from the user
		enterPasswords(password1, password2);

		// Send the entered passwords to Control_ECU for verification
		UART_sendByte(START_COMMUNICATION);
		for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
    10c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10c4:	8f 5f       	subi	r24, 0xFF	; 255
    10c6:	8e 8f       	std	Y+30, r24	; 0x1e
    10c8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10ca:	85 30       	cpi	r24, 0x05	; 5
    10cc:	88 f3       	brcs	.-30     	; 0x10b0 <createPassword+0x2c>
			UART_sendByte(password1[i]);  // Send first password
		}
		UART_sendByte(START_COMMUNICATION);  // Send delimiter for second password
    10ce:	85 e1       	ldi	r24, 0x15	; 21
    10d0:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <UART_sendByte>
		for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
    10d4:	1d 8e       	std	Y+29, r1	; 0x1d
    10d6:	0c c0       	rjmp	.+24     	; 0x10f0 <createPassword+0x6c>
			UART_sendByte(password2[i]);  // Send second password
    10d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10da:	88 2f       	mov	r24, r24
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	fc 01       	movw	r30, r24
    10e0:	e0 56       	subi	r30, 0x60	; 96
    10e2:	fe 4f       	sbci	r31, 0xFE	; 254
    10e4:	80 81       	ld	r24, Z
    10e6:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <UART_sendByte>
		UART_sendByte(START_COMMUNICATION);
		for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
			UART_sendByte(password1[i]);  // Send first password
		}
		UART_sendByte(START_COMMUNICATION);  // Send delimiter for second password
		for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
    10ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10ec:	8f 5f       	subi	r24, 0xFF	; 255
    10ee:	8d 8f       	std	Y+29, r24	; 0x1d
    10f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10f2:	85 30       	cpi	r24, 0x05	; 5
    10f4:	88 f3       	brcs	.-30     	; 0x10d8 <createPassword+0x54>
			UART_sendByte(password2[i]);  // Send second password
		}

		// Receive the match result from Control_ECU
		uint8 match = UART_recieveByte();
    10f6:	0e 94 75 1d 	call	0x3aea	; 0x3aea <UART_recieveByte>
    10fa:	8f 8f       	std	Y+31, r24	; 0x1f
		if (match == 1) {
    10fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10fe:	81 30       	cpi	r24, 0x01	; 1
    1100:	09 f0       	breq	.+2      	; 0x1104 <createPassword+0x80>
    1102:	84 c0       	rjmp	.+264    	; 0x120c <createPassword+0x188>
			// If passwords match, password set successfully
			LCD_clearScreen();
    1104:	0e 94 05 1a 	call	0x340a	; 0x340a <LCD_clearScreen>
			LCD_displayString("Password Set!");
    1108:	80 ea       	ldi	r24, 0xA0	; 160
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	0e 94 5e 19 	call	0x32bc	; 0x32bc <LCD_displayString>
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	aa e7       	ldi	r26, 0x7A	; 122
    1116:	b4 e4       	ldi	r27, 0x44	; 68
    1118:	89 8f       	std	Y+25, r24	; 0x19
    111a:	9a 8f       	std	Y+26, r25	; 0x1a
    111c:	ab 8f       	std	Y+27, r26	; 0x1b
    111e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1120:	69 8d       	ldd	r22, Y+25	; 0x19
    1122:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1124:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1126:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1128:	20 e0       	ldi	r18, 0x00	; 0
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	4a ef       	ldi	r20, 0xFA	; 250
    112e:	54 e4       	ldi	r21, 0x44	; 68
    1130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1134:	dc 01       	movw	r26, r24
    1136:	cb 01       	movw	r24, r22
    1138:	8d 8b       	std	Y+21, r24	; 0x15
    113a:	9e 8b       	std	Y+22, r25	; 0x16
    113c:	af 8b       	std	Y+23, r26	; 0x17
    113e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1140:	6d 89       	ldd	r22, Y+21	; 0x15
    1142:	7e 89       	ldd	r23, Y+22	; 0x16
    1144:	8f 89       	ldd	r24, Y+23	; 0x17
    1146:	98 8d       	ldd	r25, Y+24	; 0x18
    1148:	20 e0       	ldi	r18, 0x00	; 0
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	40 e8       	ldi	r20, 0x80	; 128
    114e:	5f e3       	ldi	r21, 0x3F	; 63
    1150:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1154:	88 23       	and	r24, r24
    1156:	2c f4       	brge	.+10     	; 0x1162 <createPassword+0xde>
		__ticks = 1;
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	9c 8b       	std	Y+20, r25	; 0x14
    115e:	8b 8b       	std	Y+19, r24	; 0x13
    1160:	3f c0       	rjmp	.+126    	; 0x11e0 <createPassword+0x15c>
	else if (__tmp > 65535)
    1162:	6d 89       	ldd	r22, Y+21	; 0x15
    1164:	7e 89       	ldd	r23, Y+22	; 0x16
    1166:	8f 89       	ldd	r24, Y+23	; 0x17
    1168:	98 8d       	ldd	r25, Y+24	; 0x18
    116a:	20 e0       	ldi	r18, 0x00	; 0
    116c:	3f ef       	ldi	r19, 0xFF	; 255
    116e:	4f e7       	ldi	r20, 0x7F	; 127
    1170:	57 e4       	ldi	r21, 0x47	; 71
    1172:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1176:	18 16       	cp	r1, r24
    1178:	4c f5       	brge	.+82     	; 0x11cc <createPassword+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    117a:	69 8d       	ldd	r22, Y+25	; 0x19
    117c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    117e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1180:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1182:	20 e0       	ldi	r18, 0x00	; 0
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	40 e2       	ldi	r20, 0x20	; 32
    1188:	51 e4       	ldi	r21, 0x41	; 65
    118a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    118e:	dc 01       	movw	r26, r24
    1190:	cb 01       	movw	r24, r22
    1192:	bc 01       	movw	r22, r24
    1194:	cd 01       	movw	r24, r26
    1196:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    119a:	dc 01       	movw	r26, r24
    119c:	cb 01       	movw	r24, r22
    119e:	9c 8b       	std	Y+20, r25	; 0x14
    11a0:	8b 8b       	std	Y+19, r24	; 0x13
    11a2:	0f c0       	rjmp	.+30     	; 0x11c2 <createPassword+0x13e>
    11a4:	88 ec       	ldi	r24, 0xC8	; 200
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	9a 8b       	std	Y+18, r25	; 0x12
    11aa:	89 8b       	std	Y+17, r24	; 0x11
    11ac:	89 89       	ldd	r24, Y+17	; 0x11
    11ae:	9a 89       	ldd	r25, Y+18	; 0x12
    11b0:	01 97       	sbiw	r24, 0x01	; 1
    11b2:	f1 f7       	brne	.-4      	; 0x11b0 <createPassword+0x12c>
    11b4:	9a 8b       	std	Y+18, r25	; 0x12
    11b6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11b8:	8b 89       	ldd	r24, Y+19	; 0x13
    11ba:	9c 89       	ldd	r25, Y+20	; 0x14
    11bc:	01 97       	sbiw	r24, 0x01	; 1
    11be:	9c 8b       	std	Y+20, r25	; 0x14
    11c0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11c2:	8b 89       	ldd	r24, Y+19	; 0x13
    11c4:	9c 89       	ldd	r25, Y+20	; 0x14
    11c6:	00 97       	sbiw	r24, 0x00	; 0
    11c8:	69 f7       	brne	.-38     	; 0x11a4 <createPassword+0x120>
    11ca:	14 c0       	rjmp	.+40     	; 0x11f4 <createPassword+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11cc:	6d 89       	ldd	r22, Y+21	; 0x15
    11ce:	7e 89       	ldd	r23, Y+22	; 0x16
    11d0:	8f 89       	ldd	r24, Y+23	; 0x17
    11d2:	98 8d       	ldd	r25, Y+24	; 0x18
    11d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11d8:	dc 01       	movw	r26, r24
    11da:	cb 01       	movw	r24, r22
    11dc:	9c 8b       	std	Y+20, r25	; 0x14
    11de:	8b 8b       	std	Y+19, r24	; 0x13
    11e0:	8b 89       	ldd	r24, Y+19	; 0x13
    11e2:	9c 89       	ldd	r25, Y+20	; 0x14
    11e4:	98 8b       	std	Y+16, r25	; 0x10
    11e6:	8f 87       	std	Y+15, r24	; 0x0f
    11e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    11ea:	98 89       	ldd	r25, Y+16	; 0x10
    11ec:	01 97       	sbiw	r24, 0x01	; 1
    11ee:	f1 f7       	brne	.-4      	; 0x11ec <createPassword+0x168>
    11f0:	98 8b       	std	Y+16, r25	; 0x10
    11f2:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			isPasswordSet = 1;  // Mark password as set
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	80 93 97 01 	sts	0x0197, r24
			_delay_ms(1000);
			isPasswordSet = 0;  // Password setting failed, reset flag
			UART_sendByte(TRY_AGAIN);  // Notify Control_ECU to retry
		}
	}
}
    11fa:	6f 96       	adiw	r28, 0x1f	; 31
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	f8 94       	cli
    1200:	de bf       	out	0x3e, r29	; 62
    1202:	0f be       	out	0x3f, r0	; 63
    1204:	cd bf       	out	0x3d, r28	; 61
    1206:	cf 91       	pop	r28
    1208:	df 91       	pop	r29
    120a:	08 95       	ret
			LCD_clearScreen();
			LCD_displayString("Password Set!");
			_delay_ms(1000);
			isPasswordSet = 1;  // Mark password as set
			break;
		} else if (match == 0) {
    120c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    120e:	88 23       	and	r24, r24
    1210:	09 f0       	breq	.+2      	; 0x1214 <createPassword+0x190>
    1212:	42 cf       	rjmp	.-380    	; 0x1098 <createPassword+0x14>
			// If passwords do not match, ask to try again
			LCD_clearScreen();
    1214:	0e 94 05 1a 	call	0x340a	; 0x340a <LCD_clearScreen>
			LCD_displayString("Mismatch!");
    1218:	8e ea       	ldi	r24, 0xAE	; 174
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	0e 94 5e 19 	call	0x32bc	; 0x32bc <LCD_displayString>
			LCD_displayStringRowColumn(1, 0, "Try Again");
    1220:	28 eb       	ldi	r18, 0xB8	; 184
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	60 e0       	ldi	r22, 0x00	; 0
    1228:	a9 01       	movw	r20, r18
    122a:	0e 94 c9 19 	call	0x3392	; 0x3392 <LCD_displayStringRowColumn>
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	aa e7       	ldi	r26, 0x7A	; 122
    1234:	b4 e4       	ldi	r27, 0x44	; 68
    1236:	8b 87       	std	Y+11, r24	; 0x0b
    1238:	9c 87       	std	Y+12, r25	; 0x0c
    123a:	ad 87       	std	Y+13, r26	; 0x0d
    123c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    123e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1240:	7c 85       	ldd	r23, Y+12	; 0x0c
    1242:	8d 85       	ldd	r24, Y+13	; 0x0d
    1244:	9e 85       	ldd	r25, Y+14	; 0x0e
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	4a ef       	ldi	r20, 0xFA	; 250
    124c:	54 e4       	ldi	r21, 0x44	; 68
    124e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1252:	dc 01       	movw	r26, r24
    1254:	cb 01       	movw	r24, r22
    1256:	8f 83       	std	Y+7, r24	; 0x07
    1258:	98 87       	std	Y+8, r25	; 0x08
    125a:	a9 87       	std	Y+9, r26	; 0x09
    125c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    125e:	6f 81       	ldd	r22, Y+7	; 0x07
    1260:	78 85       	ldd	r23, Y+8	; 0x08
    1262:	89 85       	ldd	r24, Y+9	; 0x09
    1264:	9a 85       	ldd	r25, Y+10	; 0x0a
    1266:	20 e0       	ldi	r18, 0x00	; 0
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	40 e8       	ldi	r20, 0x80	; 128
    126c:	5f e3       	ldi	r21, 0x3F	; 63
    126e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1272:	88 23       	and	r24, r24
    1274:	2c f4       	brge	.+10     	; 0x1280 <createPassword+0x1fc>
		__ticks = 1;
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	9e 83       	std	Y+6, r25	; 0x06
    127c:	8d 83       	std	Y+5, r24	; 0x05
    127e:	3f c0       	rjmp	.+126    	; 0x12fe <createPassword+0x27a>
	else if (__tmp > 65535)
    1280:	6f 81       	ldd	r22, Y+7	; 0x07
    1282:	78 85       	ldd	r23, Y+8	; 0x08
    1284:	89 85       	ldd	r24, Y+9	; 0x09
    1286:	9a 85       	ldd	r25, Y+10	; 0x0a
    1288:	20 e0       	ldi	r18, 0x00	; 0
    128a:	3f ef       	ldi	r19, 0xFF	; 255
    128c:	4f e7       	ldi	r20, 0x7F	; 127
    128e:	57 e4       	ldi	r21, 0x47	; 71
    1290:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1294:	18 16       	cp	r1, r24
    1296:	4c f5       	brge	.+82     	; 0x12ea <createPassword+0x266>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1298:	6b 85       	ldd	r22, Y+11	; 0x0b
    129a:	7c 85       	ldd	r23, Y+12	; 0x0c
    129c:	8d 85       	ldd	r24, Y+13	; 0x0d
    129e:	9e 85       	ldd	r25, Y+14	; 0x0e
    12a0:	20 e0       	ldi	r18, 0x00	; 0
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	40 e2       	ldi	r20, 0x20	; 32
    12a6:	51 e4       	ldi	r21, 0x41	; 65
    12a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ac:	dc 01       	movw	r26, r24
    12ae:	cb 01       	movw	r24, r22
    12b0:	bc 01       	movw	r22, r24
    12b2:	cd 01       	movw	r24, r26
    12b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12b8:	dc 01       	movw	r26, r24
    12ba:	cb 01       	movw	r24, r22
    12bc:	9e 83       	std	Y+6, r25	; 0x06
    12be:	8d 83       	std	Y+5, r24	; 0x05
    12c0:	0f c0       	rjmp	.+30     	; 0x12e0 <createPassword+0x25c>
    12c2:	88 ec       	ldi	r24, 0xC8	; 200
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	9c 83       	std	Y+4, r25	; 0x04
    12c8:	8b 83       	std	Y+3, r24	; 0x03
    12ca:	8b 81       	ldd	r24, Y+3	; 0x03
    12cc:	9c 81       	ldd	r25, Y+4	; 0x04
    12ce:	01 97       	sbiw	r24, 0x01	; 1
    12d0:	f1 f7       	brne	.-4      	; 0x12ce <createPassword+0x24a>
    12d2:	9c 83       	std	Y+4, r25	; 0x04
    12d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12d6:	8d 81       	ldd	r24, Y+5	; 0x05
    12d8:	9e 81       	ldd	r25, Y+6	; 0x06
    12da:	01 97       	sbiw	r24, 0x01	; 1
    12dc:	9e 83       	std	Y+6, r25	; 0x06
    12de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12e0:	8d 81       	ldd	r24, Y+5	; 0x05
    12e2:	9e 81       	ldd	r25, Y+6	; 0x06
    12e4:	00 97       	sbiw	r24, 0x00	; 0
    12e6:	69 f7       	brne	.-38     	; 0x12c2 <createPassword+0x23e>
    12e8:	14 c0       	rjmp	.+40     	; 0x1312 <createPassword+0x28e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ea:	6f 81       	ldd	r22, Y+7	; 0x07
    12ec:	78 85       	ldd	r23, Y+8	; 0x08
    12ee:	89 85       	ldd	r24, Y+9	; 0x09
    12f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12f6:	dc 01       	movw	r26, r24
    12f8:	cb 01       	movw	r24, r22
    12fa:	9e 83       	std	Y+6, r25	; 0x06
    12fc:	8d 83       	std	Y+5, r24	; 0x05
    12fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1300:	9e 81       	ldd	r25, Y+6	; 0x06
    1302:	9a 83       	std	Y+2, r25	; 0x02
    1304:	89 83       	std	Y+1, r24	; 0x01
    1306:	89 81       	ldd	r24, Y+1	; 0x01
    1308:	9a 81       	ldd	r25, Y+2	; 0x02
    130a:	01 97       	sbiw	r24, 0x01	; 1
    130c:	f1 f7       	brne	.-4      	; 0x130a <createPassword+0x286>
    130e:	9a 83       	std	Y+2, r25	; 0x02
    1310:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			isPasswordSet = 0;  // Password setting failed, reset flag
    1312:	10 92 97 01 	sts	0x0197, r1
			UART_sendByte(TRY_AGAIN);  // Notify Control_ECU to retry
    1316:	81 e1       	ldi	r24, 0x11	; 17
    1318:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <UART_sendByte>
    131c:	bd ce       	rjmp	.-646    	; 0x1098 <createPassword+0x14>

0000131e <mainMenu>:
		}
	}
}

// Function to display the main menu for door operation options
void mainMenu() {
    131e:	df 93       	push	r29
    1320:	cf 93       	push	r28
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    1326:	0e 94 05 1a 	call	0x340a	; 0x340a <LCD_clearScreen>
	LCD_displayString("(+) Open Door");
    132a:	82 ec       	ldi	r24, 0xC2	; 194
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	0e 94 5e 19 	call	0x32bc	; 0x32bc <LCD_displayString>
	LCD_displayStringRowColumn(1, 0, "(-) Change Pass");
    1332:	20 ed       	ldi	r18, 0xD0	; 208
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	60 e0       	ldi	r22, 0x00	; 0
    133a:	a9 01       	movw	r20, r18
    133c:	0e 94 c9 19 	call	0x3392	; 0x3392 <LCD_displayStringRowColumn>
}
    1340:	cf 91       	pop	r28
    1342:	df 91       	pop	r29
    1344:	08 95       	ret

00001346 <handleOperation>:

// Function to handle door operation based on selected command (open door/change password)
void handleOperation(uint8 command) {
    1346:	df 93       	push	r29
    1348:	cf 93       	push	r28
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    134e:	6e 97       	sbiw	r28, 0x1e	; 30
    1350:	0f b6       	in	r0, 0x3f	; 63
    1352:	f8 94       	cli
    1354:	de bf       	out	0x3e, r29	; 62
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	cd bf       	out	0x3d, r28	; 61
    135a:	8e 8f       	std	Y+30, r24	; 0x1e
	attempts = 0;  // Reset failed attempts count
    135c:	10 92 96 01 	sts	0x0196, r1
    1360:	31 c1       	rjmp	.+610    	; 0x15c4 <handleOperation+0x27e>
	while (attempts < ATTEMPTS_LIMIT) {
		// Prompt user to enter password
		enterPassword(enteredPassword, "Enter Password:");
    1362:	85 ea       	ldi	r24, 0xA5	; 165
    1364:	91 e0       	ldi	r25, 0x01	; 1
    1366:	20 ee       	ldi	r18, 0xE0	; 224
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	b9 01       	movw	r22, r18
    136c:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <enterPassword>
		UART_sendByte(command);  // Send the selected command (open door or change password)
    1370:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1372:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <UART_sendByte>
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	a8 ec       	ldi	r26, 0xC8	; 200
    137c:	b2 e4       	ldi	r27, 0x42	; 66
    137e:	89 8f       	std	Y+25, r24	; 0x19
    1380:	9a 8f       	std	Y+26, r25	; 0x1a
    1382:	ab 8f       	std	Y+27, r26	; 0x1b
    1384:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1386:	69 8d       	ldd	r22, Y+25	; 0x19
    1388:	7a 8d       	ldd	r23, Y+26	; 0x1a
    138a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    138c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	4a ef       	ldi	r20, 0xFA	; 250
    1394:	54 e4       	ldi	r21, 0x44	; 68
    1396:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    139a:	dc 01       	movw	r26, r24
    139c:	cb 01       	movw	r24, r22
    139e:	8d 8b       	std	Y+21, r24	; 0x15
    13a0:	9e 8b       	std	Y+22, r25	; 0x16
    13a2:	af 8b       	std	Y+23, r26	; 0x17
    13a4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13a6:	6d 89       	ldd	r22, Y+21	; 0x15
    13a8:	7e 89       	ldd	r23, Y+22	; 0x16
    13aa:	8f 89       	ldd	r24, Y+23	; 0x17
    13ac:	98 8d       	ldd	r25, Y+24	; 0x18
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	40 e8       	ldi	r20, 0x80	; 128
    13b4:	5f e3       	ldi	r21, 0x3F	; 63
    13b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13ba:	88 23       	and	r24, r24
    13bc:	2c f4       	brge	.+10     	; 0x13c8 <handleOperation+0x82>
		__ticks = 1;
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	9c 8b       	std	Y+20, r25	; 0x14
    13c4:	8b 8b       	std	Y+19, r24	; 0x13
    13c6:	3f c0       	rjmp	.+126    	; 0x1446 <handleOperation+0x100>
	else if (__tmp > 65535)
    13c8:	6d 89       	ldd	r22, Y+21	; 0x15
    13ca:	7e 89       	ldd	r23, Y+22	; 0x16
    13cc:	8f 89       	ldd	r24, Y+23	; 0x17
    13ce:	98 8d       	ldd	r25, Y+24	; 0x18
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	3f ef       	ldi	r19, 0xFF	; 255
    13d4:	4f e7       	ldi	r20, 0x7F	; 127
    13d6:	57 e4       	ldi	r21, 0x47	; 71
    13d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13dc:	18 16       	cp	r1, r24
    13de:	4c f5       	brge	.+82     	; 0x1432 <handleOperation+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13e0:	69 8d       	ldd	r22, Y+25	; 0x19
    13e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13e8:	20 e0       	ldi	r18, 0x00	; 0
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	40 e2       	ldi	r20, 0x20	; 32
    13ee:	51 e4       	ldi	r21, 0x41	; 65
    13f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13f4:	dc 01       	movw	r26, r24
    13f6:	cb 01       	movw	r24, r22
    13f8:	bc 01       	movw	r22, r24
    13fa:	cd 01       	movw	r24, r26
    13fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1400:	dc 01       	movw	r26, r24
    1402:	cb 01       	movw	r24, r22
    1404:	9c 8b       	std	Y+20, r25	; 0x14
    1406:	8b 8b       	std	Y+19, r24	; 0x13
    1408:	0f c0       	rjmp	.+30     	; 0x1428 <handleOperation+0xe2>
    140a:	88 ec       	ldi	r24, 0xC8	; 200
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	9a 8b       	std	Y+18, r25	; 0x12
    1410:	89 8b       	std	Y+17, r24	; 0x11
    1412:	89 89       	ldd	r24, Y+17	; 0x11
    1414:	9a 89       	ldd	r25, Y+18	; 0x12
    1416:	01 97       	sbiw	r24, 0x01	; 1
    1418:	f1 f7       	brne	.-4      	; 0x1416 <handleOperation+0xd0>
    141a:	9a 8b       	std	Y+18, r25	; 0x12
    141c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    141e:	8b 89       	ldd	r24, Y+19	; 0x13
    1420:	9c 89       	ldd	r25, Y+20	; 0x14
    1422:	01 97       	sbiw	r24, 0x01	; 1
    1424:	9c 8b       	std	Y+20, r25	; 0x14
    1426:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1428:	8b 89       	ldd	r24, Y+19	; 0x13
    142a:	9c 89       	ldd	r25, Y+20	; 0x14
    142c:	00 97       	sbiw	r24, 0x00	; 0
    142e:	69 f7       	brne	.-38     	; 0x140a <handleOperation+0xc4>
    1430:	14 c0       	rjmp	.+40     	; 0x145a <handleOperation+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1432:	6d 89       	ldd	r22, Y+21	; 0x15
    1434:	7e 89       	ldd	r23, Y+22	; 0x16
    1436:	8f 89       	ldd	r24, Y+23	; 0x17
    1438:	98 8d       	ldd	r25, Y+24	; 0x18
    143a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    143e:	dc 01       	movw	r26, r24
    1440:	cb 01       	movw	r24, r22
    1442:	9c 8b       	std	Y+20, r25	; 0x14
    1444:	8b 8b       	std	Y+19, r24	; 0x13
    1446:	8b 89       	ldd	r24, Y+19	; 0x13
    1448:	9c 89       	ldd	r25, Y+20	; 0x14
    144a:	98 8b       	std	Y+16, r25	; 0x10
    144c:	8f 87       	std	Y+15, r24	; 0x0f
    144e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1450:	98 89       	ldd	r25, Y+16	; 0x10
    1452:	01 97       	sbiw	r24, 0x01	; 1
    1454:	f1 f7       	brne	.-4      	; 0x1452 <handleOperation+0x10c>
    1456:	98 8b       	std	Y+16, r25	; 0x10
    1458:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);  // Brief delay for synchronization
		sendPasswordToControlECU(enteredPassword);  // Send the entered password to Control_ECU for verification
    145a:	85 ea       	ldi	r24, 0xA5	; 165
    145c:	91 e0       	ldi	r25, 0x01	; 1
    145e:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <sendPasswordToControlECU>

		uint8 response = UART_recieveByte();  // Receive password verification response from Control_ECU
    1462:	0e 94 75 1d 	call	0x3aea	; 0x3aea <UART_recieveByte>
    1466:	8d 8f       	std	Y+29, r24	; 0x1d
		if (response == 1) {
    1468:	8d 8d       	ldd	r24, Y+29	; 0x1d
    146a:	81 30       	cpi	r24, 0x01	; 1
    146c:	71 f5       	brne	.+92     	; 0x14ca <handleOperation+0x184>
			// If password is correct, perform operation (open door or change password)
			LCD_clearScreen();
    146e:	0e 94 05 1a 	call	0x340a	; 0x340a <LCD_clearScreen>
			if (command == COMMAND_OPEN_DOOR) {
    1472:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1474:	8b 32       	cpi	r24, 0x2B	; 43
    1476:	11 f5       	brne	.+68     	; 0x14bc <handleOperation+0x176>
				// If opening door, run the unlocking procedure
				LCD_displayString("Door is");
    1478:	80 ef       	ldi	r24, 0xF0	; 240
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	0e 94 5e 19 	call	0x32bc	; 0x32bc <LCD_displayString>
				LCD_moveCursor(1, 0);
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	60 e0       	ldi	r22, 0x00	; 0
    1484:	0e 94 87 19 	call	0x330e	; 0x330e <LCD_moveCursor>
				LCD_displayString("Unlocking...");
    1488:	88 ef       	ldi	r24, 0xF8	; 248
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	0e 94 5e 19 	call	0x32bc	; 0x32bc <LCD_displayString>
				setupTimer1();  // Start timer for unlocking operation
    1490:	0e 94 b3 05 	call	0xb66	; 0xb66 <setupTimer1>
				g_tick = 0;
    1494:	10 92 99 01 	sts	0x0199, r1
    1498:	10 92 98 01 	sts	0x0198, r1
				while (g_tick < 15);  // Wait for 15 seconds for motor operation
    149c:	80 91 98 01 	lds	r24, 0x0198
    14a0:	90 91 99 01 	lds	r25, 0x0199
    14a4:	8f 30       	cpi	r24, 0x0F	; 15
    14a6:	91 05       	cpc	r25, r1
    14a8:	c8 f3       	brcs	.-14     	; 0x149c <handleOperation+0x156>
				g_tick = 0;
    14aa:	10 92 99 01 	sts	0x0199, r1
    14ae:	10 92 98 01 	sts	0x0198, r1
				Timer1Stop();  // Stop timer
    14b2:	0e 94 ef 05 	call	0xbde	; 0xbde <Timer1Stop>
				displayWaitMessage();  // Display message to wait while people enter
    14b6:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <displayWaitMessage>
    14ba:	8b c0       	rjmp	.+278    	; 0x15d2 <handleOperation+0x28c>
			} else if (command == COMMAND_CHANGE_PASSWORD) {
    14bc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14be:	8d 32       	cpi	r24, 0x2D	; 45
    14c0:	09 f0       	breq	.+2      	; 0x14c4 <handleOperation+0x17e>
    14c2:	87 c0       	rjmp	.+270    	; 0x15d2 <handleOperation+0x28c>
				// If changing password, re-initiate password creation
				createPassword();
    14c4:	0e 94 42 08 	call	0x1084	; 0x1084 <createPassword>
    14c8:	84 c0       	rjmp	.+264    	; 0x15d2 <handleOperation+0x28c>
			}
			return;
		} else {
			// If password is incorrect, increment attempt counter and show error message
			LCD_clearScreen();
    14ca:	0e 94 05 1a 	call	0x340a	; 0x340a <LCD_clearScreen>
			LCD_displayString("Incorrect Pass!");
    14ce:	85 e0       	ldi	r24, 0x05	; 5
    14d0:	91 e0       	ldi	r25, 0x01	; 1
    14d2:	0e 94 5e 19 	call	0x32bc	; 0x32bc <LCD_displayString>
    14d6:	80 e0       	ldi	r24, 0x00	; 0
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	aa ef       	ldi	r26, 0xFA	; 250
    14dc:	b3 e4       	ldi	r27, 0x43	; 67
    14de:	8b 87       	std	Y+11, r24	; 0x0b
    14e0:	9c 87       	std	Y+12, r25	; 0x0c
    14e2:	ad 87       	std	Y+13, r26	; 0x0d
    14e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    14e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    14ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	4a ef       	ldi	r20, 0xFA	; 250
    14f4:	54 e4       	ldi	r21, 0x44	; 68
    14f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14fa:	dc 01       	movw	r26, r24
    14fc:	cb 01       	movw	r24, r22
    14fe:	8f 83       	std	Y+7, r24	; 0x07
    1500:	98 87       	std	Y+8, r25	; 0x08
    1502:	a9 87       	std	Y+9, r26	; 0x09
    1504:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1506:	6f 81       	ldd	r22, Y+7	; 0x07
    1508:	78 85       	ldd	r23, Y+8	; 0x08
    150a:	89 85       	ldd	r24, Y+9	; 0x09
    150c:	9a 85       	ldd	r25, Y+10	; 0x0a
    150e:	20 e0       	ldi	r18, 0x00	; 0
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	40 e8       	ldi	r20, 0x80	; 128
    1514:	5f e3       	ldi	r21, 0x3F	; 63
    1516:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    151a:	88 23       	and	r24, r24
    151c:	2c f4       	brge	.+10     	; 0x1528 <handleOperation+0x1e2>
		__ticks = 1;
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	9e 83       	std	Y+6, r25	; 0x06
    1524:	8d 83       	std	Y+5, r24	; 0x05
    1526:	3f c0       	rjmp	.+126    	; 0x15a6 <handleOperation+0x260>
	else if (__tmp > 65535)
    1528:	6f 81       	ldd	r22, Y+7	; 0x07
    152a:	78 85       	ldd	r23, Y+8	; 0x08
    152c:	89 85       	ldd	r24, Y+9	; 0x09
    152e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	3f ef       	ldi	r19, 0xFF	; 255
    1534:	4f e7       	ldi	r20, 0x7F	; 127
    1536:	57 e4       	ldi	r21, 0x47	; 71
    1538:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    153c:	18 16       	cp	r1, r24
    153e:	4c f5       	brge	.+82     	; 0x1592 <handleOperation+0x24c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1540:	6b 85       	ldd	r22, Y+11	; 0x0b
    1542:	7c 85       	ldd	r23, Y+12	; 0x0c
    1544:	8d 85       	ldd	r24, Y+13	; 0x0d
    1546:	9e 85       	ldd	r25, Y+14	; 0x0e
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	40 e2       	ldi	r20, 0x20	; 32
    154e:	51 e4       	ldi	r21, 0x41	; 65
    1550:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1554:	dc 01       	movw	r26, r24
    1556:	cb 01       	movw	r24, r22
    1558:	bc 01       	movw	r22, r24
    155a:	cd 01       	movw	r24, r26
    155c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1560:	dc 01       	movw	r26, r24
    1562:	cb 01       	movw	r24, r22
    1564:	9e 83       	std	Y+6, r25	; 0x06
    1566:	8d 83       	std	Y+5, r24	; 0x05
    1568:	0f c0       	rjmp	.+30     	; 0x1588 <handleOperation+0x242>
    156a:	88 ec       	ldi	r24, 0xC8	; 200
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	9c 83       	std	Y+4, r25	; 0x04
    1570:	8b 83       	std	Y+3, r24	; 0x03
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	9c 81       	ldd	r25, Y+4	; 0x04
    1576:	01 97       	sbiw	r24, 0x01	; 1
    1578:	f1 f7       	brne	.-4      	; 0x1576 <handleOperation+0x230>
    157a:	9c 83       	std	Y+4, r25	; 0x04
    157c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    157e:	8d 81       	ldd	r24, Y+5	; 0x05
    1580:	9e 81       	ldd	r25, Y+6	; 0x06
    1582:	01 97       	sbiw	r24, 0x01	; 1
    1584:	9e 83       	std	Y+6, r25	; 0x06
    1586:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1588:	8d 81       	ldd	r24, Y+5	; 0x05
    158a:	9e 81       	ldd	r25, Y+6	; 0x06
    158c:	00 97       	sbiw	r24, 0x00	; 0
    158e:	69 f7       	brne	.-38     	; 0x156a <handleOperation+0x224>
    1590:	14 c0       	rjmp	.+40     	; 0x15ba <handleOperation+0x274>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1592:	6f 81       	ldd	r22, Y+7	; 0x07
    1594:	78 85       	ldd	r23, Y+8	; 0x08
    1596:	89 85       	ldd	r24, Y+9	; 0x09
    1598:	9a 85       	ldd	r25, Y+10	; 0x0a
    159a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	9e 83       	std	Y+6, r25	; 0x06
    15a4:	8d 83       	std	Y+5, r24	; 0x05
    15a6:	8d 81       	ldd	r24, Y+5	; 0x05
    15a8:	9e 81       	ldd	r25, Y+6	; 0x06
    15aa:	9a 83       	std	Y+2, r25	; 0x02
    15ac:	89 83       	std	Y+1, r24	; 0x01
    15ae:	89 81       	ldd	r24, Y+1	; 0x01
    15b0:	9a 81       	ldd	r25, Y+2	; 0x02
    15b2:	01 97       	sbiw	r24, 0x01	; 1
    15b4:	f1 f7       	brne	.-4      	; 0x15b2 <handleOperation+0x26c>
    15b6:	9a 83       	std	Y+2, r25	; 0x02
    15b8:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			attempts++;
    15ba:	80 91 96 01 	lds	r24, 0x0196
    15be:	8f 5f       	subi	r24, 0xFF	; 255
    15c0:	80 93 96 01 	sts	0x0196, r24
}

// Function to handle door operation based on selected command (open door/change password)
void handleOperation(uint8 command) {
	attempts = 0;  // Reset failed attempts count
	while (attempts < ATTEMPTS_LIMIT) {
    15c4:	80 91 96 01 	lds	r24, 0x0196
    15c8:	83 30       	cpi	r24, 0x03	; 3
    15ca:	08 f4       	brcc	.+2      	; 0x15ce <handleOperation+0x288>
    15cc:	ca ce       	rjmp	.-620    	; 0x1362 <handleOperation+0x1c>
			_delay_ms(500);
			attempts++;
		}
	}
	// If failed attempts exceed the limit, lock the system
	handleFailedAttempts();
    15ce:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <handleFailedAttempts>
}
    15d2:	6e 96       	adiw	r28, 0x1e	; 30
    15d4:	0f b6       	in	r0, 0x3f	; 63
    15d6:	f8 94       	cli
    15d8:	de bf       	out	0x3e, r29	; 62
    15da:	0f be       	out	0x3f, r0	; 63
    15dc:	cd bf       	out	0x3d, r28	; 61
    15de:	cf 91       	pop	r28
    15e0:	df 91       	pop	r29
    15e2:	08 95       	ret

000015e4 <handleFailedAttempts>:

// Function to handle system lockout after failed attempts
void handleFailedAttempts() {
    15e4:	df 93       	push	r29
    15e6:	cf 93       	push	r28
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
	if (attempts >= ATTEMPTS_LIMIT) {
    15ec:	80 91 96 01 	lds	r24, 0x0196
    15f0:	83 30       	cpi	r24, 0x03	; 3
    15f2:	b8 f0       	brcs	.+46     	; 0x1622 <handleFailedAttempts+0x3e>
		setupTimer1();  // Start timer for lockout duration
    15f4:	0e 94 b3 05 	call	0xb66	; 0xb66 <setupTimer1>
		g_tick = 0;
    15f8:	10 92 99 01 	sts	0x0199, r1
    15fc:	10 92 98 01 	sts	0x0198, r1
		LCD_clearScreen();
    1600:	0e 94 05 1a 	call	0x340a	; 0x340a <LCD_clearScreen>
		LCD_displayString("System Locked!");
    1604:	85 e1       	ldi	r24, 0x15	; 21
    1606:	91 e0       	ldi	r25, 0x01	; 1
    1608:	0e 94 5e 19 	call	0x32bc	; 0x32bc <LCD_displayString>
		while (g_tick < 60);  // Lock the system for 60 seconds (1 minute)
    160c:	80 91 98 01 	lds	r24, 0x0198
    1610:	90 91 99 01 	lds	r25, 0x0199
    1614:	8c 33       	cpi	r24, 0x3C	; 60
    1616:	91 05       	cpc	r25, r1
    1618:	c8 f3       	brcs	.-14     	; 0x160c <handleFailedAttempts+0x28>
		attempts = 0;  // Reset attempts count
    161a:	10 92 96 01 	sts	0x0196, r1
		Timer1Stop();  // Stop timer
    161e:	0e 94 ef 05 	call	0xbde	; 0xbde <Timer1Stop>
	}
}
    1622:	cf 91       	pop	r28
    1624:	df 91       	pop	r29
    1626:	08 95       	ret

00001628 <enterPasswords>:

// Function to prompt the user to enter two passwords (for creation or verification)
void enterPasswords(uint8 *passwordBuffer1, uint8 *passwordBuffer2) {
    1628:	0f 93       	push	r16
    162a:	1f 93       	push	r17
    162c:	df 93       	push	r29
    162e:	cf 93       	push	r28
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
    1634:	ce 54       	subi	r28, 0x4E	; 78
    1636:	d0 40       	sbci	r29, 0x00	; 0
    1638:	0f b6       	in	r0, 0x3f	; 63
    163a:	f8 94       	cli
    163c:	de bf       	out	0x3e, r29	; 62
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	cd bf       	out	0x3d, r28	; 61
    1642:	fe 01       	movw	r30, r28
    1644:	e5 5b       	subi	r30, 0xB5	; 181
    1646:	ff 4f       	sbci	r31, 0xFF	; 255
    1648:	91 83       	std	Z+1, r25	; 0x01
    164a:	80 83       	st	Z, r24
    164c:	fe 01       	movw	r30, r28
    164e:	e3 5b       	subi	r30, 0xB3	; 179
    1650:	ff 4f       	sbci	r31, 0xFF	; 255
    1652:	71 83       	std	Z+1, r23	; 0x01
    1654:	60 83       	st	Z, r22
	uint8 key1, key2;
	LCD_clearScreen();
    1656:	0e 94 05 1a 	call	0x340a	; 0x340a <LCD_clearScreen>
	LCD_displayString("Create pass :)");
    165a:	84 e2       	ldi	r24, 0x24	; 36
    165c:	91 e0       	ldi	r25, 0x01	; 1
    165e:	0e 94 5e 19 	call	0x32bc	; 0x32bc <LCD_displayString>
    1662:	fe 01       	movw	r30, r28
    1664:	ed 5b       	subi	r30, 0xBD	; 189
    1666:	ff 4f       	sbci	r31, 0xFF	; 255
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	aa e7       	ldi	r26, 0x7A	; 122
    166e:	b4 e4       	ldi	r27, 0x44	; 68
    1670:	80 83       	st	Z, r24
    1672:	91 83       	std	Z+1, r25	; 0x01
    1674:	a2 83       	std	Z+2, r26	; 0x02
    1676:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1678:	8e 01       	movw	r16, r28
    167a:	01 5c       	subi	r16, 0xC1	; 193
    167c:	1f 4f       	sbci	r17, 0xFF	; 255
    167e:	fe 01       	movw	r30, r28
    1680:	ed 5b       	subi	r30, 0xBD	; 189
    1682:	ff 4f       	sbci	r31, 0xFF	; 255
    1684:	60 81       	ld	r22, Z
    1686:	71 81       	ldd	r23, Z+1	; 0x01
    1688:	82 81       	ldd	r24, Z+2	; 0x02
    168a:	93 81       	ldd	r25, Z+3	; 0x03
    168c:	20 e0       	ldi	r18, 0x00	; 0
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	4a ef       	ldi	r20, 0xFA	; 250
    1692:	54 e4       	ldi	r21, 0x44	; 68
    1694:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1698:	dc 01       	movw	r26, r24
    169a:	cb 01       	movw	r24, r22
    169c:	f8 01       	movw	r30, r16
    169e:	80 83       	st	Z, r24
    16a0:	91 83       	std	Z+1, r25	; 0x01
    16a2:	a2 83       	std	Z+2, r26	; 0x02
    16a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16a6:	fe 01       	movw	r30, r28
    16a8:	ff 96       	adiw	r30, 0x3f	; 63
    16aa:	60 81       	ld	r22, Z
    16ac:	71 81       	ldd	r23, Z+1	; 0x01
    16ae:	82 81       	ldd	r24, Z+2	; 0x02
    16b0:	93 81       	ldd	r25, Z+3	; 0x03
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	40 e8       	ldi	r20, 0x80	; 128
    16b8:	5f e3       	ldi	r21, 0x3F	; 63
    16ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16be:	88 23       	and	r24, r24
    16c0:	2c f4       	brge	.+10     	; 0x16cc <enterPasswords+0xa4>
		__ticks = 1;
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	9e af       	std	Y+62, r25	; 0x3e
    16c8:	8d af       	std	Y+61, r24	; 0x3d
    16ca:	46 c0       	rjmp	.+140    	; 0x1758 <enterPasswords+0x130>
	else if (__tmp > 65535)
    16cc:	fe 01       	movw	r30, r28
    16ce:	ff 96       	adiw	r30, 0x3f	; 63
    16d0:	60 81       	ld	r22, Z
    16d2:	71 81       	ldd	r23, Z+1	; 0x01
    16d4:	82 81       	ldd	r24, Z+2	; 0x02
    16d6:	93 81       	ldd	r25, Z+3	; 0x03
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	3f ef       	ldi	r19, 0xFF	; 255
    16dc:	4f e7       	ldi	r20, 0x7F	; 127
    16de:	57 e4       	ldi	r21, 0x47	; 71
    16e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16e4:	18 16       	cp	r1, r24
    16e6:	64 f5       	brge	.+88     	; 0x1740 <enterPasswords+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e8:	fe 01       	movw	r30, r28
    16ea:	ed 5b       	subi	r30, 0xBD	; 189
    16ec:	ff 4f       	sbci	r31, 0xFF	; 255
    16ee:	60 81       	ld	r22, Z
    16f0:	71 81       	ldd	r23, Z+1	; 0x01
    16f2:	82 81       	ldd	r24, Z+2	; 0x02
    16f4:	93 81       	ldd	r25, Z+3	; 0x03
    16f6:	20 e0       	ldi	r18, 0x00	; 0
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	40 e2       	ldi	r20, 0x20	; 32
    16fc:	51 e4       	ldi	r21, 0x41	; 65
    16fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	bc 01       	movw	r22, r24
    1708:	cd 01       	movw	r24, r26
    170a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    170e:	dc 01       	movw	r26, r24
    1710:	cb 01       	movw	r24, r22
    1712:	9e af       	std	Y+62, r25	; 0x3e
    1714:	8d af       	std	Y+61, r24	; 0x3d
    1716:	0f c0       	rjmp	.+30     	; 0x1736 <enterPasswords+0x10e>
    1718:	88 ec       	ldi	r24, 0xC8	; 200
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	9c af       	std	Y+60, r25	; 0x3c
    171e:	8b af       	std	Y+59, r24	; 0x3b
    1720:	8b ad       	ldd	r24, Y+59	; 0x3b
    1722:	9c ad       	ldd	r25, Y+60	; 0x3c
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	f1 f7       	brne	.-4      	; 0x1724 <enterPasswords+0xfc>
    1728:	9c af       	std	Y+60, r25	; 0x3c
    172a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    172c:	8d ad       	ldd	r24, Y+61	; 0x3d
    172e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1730:	01 97       	sbiw	r24, 0x01	; 1
    1732:	9e af       	std	Y+62, r25	; 0x3e
    1734:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1736:	8d ad       	ldd	r24, Y+61	; 0x3d
    1738:	9e ad       	ldd	r25, Y+62	; 0x3e
    173a:	00 97       	sbiw	r24, 0x00	; 0
    173c:	69 f7       	brne	.-38     	; 0x1718 <enterPasswords+0xf0>
    173e:	16 c0       	rjmp	.+44     	; 0x176c <enterPasswords+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1740:	fe 01       	movw	r30, r28
    1742:	ff 96       	adiw	r30, 0x3f	; 63
    1744:	60 81       	ld	r22, Z
    1746:	71 81       	ldd	r23, Z+1	; 0x01
    1748:	82 81       	ldd	r24, Z+2	; 0x02
    174a:	93 81       	ldd	r25, Z+3	; 0x03
    174c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1750:	dc 01       	movw	r26, r24
    1752:	cb 01       	movw	r24, r22
    1754:	9e af       	std	Y+62, r25	; 0x3e
    1756:	8d af       	std	Y+61, r24	; 0x3d
    1758:	8d ad       	ldd	r24, Y+61	; 0x3d
    175a:	9e ad       	ldd	r25, Y+62	; 0x3e
    175c:	9a af       	std	Y+58, r25	; 0x3a
    175e:	89 af       	std	Y+57, r24	; 0x39
    1760:	89 ad       	ldd	r24, Y+57	; 0x39
    1762:	9a ad       	ldd	r25, Y+58	; 0x3a
    1764:	01 97       	sbiw	r24, 0x01	; 1
    1766:	f1 f7       	brne	.-4      	; 0x1764 <enterPasswords+0x13c>
    1768:	9a af       	std	Y+58, r25	; 0x3a
    176a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1000);
	LCD_clearScreen();
    176c:	0e 94 05 1a 	call	0x340a	; 0x340a <LCD_clearScreen>
	LCD_displayString("Plz enter pass:");
    1770:	83 e3       	ldi	r24, 0x33	; 51
    1772:	91 e0       	ldi	r25, 0x01	; 1
    1774:	0e 94 5e 19 	call	0x32bc	; 0x32bc <LCD_displayString>
	LCD_moveCursor(1, 0);
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	60 e0       	ldi	r22, 0x00	; 0
    177c:	0e 94 87 19 	call	0x330e	; 0x330e <LCD_moveCursor>

	// User enters the first password
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
    1780:	fe 01       	movw	r30, r28
    1782:	e8 5b       	subi	r30, 0xB8	; 184
    1784:	ff 4f       	sbci	r31, 0xFF	; 255
    1786:	10 82       	st	Z, r1
    1788:	90 c0       	rjmp	.+288    	; 0x18aa <enterPasswords+0x282>
		*(passwordBuffer1 + i) = KEYPAD_getPressedKey();
    178a:	fe 01       	movw	r30, r28
    178c:	e8 5b       	subi	r30, 0xB8	; 184
    178e:	ff 4f       	sbci	r31, 0xFF	; 255
    1790:	80 81       	ld	r24, Z
    1792:	28 2f       	mov	r18, r24
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	fe 01       	movw	r30, r28
    1798:	e5 5b       	subi	r30, 0xB5	; 181
    179a:	ff 4f       	sbci	r31, 0xFF	; 255
    179c:	80 81       	ld	r24, Z
    179e:	91 81       	ldd	r25, Z+1	; 0x01
    17a0:	8c 01       	movw	r16, r24
    17a2:	02 0f       	add	r16, r18
    17a4:	13 1f       	adc	r17, r19
    17a6:	0e 94 59 13 	call	0x26b2	; 0x26b2 <KEYPAD_getPressedKey>
    17aa:	f8 01       	movw	r30, r16
    17ac:	80 83       	st	Z, r24
		LCD_displayCharacter('*');  // Display '*' for each entered character
    17ae:	8a e2       	ldi	r24, 0x2A	; 42
    17b0:	0e 94 6f 17 	call	0x2ede	; 0x2ede <LCD_displayCharacter>
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	a6 e9       	ldi	r26, 0x96	; 150
    17ba:	b3 e4       	ldi	r27, 0x43	; 67
    17bc:	8d ab       	std	Y+53, r24	; 0x35
    17be:	9e ab       	std	Y+54, r25	; 0x36
    17c0:	af ab       	std	Y+55, r26	; 0x37
    17c2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17c4:	6d a9       	ldd	r22, Y+53	; 0x35
    17c6:	7e a9       	ldd	r23, Y+54	; 0x36
    17c8:	8f a9       	ldd	r24, Y+55	; 0x37
    17ca:	98 ad       	ldd	r25, Y+56	; 0x38
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	4a ef       	ldi	r20, 0xFA	; 250
    17d2:	54 e4       	ldi	r21, 0x44	; 68
    17d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d8:	dc 01       	movw	r26, r24
    17da:	cb 01       	movw	r24, r22
    17dc:	89 ab       	std	Y+49, r24	; 0x31
    17de:	9a ab       	std	Y+50, r25	; 0x32
    17e0:	ab ab       	std	Y+51, r26	; 0x33
    17e2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17e4:	69 a9       	ldd	r22, Y+49	; 0x31
    17e6:	7a a9       	ldd	r23, Y+50	; 0x32
    17e8:	8b a9       	ldd	r24, Y+51	; 0x33
    17ea:	9c a9       	ldd	r25, Y+52	; 0x34
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	40 e8       	ldi	r20, 0x80	; 128
    17f2:	5f e3       	ldi	r21, 0x3F	; 63
    17f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17f8:	88 23       	and	r24, r24
    17fa:	2c f4       	brge	.+10     	; 0x1806 <enterPasswords+0x1de>
		__ticks = 1;
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	98 ab       	std	Y+48, r25	; 0x30
    1802:	8f a7       	std	Y+47, r24	; 0x2f
    1804:	3f c0       	rjmp	.+126    	; 0x1884 <enterPasswords+0x25c>
	else if (__tmp > 65535)
    1806:	69 a9       	ldd	r22, Y+49	; 0x31
    1808:	7a a9       	ldd	r23, Y+50	; 0x32
    180a:	8b a9       	ldd	r24, Y+51	; 0x33
    180c:	9c a9       	ldd	r25, Y+52	; 0x34
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	3f ef       	ldi	r19, 0xFF	; 255
    1812:	4f e7       	ldi	r20, 0x7F	; 127
    1814:	57 e4       	ldi	r21, 0x47	; 71
    1816:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    181a:	18 16       	cp	r1, r24
    181c:	4c f5       	brge	.+82     	; 0x1870 <enterPasswords+0x248>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    181e:	6d a9       	ldd	r22, Y+53	; 0x35
    1820:	7e a9       	ldd	r23, Y+54	; 0x36
    1822:	8f a9       	ldd	r24, Y+55	; 0x37
    1824:	98 ad       	ldd	r25, Y+56	; 0x38
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	40 e2       	ldi	r20, 0x20	; 32
    182c:	51 e4       	ldi	r21, 0x41	; 65
    182e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	bc 01       	movw	r22, r24
    1838:	cd 01       	movw	r24, r26
    183a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	98 ab       	std	Y+48, r25	; 0x30
    1844:	8f a7       	std	Y+47, r24	; 0x2f
    1846:	0f c0       	rjmp	.+30     	; 0x1866 <enterPasswords+0x23e>
    1848:	88 ec       	ldi	r24, 0xC8	; 200
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	9e a7       	std	Y+46, r25	; 0x2e
    184e:	8d a7       	std	Y+45, r24	; 0x2d
    1850:	8d a5       	ldd	r24, Y+45	; 0x2d
    1852:	9e a5       	ldd	r25, Y+46	; 0x2e
    1854:	01 97       	sbiw	r24, 0x01	; 1
    1856:	f1 f7       	brne	.-4      	; 0x1854 <enterPasswords+0x22c>
    1858:	9e a7       	std	Y+46, r25	; 0x2e
    185a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    185c:	8f a5       	ldd	r24, Y+47	; 0x2f
    185e:	98 a9       	ldd	r25, Y+48	; 0x30
    1860:	01 97       	sbiw	r24, 0x01	; 1
    1862:	98 ab       	std	Y+48, r25	; 0x30
    1864:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1866:	8f a5       	ldd	r24, Y+47	; 0x2f
    1868:	98 a9       	ldd	r25, Y+48	; 0x30
    186a:	00 97       	sbiw	r24, 0x00	; 0
    186c:	69 f7       	brne	.-38     	; 0x1848 <enterPasswords+0x220>
    186e:	14 c0       	rjmp	.+40     	; 0x1898 <enterPasswords+0x270>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1870:	69 a9       	ldd	r22, Y+49	; 0x31
    1872:	7a a9       	ldd	r23, Y+50	; 0x32
    1874:	8b a9       	ldd	r24, Y+51	; 0x33
    1876:	9c a9       	ldd	r25, Y+52	; 0x34
    1878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    187c:	dc 01       	movw	r26, r24
    187e:	cb 01       	movw	r24, r22
    1880:	98 ab       	std	Y+48, r25	; 0x30
    1882:	8f a7       	std	Y+47, r24	; 0x2f
    1884:	8f a5       	ldd	r24, Y+47	; 0x2f
    1886:	98 a9       	ldd	r25, Y+48	; 0x30
    1888:	9c a7       	std	Y+44, r25	; 0x2c
    188a:	8b a7       	std	Y+43, r24	; 0x2b
    188c:	8b a5       	ldd	r24, Y+43	; 0x2b
    188e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1890:	01 97       	sbiw	r24, 0x01	; 1
    1892:	f1 f7       	brne	.-4      	; 0x1890 <enterPasswords+0x268>
    1894:	9c a7       	std	Y+44, r25	; 0x2c
    1896:	8b a7       	std	Y+43, r24	; 0x2b
	LCD_clearScreen();
	LCD_displayString("Plz enter pass:");
	LCD_moveCursor(1, 0);

	// User enters the first password
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
    1898:	de 01       	movw	r26, r28
    189a:	a8 5b       	subi	r26, 0xB8	; 184
    189c:	bf 4f       	sbci	r27, 0xFF	; 255
    189e:	fe 01       	movw	r30, r28
    18a0:	e8 5b       	subi	r30, 0xB8	; 184
    18a2:	ff 4f       	sbci	r31, 0xFF	; 255
    18a4:	80 81       	ld	r24, Z
    18a6:	8f 5f       	subi	r24, 0xFF	; 255
    18a8:	8c 93       	st	X, r24
    18aa:	fe 01       	movw	r30, r28
    18ac:	e8 5b       	subi	r30, 0xB8	; 184
    18ae:	ff 4f       	sbci	r31, 0xFF	; 255
    18b0:	80 81       	ld	r24, Z
    18b2:	85 30       	cpi	r24, 0x05	; 5
    18b4:	08 f4       	brcc	.+2      	; 0x18b8 <enterPasswords+0x290>
    18b6:	69 cf       	rjmp	.-302    	; 0x178a <enterPasswords+0x162>
    18b8:	78 c0       	rjmp	.+240    	; 0x19aa <enterPasswords+0x382>
		_delay_ms(300);  // Delay for key debounce
	}

	// Wait for user to press the Enter key to finish entering the first password
	while (key1 != ENTER_BUTTON) {
		key1 = KEYPAD_getPressedKey();
    18ba:	0e 94 59 13 	call	0x26b2	; 0x26b2 <KEYPAD_getPressedKey>
    18be:	fe 01       	movw	r30, r28
    18c0:	e6 5b       	subi	r30, 0xB6	; 182
    18c2:	ff 4f       	sbci	r31, 0xFF	; 255
    18c4:	80 83       	st	Z, r24
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	aa ef       	ldi	r26, 0xFA	; 250
    18cc:	b3 e4       	ldi	r27, 0x43	; 67
    18ce:	8f a3       	std	Y+39, r24	; 0x27
    18d0:	98 a7       	std	Y+40, r25	; 0x28
    18d2:	a9 a7       	std	Y+41, r26	; 0x29
    18d4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d6:	6f a1       	ldd	r22, Y+39	; 0x27
    18d8:	78 a5       	ldd	r23, Y+40	; 0x28
    18da:	89 a5       	ldd	r24, Y+41	; 0x29
    18dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	4a ef       	ldi	r20, 0xFA	; 250
    18e4:	54 e4       	ldi	r21, 0x44	; 68
    18e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	8b a3       	std	Y+35, r24	; 0x23
    18f0:	9c a3       	std	Y+36, r25	; 0x24
    18f2:	ad a3       	std	Y+37, r26	; 0x25
    18f4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18f6:	6b a1       	ldd	r22, Y+35	; 0x23
    18f8:	7c a1       	ldd	r23, Y+36	; 0x24
    18fa:	8d a1       	ldd	r24, Y+37	; 0x25
    18fc:	9e a1       	ldd	r25, Y+38	; 0x26
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	40 e8       	ldi	r20, 0x80	; 128
    1904:	5f e3       	ldi	r21, 0x3F	; 63
    1906:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    190a:	88 23       	and	r24, r24
    190c:	2c f4       	brge	.+10     	; 0x1918 <enterPasswords+0x2f0>
		__ticks = 1;
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	9a a3       	std	Y+34, r25	; 0x22
    1914:	89 a3       	std	Y+33, r24	; 0x21
    1916:	3f c0       	rjmp	.+126    	; 0x1996 <enterPasswords+0x36e>
	else if (__tmp > 65535)
    1918:	6b a1       	ldd	r22, Y+35	; 0x23
    191a:	7c a1       	ldd	r23, Y+36	; 0x24
    191c:	8d a1       	ldd	r24, Y+37	; 0x25
    191e:	9e a1       	ldd	r25, Y+38	; 0x26
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	3f ef       	ldi	r19, 0xFF	; 255
    1924:	4f e7       	ldi	r20, 0x7F	; 127
    1926:	57 e4       	ldi	r21, 0x47	; 71
    1928:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    192c:	18 16       	cp	r1, r24
    192e:	4c f5       	brge	.+82     	; 0x1982 <enterPasswords+0x35a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1930:	6f a1       	ldd	r22, Y+39	; 0x27
    1932:	78 a5       	ldd	r23, Y+40	; 0x28
    1934:	89 a5       	ldd	r24, Y+41	; 0x29
    1936:	9a a5       	ldd	r25, Y+42	; 0x2a
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	40 e2       	ldi	r20, 0x20	; 32
    193e:	51 e4       	ldi	r21, 0x41	; 65
    1940:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1944:	dc 01       	movw	r26, r24
    1946:	cb 01       	movw	r24, r22
    1948:	bc 01       	movw	r22, r24
    194a:	cd 01       	movw	r24, r26
    194c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1950:	dc 01       	movw	r26, r24
    1952:	cb 01       	movw	r24, r22
    1954:	9a a3       	std	Y+34, r25	; 0x22
    1956:	89 a3       	std	Y+33, r24	; 0x21
    1958:	0f c0       	rjmp	.+30     	; 0x1978 <enterPasswords+0x350>
    195a:	88 ec       	ldi	r24, 0xC8	; 200
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	98 a3       	std	Y+32, r25	; 0x20
    1960:	8f 8f       	std	Y+31, r24	; 0x1f
    1962:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1964:	98 a1       	ldd	r25, Y+32	; 0x20
    1966:	01 97       	sbiw	r24, 0x01	; 1
    1968:	f1 f7       	brne	.-4      	; 0x1966 <enterPasswords+0x33e>
    196a:	98 a3       	std	Y+32, r25	; 0x20
    196c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    196e:	89 a1       	ldd	r24, Y+33	; 0x21
    1970:	9a a1       	ldd	r25, Y+34	; 0x22
    1972:	01 97       	sbiw	r24, 0x01	; 1
    1974:	9a a3       	std	Y+34, r25	; 0x22
    1976:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1978:	89 a1       	ldd	r24, Y+33	; 0x21
    197a:	9a a1       	ldd	r25, Y+34	; 0x22
    197c:	00 97       	sbiw	r24, 0x00	; 0
    197e:	69 f7       	brne	.-38     	; 0x195a <enterPasswords+0x332>
    1980:	14 c0       	rjmp	.+40     	; 0x19aa <enterPasswords+0x382>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1982:	6b a1       	ldd	r22, Y+35	; 0x23
    1984:	7c a1       	ldd	r23, Y+36	; 0x24
    1986:	8d a1       	ldd	r24, Y+37	; 0x25
    1988:	9e a1       	ldd	r25, Y+38	; 0x26
    198a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	9a a3       	std	Y+34, r25	; 0x22
    1994:	89 a3       	std	Y+33, r24	; 0x21
    1996:	89 a1       	ldd	r24, Y+33	; 0x21
    1998:	9a a1       	ldd	r25, Y+34	; 0x22
    199a:	9e 8f       	std	Y+30, r25	; 0x1e
    199c:	8d 8f       	std	Y+29, r24	; 0x1d
    199e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19a0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19a2:	01 97       	sbiw	r24, 0x01	; 1
    19a4:	f1 f7       	brne	.-4      	; 0x19a2 <enterPasswords+0x37a>
    19a6:	9e 8f       	std	Y+30, r25	; 0x1e
    19a8:	8d 8f       	std	Y+29, r24	; 0x1d
		LCD_displayCharacter('*');  // Display '*' for each entered character
		_delay_ms(300);  // Delay for key debounce
	}

	// Wait for user to press the Enter key to finish entering the first password
	while (key1 != ENTER_BUTTON) {
    19aa:	fe 01       	movw	r30, r28
    19ac:	e6 5b       	subi	r30, 0xB6	; 182
    19ae:	ff 4f       	sbci	r31, 0xFF	; 255
    19b0:	80 81       	ld	r24, Z
    19b2:	8d 30       	cpi	r24, 0x0D	; 13
    19b4:	09 f0       	breq	.+2      	; 0x19b8 <enterPasswords+0x390>
    19b6:	81 cf       	rjmp	.-254    	; 0x18ba <enterPasswords+0x292>
		key1 = KEYPAD_getPressedKey();
		_delay_ms(500);
	}

	// Prompt to re-enter the password for verification
	LCD_clearScreen();
    19b8:	0e 94 05 1a 	call	0x340a	; 0x340a <LCD_clearScreen>
	LCD_displayString("Plz re-enter");
    19bc:	83 e4       	ldi	r24, 0x43	; 67
    19be:	91 e0       	ldi	r25, 0x01	; 1
    19c0:	0e 94 5e 19 	call	0x32bc	; 0x32bc <LCD_displayString>
	LCD_moveCursor(1, 0);
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	60 e0       	ldi	r22, 0x00	; 0
    19c8:	0e 94 87 19 	call	0x330e	; 0x330e <LCD_moveCursor>
	LCD_displayString("same pass:");
    19cc:	80 e5       	ldi	r24, 0x50	; 80
    19ce:	91 e0       	ldi	r25, 0x01	; 1
    19d0:	0e 94 5e 19 	call	0x32bc	; 0x32bc <LCD_displayString>
	LCD_moveCursor(1, 10);
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	6a e0       	ldi	r22, 0x0A	; 10
    19d8:	0e 94 87 19 	call	0x330e	; 0x330e <LCD_moveCursor>
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
    19dc:	fe 01       	movw	r30, r28
    19de:	e9 5b       	subi	r30, 0xB9	; 185
    19e0:	ff 4f       	sbci	r31, 0xFF	; 255
    19e2:	10 82       	st	Z, r1
    19e4:	90 c0       	rjmp	.+288    	; 0x1b06 <enterPasswords+0x4de>
		*(passwordBuffer2 + i) = KEYPAD_getPressedKey();
    19e6:	fe 01       	movw	r30, r28
    19e8:	e9 5b       	subi	r30, 0xB9	; 185
    19ea:	ff 4f       	sbci	r31, 0xFF	; 255
    19ec:	80 81       	ld	r24, Z
    19ee:	28 2f       	mov	r18, r24
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	fe 01       	movw	r30, r28
    19f4:	e3 5b       	subi	r30, 0xB3	; 179
    19f6:	ff 4f       	sbci	r31, 0xFF	; 255
    19f8:	80 81       	ld	r24, Z
    19fa:	91 81       	ldd	r25, Z+1	; 0x01
    19fc:	8c 01       	movw	r16, r24
    19fe:	02 0f       	add	r16, r18
    1a00:	13 1f       	adc	r17, r19
    1a02:	0e 94 59 13 	call	0x26b2	; 0x26b2 <KEYPAD_getPressedKey>
    1a06:	f8 01       	movw	r30, r16
    1a08:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
    1a0a:	8a e2       	ldi	r24, 0x2A	; 42
    1a0c:	0e 94 6f 17 	call	0x2ede	; 0x2ede <LCD_displayCharacter>
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	a6 e9       	ldi	r26, 0x96	; 150
    1a16:	b3 e4       	ldi	r27, 0x43	; 67
    1a18:	89 8f       	std	Y+25, r24	; 0x19
    1a1a:	9a 8f       	std	Y+26, r25	; 0x1a
    1a1c:	ab 8f       	std	Y+27, r26	; 0x1b
    1a1e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a20:	69 8d       	ldd	r22, Y+25	; 0x19
    1a22:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	4a ef       	ldi	r20, 0xFA	; 250
    1a2e:	54 e4       	ldi	r21, 0x44	; 68
    1a30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	8d 8b       	std	Y+21, r24	; 0x15
    1a3a:	9e 8b       	std	Y+22, r25	; 0x16
    1a3c:	af 8b       	std	Y+23, r26	; 0x17
    1a3e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a40:	6d 89       	ldd	r22, Y+21	; 0x15
    1a42:	7e 89       	ldd	r23, Y+22	; 0x16
    1a44:	8f 89       	ldd	r24, Y+23	; 0x17
    1a46:	98 8d       	ldd	r25, Y+24	; 0x18
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	40 e8       	ldi	r20, 0x80	; 128
    1a4e:	5f e3       	ldi	r21, 0x3F	; 63
    1a50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a54:	88 23       	and	r24, r24
    1a56:	2c f4       	brge	.+10     	; 0x1a62 <enterPasswords+0x43a>
		__ticks = 1;
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	9c 8b       	std	Y+20, r25	; 0x14
    1a5e:	8b 8b       	std	Y+19, r24	; 0x13
    1a60:	3f c0       	rjmp	.+126    	; 0x1ae0 <enterPasswords+0x4b8>
	else if (__tmp > 65535)
    1a62:	6d 89       	ldd	r22, Y+21	; 0x15
    1a64:	7e 89       	ldd	r23, Y+22	; 0x16
    1a66:	8f 89       	ldd	r24, Y+23	; 0x17
    1a68:	98 8d       	ldd	r25, Y+24	; 0x18
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	3f ef       	ldi	r19, 0xFF	; 255
    1a6e:	4f e7       	ldi	r20, 0x7F	; 127
    1a70:	57 e4       	ldi	r21, 0x47	; 71
    1a72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a76:	18 16       	cp	r1, r24
    1a78:	4c f5       	brge	.+82     	; 0x1acc <enterPasswords+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a7a:	69 8d       	ldd	r22, Y+25	; 0x19
    1a7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	40 e2       	ldi	r20, 0x20	; 32
    1a88:	51 e4       	ldi	r21, 0x41	; 65
    1a8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	bc 01       	movw	r22, r24
    1a94:	cd 01       	movw	r24, r26
    1a96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	9c 8b       	std	Y+20, r25	; 0x14
    1aa0:	8b 8b       	std	Y+19, r24	; 0x13
    1aa2:	0f c0       	rjmp	.+30     	; 0x1ac2 <enterPasswords+0x49a>
    1aa4:	88 ec       	ldi	r24, 0xC8	; 200
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	9a 8b       	std	Y+18, r25	; 0x12
    1aaa:	89 8b       	std	Y+17, r24	; 0x11
    1aac:	89 89       	ldd	r24, Y+17	; 0x11
    1aae:	9a 89       	ldd	r25, Y+18	; 0x12
    1ab0:	01 97       	sbiw	r24, 0x01	; 1
    1ab2:	f1 f7       	brne	.-4      	; 0x1ab0 <enterPasswords+0x488>
    1ab4:	9a 8b       	std	Y+18, r25	; 0x12
    1ab6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab8:	8b 89       	ldd	r24, Y+19	; 0x13
    1aba:	9c 89       	ldd	r25, Y+20	; 0x14
    1abc:	01 97       	sbiw	r24, 0x01	; 1
    1abe:	9c 8b       	std	Y+20, r25	; 0x14
    1ac0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ac4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ac6:	00 97       	sbiw	r24, 0x00	; 0
    1ac8:	69 f7       	brne	.-38     	; 0x1aa4 <enterPasswords+0x47c>
    1aca:	14 c0       	rjmp	.+40     	; 0x1af4 <enterPasswords+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1acc:	6d 89       	ldd	r22, Y+21	; 0x15
    1ace:	7e 89       	ldd	r23, Y+22	; 0x16
    1ad0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ad2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ad4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad8:	dc 01       	movw	r26, r24
    1ada:	cb 01       	movw	r24, r22
    1adc:	9c 8b       	std	Y+20, r25	; 0x14
    1ade:	8b 8b       	std	Y+19, r24	; 0x13
    1ae0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ae2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ae4:	98 8b       	std	Y+16, r25	; 0x10
    1ae6:	8f 87       	std	Y+15, r24	; 0x0f
    1ae8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aea:	98 89       	ldd	r25, Y+16	; 0x10
    1aec:	01 97       	sbiw	r24, 0x01	; 1
    1aee:	f1 f7       	brne	.-4      	; 0x1aec <enterPasswords+0x4c4>
    1af0:	98 8b       	std	Y+16, r25	; 0x10
    1af2:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_clearScreen();
	LCD_displayString("Plz re-enter");
	LCD_moveCursor(1, 0);
	LCD_displayString("same pass:");
	LCD_moveCursor(1, 10);
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
    1af4:	de 01       	movw	r26, r28
    1af6:	a9 5b       	subi	r26, 0xB9	; 185
    1af8:	bf 4f       	sbci	r27, 0xFF	; 255
    1afa:	fe 01       	movw	r30, r28
    1afc:	e9 5b       	subi	r30, 0xB9	; 185
    1afe:	ff 4f       	sbci	r31, 0xFF	; 255
    1b00:	80 81       	ld	r24, Z
    1b02:	8f 5f       	subi	r24, 0xFF	; 255
    1b04:	8c 93       	st	X, r24
    1b06:	fe 01       	movw	r30, r28
    1b08:	e9 5b       	subi	r30, 0xB9	; 185
    1b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0c:	80 81       	ld	r24, Z
    1b0e:	85 30       	cpi	r24, 0x05	; 5
    1b10:	08 f4       	brcc	.+2      	; 0x1b14 <enterPasswords+0x4ec>
    1b12:	69 cf       	rjmp	.-302    	; 0x19e6 <enterPasswords+0x3be>
    1b14:	78 c0       	rjmp	.+240    	; 0x1c06 <enterPasswords+0x5de>
		_delay_ms(300);
	}

	// Wait for user to press Enter key again
	while (key2 != ENTER_BUTTON) {
		key2 = KEYPAD_getPressedKey();
    1b16:	0e 94 59 13 	call	0x26b2	; 0x26b2 <KEYPAD_getPressedKey>
    1b1a:	fe 01       	movw	r30, r28
    1b1c:	e7 5b       	subi	r30, 0xB7	; 183
    1b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b20:	80 83       	st	Z, r24
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	aa ef       	ldi	r26, 0xFA	; 250
    1b28:	b3 e4       	ldi	r27, 0x43	; 67
    1b2a:	8b 87       	std	Y+11, r24	; 0x0b
    1b2c:	9c 87       	std	Y+12, r25	; 0x0c
    1b2e:	ad 87       	std	Y+13, r26	; 0x0d
    1b30:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b32:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b34:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b36:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b38:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	4a ef       	ldi	r20, 0xFA	; 250
    1b40:	54 e4       	ldi	r21, 0x44	; 68
    1b42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	8f 83       	std	Y+7, r24	; 0x07
    1b4c:	98 87       	std	Y+8, r25	; 0x08
    1b4e:	a9 87       	std	Y+9, r26	; 0x09
    1b50:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b52:	6f 81       	ldd	r22, Y+7	; 0x07
    1b54:	78 85       	ldd	r23, Y+8	; 0x08
    1b56:	89 85       	ldd	r24, Y+9	; 0x09
    1b58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	40 e8       	ldi	r20, 0x80	; 128
    1b60:	5f e3       	ldi	r21, 0x3F	; 63
    1b62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b66:	88 23       	and	r24, r24
    1b68:	2c f4       	brge	.+10     	; 0x1b74 <enterPasswords+0x54c>
		__ticks = 1;
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	9e 83       	std	Y+6, r25	; 0x06
    1b70:	8d 83       	std	Y+5, r24	; 0x05
    1b72:	3f c0       	rjmp	.+126    	; 0x1bf2 <enterPasswords+0x5ca>
	else if (__tmp > 65535)
    1b74:	6f 81       	ldd	r22, Y+7	; 0x07
    1b76:	78 85       	ldd	r23, Y+8	; 0x08
    1b78:	89 85       	ldd	r24, Y+9	; 0x09
    1b7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	3f ef       	ldi	r19, 0xFF	; 255
    1b80:	4f e7       	ldi	r20, 0x7F	; 127
    1b82:	57 e4       	ldi	r21, 0x47	; 71
    1b84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b88:	18 16       	cp	r1, r24
    1b8a:	4c f5       	brge	.+82     	; 0x1bde <enterPasswords+0x5b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b90:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b92:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	40 e2       	ldi	r20, 0x20	; 32
    1b9a:	51 e4       	ldi	r21, 0x41	; 65
    1b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	bc 01       	movw	r22, r24
    1ba6:	cd 01       	movw	r24, r26
    1ba8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	9e 83       	std	Y+6, r25	; 0x06
    1bb2:	8d 83       	std	Y+5, r24	; 0x05
    1bb4:	0f c0       	rjmp	.+30     	; 0x1bd4 <enterPasswords+0x5ac>
    1bb6:	88 ec       	ldi	r24, 0xC8	; 200
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	9c 83       	std	Y+4, r25	; 0x04
    1bbc:	8b 83       	std	Y+3, r24	; 0x03
    1bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
    1bc4:	f1 f7       	brne	.-4      	; 0x1bc2 <enterPasswords+0x59a>
    1bc6:	9c 83       	std	Y+4, r25	; 0x04
    1bc8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bca:	8d 81       	ldd	r24, Y+5	; 0x05
    1bcc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bce:	01 97       	sbiw	r24, 0x01	; 1
    1bd0:	9e 83       	std	Y+6, r25	; 0x06
    1bd2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd8:	00 97       	sbiw	r24, 0x00	; 0
    1bda:	69 f7       	brne	.-38     	; 0x1bb6 <enterPasswords+0x58e>
    1bdc:	14 c0       	rjmp	.+40     	; 0x1c06 <enterPasswords+0x5de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bde:	6f 81       	ldd	r22, Y+7	; 0x07
    1be0:	78 85       	ldd	r23, Y+8	; 0x08
    1be2:	89 85       	ldd	r24, Y+9	; 0x09
    1be4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	9e 83       	std	Y+6, r25	; 0x06
    1bf0:	8d 83       	std	Y+5, r24	; 0x05
    1bf2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf6:	9a 83       	std	Y+2, r25	; 0x02
    1bf8:	89 83       	std	Y+1, r24	; 0x01
    1bfa:	89 81       	ldd	r24, Y+1	; 0x01
    1bfc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bfe:	01 97       	sbiw	r24, 0x01	; 1
    1c00:	f1 f7       	brne	.-4      	; 0x1bfe <enterPasswords+0x5d6>
    1c02:	9a 83       	std	Y+2, r25	; 0x02
    1c04:	89 83       	std	Y+1, r24	; 0x01
		LCD_displayCharacter('*');
		_delay_ms(300);
	}

	// Wait for user to press Enter key again
	while (key2 != ENTER_BUTTON) {
    1c06:	fe 01       	movw	r30, r28
    1c08:	e7 5b       	subi	r30, 0xB7	; 183
    1c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0c:	80 81       	ld	r24, Z
    1c0e:	8d 30       	cpi	r24, 0x0D	; 13
    1c10:	09 f0       	breq	.+2      	; 0x1c14 <enterPasswords+0x5ec>
    1c12:	81 cf       	rjmp	.-254    	; 0x1b16 <enterPasswords+0x4ee>
		key2 = KEYPAD_getPressedKey();
		_delay_ms(500);
	}
}
    1c14:	c2 5b       	subi	r28, 0xB2	; 178
    1c16:	df 4f       	sbci	r29, 0xFF	; 255
    1c18:	0f b6       	in	r0, 0x3f	; 63
    1c1a:	f8 94       	cli
    1c1c:	de bf       	out	0x3e, r29	; 62
    1c1e:	0f be       	out	0x3f, r0	; 63
    1c20:	cd bf       	out	0x3d, r28	; 61
    1c22:	cf 91       	pop	r28
    1c24:	df 91       	pop	r29
    1c26:	1f 91       	pop	r17
    1c28:	0f 91       	pop	r16
    1c2a:	08 95       	ret

00001c2c <enterPassword>:

// Function to prompt the user to enter a password for operation (unlock door or change password)
void enterPassword(uint8 *passwordBuffer, const char *prompt) {
    1c2c:	0f 93       	push	r16
    1c2e:	1f 93       	push	r17
    1c30:	df 93       	push	r29
    1c32:	cf 93       	push	r28
    1c34:	cd b7       	in	r28, 0x3d	; 61
    1c36:	de b7       	in	r29, 0x3e	; 62
    1c38:	a2 97       	sbiw	r28, 0x22	; 34
    1c3a:	0f b6       	in	r0, 0x3f	; 63
    1c3c:	f8 94       	cli
    1c3e:	de bf       	out	0x3e, r29	; 62
    1c40:	0f be       	out	0x3f, r0	; 63
    1c42:	cd bf       	out	0x3d, r28	; 61
    1c44:	98 a3       	std	Y+32, r25	; 0x20
    1c46:	8f 8f       	std	Y+31, r24	; 0x1f
    1c48:	7a a3       	std	Y+34, r23	; 0x22
    1c4a:	69 a3       	std	Y+33, r22	; 0x21
	uint8 key;
	LCD_clearScreen();
    1c4c:	0e 94 05 1a 	call	0x340a	; 0x340a <LCD_clearScreen>
	LCD_displayString(prompt);  // Display the prompt for user input
    1c50:	89 a1       	ldd	r24, Y+33	; 0x21
    1c52:	9a a1       	ldd	r25, Y+34	; 0x22
    1c54:	0e 94 5e 19 	call	0x32bc	; 0x32bc <LCD_displayString>
	LCD_moveCursor(1, 0);
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	60 e0       	ldi	r22, 0x00	; 0
    1c5c:	0e 94 87 19 	call	0x330e	; 0x330e <LCD_moveCursor>

	// User enters the password
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
    1c60:	1d 8e       	std	Y+29, r1	; 0x1d
    1c62:	84 c0       	rjmp	.+264    	; 0x1d6c <enterPassword+0x140>
		*(passwordBuffer + i) = KEYPAD_getPressedKey();
    1c64:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c66:	28 2f       	mov	r18, r24
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c6c:	98 a1       	ldd	r25, Y+32	; 0x20
    1c6e:	8c 01       	movw	r16, r24
    1c70:	02 0f       	add	r16, r18
    1c72:	13 1f       	adc	r17, r19
    1c74:	0e 94 59 13 	call	0x26b2	; 0x26b2 <KEYPAD_getPressedKey>
    1c78:	f8 01       	movw	r30, r16
    1c7a:	80 83       	st	Z, r24
		LCD_displayCharacter('*');  // Display '*' for each entered character
    1c7c:	8a e2       	ldi	r24, 0x2A	; 42
    1c7e:	0e 94 6f 17 	call	0x2ede	; 0x2ede <LCD_displayCharacter>
    1c82:	80 e0       	ldi	r24, 0x00	; 0
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	a6 e9       	ldi	r26, 0x96	; 150
    1c88:	b3 e4       	ldi	r27, 0x43	; 67
    1c8a:	89 8f       	std	Y+25, r24	; 0x19
    1c8c:	9a 8f       	std	Y+26, r25	; 0x1a
    1c8e:	ab 8f       	std	Y+27, r26	; 0x1b
    1c90:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c92:	69 8d       	ldd	r22, Y+25	; 0x19
    1c94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	4a ef       	ldi	r20, 0xFA	; 250
    1ca0:	54 e4       	ldi	r21, 0x44	; 68
    1ca2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	8d 8b       	std	Y+21, r24	; 0x15
    1cac:	9e 8b       	std	Y+22, r25	; 0x16
    1cae:	af 8b       	std	Y+23, r26	; 0x17
    1cb0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cb2:	6d 89       	ldd	r22, Y+21	; 0x15
    1cb4:	7e 89       	ldd	r23, Y+22	; 0x16
    1cb6:	8f 89       	ldd	r24, Y+23	; 0x17
    1cb8:	98 8d       	ldd	r25, Y+24	; 0x18
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	40 e8       	ldi	r20, 0x80	; 128
    1cc0:	5f e3       	ldi	r21, 0x3F	; 63
    1cc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cc6:	88 23       	and	r24, r24
    1cc8:	2c f4       	brge	.+10     	; 0x1cd4 <enterPassword+0xa8>
		__ticks = 1;
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	9c 8b       	std	Y+20, r25	; 0x14
    1cd0:	8b 8b       	std	Y+19, r24	; 0x13
    1cd2:	3f c0       	rjmp	.+126    	; 0x1d52 <enterPassword+0x126>
	else if (__tmp > 65535)
    1cd4:	6d 89       	ldd	r22, Y+21	; 0x15
    1cd6:	7e 89       	ldd	r23, Y+22	; 0x16
    1cd8:	8f 89       	ldd	r24, Y+23	; 0x17
    1cda:	98 8d       	ldd	r25, Y+24	; 0x18
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	3f ef       	ldi	r19, 0xFF	; 255
    1ce0:	4f e7       	ldi	r20, 0x7F	; 127
    1ce2:	57 e4       	ldi	r21, 0x47	; 71
    1ce4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ce8:	18 16       	cp	r1, r24
    1cea:	4c f5       	brge	.+82     	; 0x1d3e <enterPassword+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cec:	69 8d       	ldd	r22, Y+25	; 0x19
    1cee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cf0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cf2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	40 e2       	ldi	r20, 0x20	; 32
    1cfa:	51 e4       	ldi	r21, 0x41	; 65
    1cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	bc 01       	movw	r22, r24
    1d06:	cd 01       	movw	r24, r26
    1d08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	9c 8b       	std	Y+20, r25	; 0x14
    1d12:	8b 8b       	std	Y+19, r24	; 0x13
    1d14:	0f c0       	rjmp	.+30     	; 0x1d34 <enterPassword+0x108>
    1d16:	88 ec       	ldi	r24, 0xC8	; 200
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	9a 8b       	std	Y+18, r25	; 0x12
    1d1c:	89 8b       	std	Y+17, r24	; 0x11
    1d1e:	89 89       	ldd	r24, Y+17	; 0x11
    1d20:	9a 89       	ldd	r25, Y+18	; 0x12
    1d22:	01 97       	sbiw	r24, 0x01	; 1
    1d24:	f1 f7       	brne	.-4      	; 0x1d22 <enterPassword+0xf6>
    1d26:	9a 8b       	std	Y+18, r25	; 0x12
    1d28:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d2a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d2c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	9c 8b       	std	Y+20, r25	; 0x14
    1d32:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d34:	8b 89       	ldd	r24, Y+19	; 0x13
    1d36:	9c 89       	ldd	r25, Y+20	; 0x14
    1d38:	00 97       	sbiw	r24, 0x00	; 0
    1d3a:	69 f7       	brne	.-38     	; 0x1d16 <enterPassword+0xea>
    1d3c:	14 c0       	rjmp	.+40     	; 0x1d66 <enterPassword+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d3e:	6d 89       	ldd	r22, Y+21	; 0x15
    1d40:	7e 89       	ldd	r23, Y+22	; 0x16
    1d42:	8f 89       	ldd	r24, Y+23	; 0x17
    1d44:	98 8d       	ldd	r25, Y+24	; 0x18
    1d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	9c 8b       	std	Y+20, r25	; 0x14
    1d50:	8b 8b       	std	Y+19, r24	; 0x13
    1d52:	8b 89       	ldd	r24, Y+19	; 0x13
    1d54:	9c 89       	ldd	r25, Y+20	; 0x14
    1d56:	98 8b       	std	Y+16, r25	; 0x10
    1d58:	8f 87       	std	Y+15, r24	; 0x0f
    1d5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d5c:	98 89       	ldd	r25, Y+16	; 0x10
    1d5e:	01 97       	sbiw	r24, 0x01	; 1
    1d60:	f1 f7       	brne	.-4      	; 0x1d5e <enterPassword+0x132>
    1d62:	98 8b       	std	Y+16, r25	; 0x10
    1d64:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_clearScreen();
	LCD_displayString(prompt);  // Display the prompt for user input
	LCD_moveCursor(1, 0);

	// User enters the password
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
    1d66:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d68:	8f 5f       	subi	r24, 0xFF	; 255
    1d6a:	8d 8f       	std	Y+29, r24	; 0x1d
    1d6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d6e:	85 30       	cpi	r24, 0x05	; 5
    1d70:	08 f4       	brcc	.+2      	; 0x1d74 <enterPassword+0x148>
    1d72:	78 cf       	rjmp	.-272    	; 0x1c64 <enterPassword+0x38>
    1d74:	75 c0       	rjmp	.+234    	; 0x1e60 <enterPassword+0x234>
		_delay_ms(300);  // Delay for key debounce
	}

	// Wait for user to press Enter key to finish entering password
	while (key != ENTER_BUTTON) {
		key = KEYPAD_getPressedKey();
    1d76:	0e 94 59 13 	call	0x26b2	; 0x26b2 <KEYPAD_getPressedKey>
    1d7a:	8e 8f       	std	Y+30, r24	; 0x1e
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	aa ef       	ldi	r26, 0xFA	; 250
    1d82:	b3 e4       	ldi	r27, 0x43	; 67
    1d84:	8b 87       	std	Y+11, r24	; 0x0b
    1d86:	9c 87       	std	Y+12, r25	; 0x0c
    1d88:	ad 87       	std	Y+13, r26	; 0x0d
    1d8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d90:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d92:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	4a ef       	ldi	r20, 0xFA	; 250
    1d9a:	54 e4       	ldi	r21, 0x44	; 68
    1d9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	8f 83       	std	Y+7, r24	; 0x07
    1da6:	98 87       	std	Y+8, r25	; 0x08
    1da8:	a9 87       	std	Y+9, r26	; 0x09
    1daa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dac:	6f 81       	ldd	r22, Y+7	; 0x07
    1dae:	78 85       	ldd	r23, Y+8	; 0x08
    1db0:	89 85       	ldd	r24, Y+9	; 0x09
    1db2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	40 e8       	ldi	r20, 0x80	; 128
    1dba:	5f e3       	ldi	r21, 0x3F	; 63
    1dbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dc0:	88 23       	and	r24, r24
    1dc2:	2c f4       	brge	.+10     	; 0x1dce <enterPassword+0x1a2>
		__ticks = 1;
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	9e 83       	std	Y+6, r25	; 0x06
    1dca:	8d 83       	std	Y+5, r24	; 0x05
    1dcc:	3f c0       	rjmp	.+126    	; 0x1e4c <enterPassword+0x220>
	else if (__tmp > 65535)
    1dce:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd0:	78 85       	ldd	r23, Y+8	; 0x08
    1dd2:	89 85       	ldd	r24, Y+9	; 0x09
    1dd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	3f ef       	ldi	r19, 0xFF	; 255
    1dda:	4f e7       	ldi	r20, 0x7F	; 127
    1ddc:	57 e4       	ldi	r21, 0x47	; 71
    1dde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1de2:	18 16       	cp	r1, r24
    1de4:	4c f5       	brge	.+82     	; 0x1e38 <enterPassword+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1de8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dec:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	40 e2       	ldi	r20, 0x20	; 32
    1df4:	51 e4       	ldi	r21, 0x41	; 65
    1df6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	bc 01       	movw	r22, r24
    1e00:	cd 01       	movw	r24, r26
    1e02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e06:	dc 01       	movw	r26, r24
    1e08:	cb 01       	movw	r24, r22
    1e0a:	9e 83       	std	Y+6, r25	; 0x06
    1e0c:	8d 83       	std	Y+5, r24	; 0x05
    1e0e:	0f c0       	rjmp	.+30     	; 0x1e2e <enterPassword+0x202>
    1e10:	88 ec       	ldi	r24, 0xC8	; 200
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	9c 83       	std	Y+4, r25	; 0x04
    1e16:	8b 83       	std	Y+3, r24	; 0x03
    1e18:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1c:	01 97       	sbiw	r24, 0x01	; 1
    1e1e:	f1 f7       	brne	.-4      	; 0x1e1c <enterPassword+0x1f0>
    1e20:	9c 83       	std	Y+4, r25	; 0x04
    1e22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e24:	8d 81       	ldd	r24, Y+5	; 0x05
    1e26:	9e 81       	ldd	r25, Y+6	; 0x06
    1e28:	01 97       	sbiw	r24, 0x01	; 1
    1e2a:	9e 83       	std	Y+6, r25	; 0x06
    1e2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e30:	9e 81       	ldd	r25, Y+6	; 0x06
    1e32:	00 97       	sbiw	r24, 0x00	; 0
    1e34:	69 f7       	brne	.-38     	; 0x1e10 <enterPassword+0x1e4>
    1e36:	14 c0       	rjmp	.+40     	; 0x1e60 <enterPassword+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e38:	6f 81       	ldd	r22, Y+7	; 0x07
    1e3a:	78 85       	ldd	r23, Y+8	; 0x08
    1e3c:	89 85       	ldd	r24, Y+9	; 0x09
    1e3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	9e 83       	std	Y+6, r25	; 0x06
    1e4a:	8d 83       	std	Y+5, r24	; 0x05
    1e4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e50:	9a 83       	std	Y+2, r25	; 0x02
    1e52:	89 83       	std	Y+1, r24	; 0x01
    1e54:	89 81       	ldd	r24, Y+1	; 0x01
    1e56:	9a 81       	ldd	r25, Y+2	; 0x02
    1e58:	01 97       	sbiw	r24, 0x01	; 1
    1e5a:	f1 f7       	brne	.-4      	; 0x1e58 <enterPassword+0x22c>
    1e5c:	9a 83       	std	Y+2, r25	; 0x02
    1e5e:	89 83       	std	Y+1, r24	; 0x01
		LCD_displayCharacter('*');  // Display '*' for each entered character
		_delay_ms(300);  // Delay for key debounce
	}

	// Wait for user to press Enter key to finish entering password
	while (key != ENTER_BUTTON) {
    1e60:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e62:	8d 30       	cpi	r24, 0x0D	; 13
    1e64:	09 f0       	breq	.+2      	; 0x1e68 <enterPassword+0x23c>
    1e66:	87 cf       	rjmp	.-242    	; 0x1d76 <enterPassword+0x14a>
		key = KEYPAD_getPressedKey();
		_delay_ms(500);
	}
}
    1e68:	a2 96       	adiw	r28, 0x22	; 34
    1e6a:	0f b6       	in	r0, 0x3f	; 63
    1e6c:	f8 94       	cli
    1e6e:	de bf       	out	0x3e, r29	; 62
    1e70:	0f be       	out	0x3f, r0	; 63
    1e72:	cd bf       	out	0x3d, r28	; 61
    1e74:	cf 91       	pop	r28
    1e76:	df 91       	pop	r29
    1e78:	1f 91       	pop	r17
    1e7a:	0f 91       	pop	r16
    1e7c:	08 95       	ret

00001e7e <sendPasswordToControlECU>:

// Function to send the entered password to the Control_ECU for verification
void sendPasswordToControlECU(uint8 password[]) {
    1e7e:	df 93       	push	r29
    1e80:	cf 93       	push	r28
    1e82:	00 d0       	rcall	.+0      	; 0x1e84 <sendPasswordToControlECU+0x6>
    1e84:	0f 92       	push	r0
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62
    1e8a:	9b 83       	std	Y+3, r25	; 0x03
    1e8c:	8a 83       	std	Y+2, r24	; 0x02
	UART_sendByte(START_COMMUNICATION);  // Send start communication signal
    1e8e:	85 e1       	ldi	r24, 0x15	; 21
    1e90:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <UART_sendByte>
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
    1e94:	19 82       	std	Y+1, r1	; 0x01
    1e96:	0e c0       	rjmp	.+28     	; 0x1eb4 <sendPasswordToControlECU+0x36>
		UART_sendByte(password[i]);  // Send each password character
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
    1e9a:	28 2f       	mov	r18, r24
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ea2:	fc 01       	movw	r30, r24
    1ea4:	e2 0f       	add	r30, r18
    1ea6:	f3 1f       	adc	r31, r19
    1ea8:	80 81       	ld	r24, Z
    1eaa:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <UART_sendByte>
}

// Function to send the entered password to the Control_ECU for verification
void sendPasswordToControlECU(uint8 password[]) {
	UART_sendByte(START_COMMUNICATION);  // Send start communication signal
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
    1eae:	89 81       	ldd	r24, Y+1	; 0x01
    1eb0:	8f 5f       	subi	r24, 0xFF	; 255
    1eb2:	89 83       	std	Y+1, r24	; 0x01
    1eb4:	89 81       	ldd	r24, Y+1	; 0x01
    1eb6:	85 30       	cpi	r24, 0x05	; 5
    1eb8:	78 f3       	brcs	.-34     	; 0x1e98 <sendPasswordToControlECU+0x1a>
		UART_sendByte(password[i]);  // Send each password character
	}
}
    1eba:	0f 90       	pop	r0
    1ebc:	0f 90       	pop	r0
    1ebe:	0f 90       	pop	r0
    1ec0:	cf 91       	pop	r28
    1ec2:	df 91       	pop	r29
    1ec4:	08 95       	ret

00001ec6 <displayWaitMessage>:

// Function to display a message while waiting for door lock operation to complete
void displayWaitMessage() {
    1ec6:	df 93       	push	r29
    1ec8:	cf 93       	push	r28
    1eca:	cd b7       	in	r28, 0x3d	; 61
    1ecc:	de b7       	in	r29, 0x3e	; 62
    1ece:	2f 97       	sbiw	r28, 0x0f	; 15
    1ed0:	0f b6       	in	r0, 0x3f	; 63
    1ed2:	f8 94       	cli
    1ed4:	de bf       	out	0x3e, r29	; 62
    1ed6:	0f be       	out	0x3f, r0	; 63
    1ed8:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    1eda:	0e 94 05 1a 	call	0x340a	; 0x340a <LCD_clearScreen>
	LCD_displayString("Wait for people");
    1ede:	8b e5       	ldi	r24, 0x5B	; 91
    1ee0:	91 e0       	ldi	r25, 0x01	; 1
    1ee2:	0e 94 5e 19 	call	0x32bc	; 0x32bc <LCD_displayString>
	LCD_displayStringRowColumn(1, 0, "to enter");
    1ee6:	2b e6       	ldi	r18, 0x6B	; 107
    1ee8:	31 e0       	ldi	r19, 0x01	; 1
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	60 e0       	ldi	r22, 0x00	; 0
    1eee:	a9 01       	movw	r20, r18
    1ef0:	0e 94 c9 19 	call	0x3392	; 0x3392 <LCD_displayStringRowColumn>
    1ef4:	80 e0       	ldi	r24, 0x00	; 0
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	aa e7       	ldi	r26, 0x7A	; 122
    1efa:	b4 e4       	ldi	r27, 0x44	; 68
    1efc:	8b 87       	std	Y+11, r24	; 0x0b
    1efe:	9c 87       	std	Y+12, r25	; 0x0c
    1f00:	ad 87       	std	Y+13, r26	; 0x0d
    1f02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f04:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f06:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f08:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	4a ef       	ldi	r20, 0xFA	; 250
    1f12:	54 e4       	ldi	r21, 0x44	; 68
    1f14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	8f 83       	std	Y+7, r24	; 0x07
    1f1e:	98 87       	std	Y+8, r25	; 0x08
    1f20:	a9 87       	std	Y+9, r26	; 0x09
    1f22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f24:	6f 81       	ldd	r22, Y+7	; 0x07
    1f26:	78 85       	ldd	r23, Y+8	; 0x08
    1f28:	89 85       	ldd	r24, Y+9	; 0x09
    1f2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	40 e8       	ldi	r20, 0x80	; 128
    1f32:	5f e3       	ldi	r21, 0x3F	; 63
    1f34:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f38:	88 23       	and	r24, r24
    1f3a:	2c f4       	brge	.+10     	; 0x1f46 <displayWaitMessage+0x80>
		__ticks = 1;
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	9e 83       	std	Y+6, r25	; 0x06
    1f42:	8d 83       	std	Y+5, r24	; 0x05
    1f44:	3f c0       	rjmp	.+126    	; 0x1fc4 <displayWaitMessage+0xfe>
	else if (__tmp > 65535)
    1f46:	6f 81       	ldd	r22, Y+7	; 0x07
    1f48:	78 85       	ldd	r23, Y+8	; 0x08
    1f4a:	89 85       	ldd	r24, Y+9	; 0x09
    1f4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f4e:	20 e0       	ldi	r18, 0x00	; 0
    1f50:	3f ef       	ldi	r19, 0xFF	; 255
    1f52:	4f e7       	ldi	r20, 0x7F	; 127
    1f54:	57 e4       	ldi	r21, 0x47	; 71
    1f56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f5a:	18 16       	cp	r1, r24
    1f5c:	4c f5       	brge	.+82     	; 0x1fb0 <displayWaitMessage+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f60:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f62:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f64:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	40 e2       	ldi	r20, 0x20	; 32
    1f6c:	51 e4       	ldi	r21, 0x41	; 65
    1f6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f72:	dc 01       	movw	r26, r24
    1f74:	cb 01       	movw	r24, r22
    1f76:	bc 01       	movw	r22, r24
    1f78:	cd 01       	movw	r24, r26
    1f7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f7e:	dc 01       	movw	r26, r24
    1f80:	cb 01       	movw	r24, r22
    1f82:	9e 83       	std	Y+6, r25	; 0x06
    1f84:	8d 83       	std	Y+5, r24	; 0x05
    1f86:	0f c0       	rjmp	.+30     	; 0x1fa6 <displayWaitMessage+0xe0>
    1f88:	88 ec       	ldi	r24, 0xC8	; 200
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	9c 83       	std	Y+4, r25	; 0x04
    1f8e:	8b 83       	std	Y+3, r24	; 0x03
    1f90:	8b 81       	ldd	r24, Y+3	; 0x03
    1f92:	9c 81       	ldd	r25, Y+4	; 0x04
    1f94:	01 97       	sbiw	r24, 0x01	; 1
    1f96:	f1 f7       	brne	.-4      	; 0x1f94 <displayWaitMessage+0xce>
    1f98:	9c 83       	std	Y+4, r25	; 0x04
    1f9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa0:	01 97       	sbiw	r24, 0x01	; 1
    1fa2:	9e 83       	std	Y+6, r25	; 0x06
    1fa4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa8:	9e 81       	ldd	r25, Y+6	; 0x06
    1faa:	00 97       	sbiw	r24, 0x00	; 0
    1fac:	69 f7       	brne	.-38     	; 0x1f88 <displayWaitMessage+0xc2>
    1fae:	14 c0       	rjmp	.+40     	; 0x1fd8 <displayWaitMessage+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb0:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb2:	78 85       	ldd	r23, Y+8	; 0x08
    1fb4:	89 85       	ldd	r24, Y+9	; 0x09
    1fb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	cb 01       	movw	r24, r22
    1fc0:	9e 83       	std	Y+6, r25	; 0x06
    1fc2:	8d 83       	std	Y+5, r24	; 0x05
    1fc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc8:	9a 83       	std	Y+2, r25	; 0x02
    1fca:	89 83       	std	Y+1, r24	; 0x01
    1fcc:	89 81       	ldd	r24, Y+1	; 0x01
    1fce:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd0:	01 97       	sbiw	r24, 0x01	; 1
    1fd2:	f1 f7       	brne	.-4      	; 0x1fd0 <displayWaitMessage+0x10a>
    1fd4:	9a 83       	std	Y+2, r25	; 0x02
    1fd6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	while (1) {
		uint8 pirStatus = UART_recieveByte();  // Check PIR sensor status from Control_ECU
    1fd8:	0e 94 75 1d 	call	0x3aea	; 0x3aea <UART_recieveByte>
    1fdc:	8f 87       	std	Y+15, r24	; 0x0f
		if (pirStatus == 0) {
    1fde:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fe0:	88 23       	and	r24, r24
    1fe2:	d1 f7       	brne	.-12     	; 0x1fd8 <displayWaitMessage+0x112>
			LCD_clearScreen();
    1fe4:	0e 94 05 1a 	call	0x340a	; 0x340a <LCD_clearScreen>
			LCD_displayString("Door is");
    1fe8:	80 ef       	ldi	r24, 0xF0	; 240
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	0e 94 5e 19 	call	0x32bc	; 0x32bc <LCD_displayString>
			LCD_displayStringRowColumn(1, 0, "locking...");
    1ff0:	24 e7       	ldi	r18, 0x74	; 116
    1ff2:	31 e0       	ldi	r19, 0x01	; 1
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	60 e0       	ldi	r22, 0x00	; 0
    1ff8:	a9 01       	movw	r20, r18
    1ffa:	0e 94 c9 19 	call	0x3392	; 0x3392 <LCD_displayStringRowColumn>
			setupTimer1();
    1ffe:	0e 94 b3 05 	call	0xb66	; 0xb66 <setupTimer1>
			g_tick = 0;
    2002:	10 92 99 01 	sts	0x0199, r1
    2006:	10 92 98 01 	sts	0x0198, r1
			while (g_tick < 15);  // Wait for 15 seconds for motor operation
    200a:	80 91 98 01 	lds	r24, 0x0198
    200e:	90 91 99 01 	lds	r25, 0x0199
    2012:	8f 30       	cpi	r24, 0x0F	; 15
    2014:	91 05       	cpc	r25, r1
    2016:	c8 f3       	brcs	.-14     	; 0x200a <displayWaitMessage+0x144>
			g_tick = 0;
    2018:	10 92 99 01 	sts	0x0199, r1
    201c:	10 92 98 01 	sts	0x0198, r1
			Timer1Stop();
    2020:	0e 94 ef 05 	call	0xbde	; 0xbde <Timer1Stop>
			break;
		}
	}
    2024:	2f 96       	adiw	r28, 0x0f	; 15
    2026:	0f b6       	in	r0, 0x3f	; 63
    2028:	f8 94       	cli
    202a:	de bf       	out	0x3e, r29	; 62
    202c:	0f be       	out	0x3f, r0	; 63
    202e:	cd bf       	out	0x3d, r28	; 61
    2030:	cf 91       	pop	r28
    2032:	df 91       	pop	r29
    2034:	08 95       	ret

00002036 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    2036:	df 93       	push	r29
    2038:	cf 93       	push	r28
    203a:	00 d0       	rcall	.+0      	; 0x203c <GPIO_setupPinDirection+0x6>
    203c:	00 d0       	rcall	.+0      	; 0x203e <GPIO_setupPinDirection+0x8>
    203e:	0f 92       	push	r0
    2040:	cd b7       	in	r28, 0x3d	; 61
    2042:	de b7       	in	r29, 0x3e	; 62
    2044:	89 83       	std	Y+1, r24	; 0x01
    2046:	6a 83       	std	Y+2, r22	; 0x02
    2048:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    204a:	8a 81       	ldd	r24, Y+2	; 0x02
    204c:	88 30       	cpi	r24, 0x08	; 8
    204e:	08 f0       	brcs	.+2      	; 0x2052 <GPIO_setupPinDirection+0x1c>
    2050:	d5 c0       	rjmp	.+426    	; 0x21fc <GPIO_setupPinDirection+0x1c6>
    2052:	89 81       	ldd	r24, Y+1	; 0x01
    2054:	84 30       	cpi	r24, 0x04	; 4
    2056:	08 f0       	brcs	.+2      	; 0x205a <GPIO_setupPinDirection+0x24>
    2058:	d1 c0       	rjmp	.+418    	; 0x21fc <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    205a:	89 81       	ldd	r24, Y+1	; 0x01
    205c:	28 2f       	mov	r18, r24
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	3d 83       	std	Y+5, r19	; 0x05
    2062:	2c 83       	std	Y+4, r18	; 0x04
    2064:	8c 81       	ldd	r24, Y+4	; 0x04
    2066:	9d 81       	ldd	r25, Y+5	; 0x05
    2068:	81 30       	cpi	r24, 0x01	; 1
    206a:	91 05       	cpc	r25, r1
    206c:	09 f4       	brne	.+2      	; 0x2070 <GPIO_setupPinDirection+0x3a>
    206e:	43 c0       	rjmp	.+134    	; 0x20f6 <GPIO_setupPinDirection+0xc0>
    2070:	2c 81       	ldd	r18, Y+4	; 0x04
    2072:	3d 81       	ldd	r19, Y+5	; 0x05
    2074:	22 30       	cpi	r18, 0x02	; 2
    2076:	31 05       	cpc	r19, r1
    2078:	2c f4       	brge	.+10     	; 0x2084 <GPIO_setupPinDirection+0x4e>
    207a:	8c 81       	ldd	r24, Y+4	; 0x04
    207c:	9d 81       	ldd	r25, Y+5	; 0x05
    207e:	00 97       	sbiw	r24, 0x00	; 0
    2080:	71 f0       	breq	.+28     	; 0x209e <GPIO_setupPinDirection+0x68>
    2082:	bc c0       	rjmp	.+376    	; 0x21fc <GPIO_setupPinDirection+0x1c6>
    2084:	2c 81       	ldd	r18, Y+4	; 0x04
    2086:	3d 81       	ldd	r19, Y+5	; 0x05
    2088:	22 30       	cpi	r18, 0x02	; 2
    208a:	31 05       	cpc	r19, r1
    208c:	09 f4       	brne	.+2      	; 0x2090 <GPIO_setupPinDirection+0x5a>
    208e:	5f c0       	rjmp	.+190    	; 0x214e <GPIO_setupPinDirection+0x118>
    2090:	8c 81       	ldd	r24, Y+4	; 0x04
    2092:	9d 81       	ldd	r25, Y+5	; 0x05
    2094:	83 30       	cpi	r24, 0x03	; 3
    2096:	91 05       	cpc	r25, r1
    2098:	09 f4       	brne	.+2      	; 0x209c <GPIO_setupPinDirection+0x66>
    209a:	85 c0       	rjmp	.+266    	; 0x21a6 <GPIO_setupPinDirection+0x170>
    209c:	af c0       	rjmp	.+350    	; 0x21fc <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    209e:	8b 81       	ldd	r24, Y+3	; 0x03
    20a0:	81 30       	cpi	r24, 0x01	; 1
    20a2:	a1 f4       	brne	.+40     	; 0x20cc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    20a4:	aa e3       	ldi	r26, 0x3A	; 58
    20a6:	b0 e0       	ldi	r27, 0x00	; 0
    20a8:	ea e3       	ldi	r30, 0x3A	; 58
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	80 81       	ld	r24, Z
    20ae:	48 2f       	mov	r20, r24
    20b0:	8a 81       	ldd	r24, Y+2	; 0x02
    20b2:	28 2f       	mov	r18, r24
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	02 2e       	mov	r0, r18
    20bc:	02 c0       	rjmp	.+4      	; 0x20c2 <GPIO_setupPinDirection+0x8c>
    20be:	88 0f       	add	r24, r24
    20c0:	99 1f       	adc	r25, r25
    20c2:	0a 94       	dec	r0
    20c4:	e2 f7       	brpl	.-8      	; 0x20be <GPIO_setupPinDirection+0x88>
    20c6:	84 2b       	or	r24, r20
    20c8:	8c 93       	st	X, r24
    20ca:	98 c0       	rjmp	.+304    	; 0x21fc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    20cc:	aa e3       	ldi	r26, 0x3A	; 58
    20ce:	b0 e0       	ldi	r27, 0x00	; 0
    20d0:	ea e3       	ldi	r30, 0x3A	; 58
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	80 81       	ld	r24, Z
    20d6:	48 2f       	mov	r20, r24
    20d8:	8a 81       	ldd	r24, Y+2	; 0x02
    20da:	28 2f       	mov	r18, r24
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	81 e0       	ldi	r24, 0x01	; 1
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	02 2e       	mov	r0, r18
    20e4:	02 c0       	rjmp	.+4      	; 0x20ea <GPIO_setupPinDirection+0xb4>
    20e6:	88 0f       	add	r24, r24
    20e8:	99 1f       	adc	r25, r25
    20ea:	0a 94       	dec	r0
    20ec:	e2 f7       	brpl	.-8      	; 0x20e6 <GPIO_setupPinDirection+0xb0>
    20ee:	80 95       	com	r24
    20f0:	84 23       	and	r24, r20
    20f2:	8c 93       	st	X, r24
    20f4:	83 c0       	rjmp	.+262    	; 0x21fc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    20f6:	8b 81       	ldd	r24, Y+3	; 0x03
    20f8:	81 30       	cpi	r24, 0x01	; 1
    20fa:	a1 f4       	brne	.+40     	; 0x2124 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    20fc:	a7 e3       	ldi	r26, 0x37	; 55
    20fe:	b0 e0       	ldi	r27, 0x00	; 0
    2100:	e7 e3       	ldi	r30, 0x37	; 55
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	80 81       	ld	r24, Z
    2106:	48 2f       	mov	r20, r24
    2108:	8a 81       	ldd	r24, Y+2	; 0x02
    210a:	28 2f       	mov	r18, r24
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	02 2e       	mov	r0, r18
    2114:	02 c0       	rjmp	.+4      	; 0x211a <GPIO_setupPinDirection+0xe4>
    2116:	88 0f       	add	r24, r24
    2118:	99 1f       	adc	r25, r25
    211a:	0a 94       	dec	r0
    211c:	e2 f7       	brpl	.-8      	; 0x2116 <GPIO_setupPinDirection+0xe0>
    211e:	84 2b       	or	r24, r20
    2120:	8c 93       	st	X, r24
    2122:	6c c0       	rjmp	.+216    	; 0x21fc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    2124:	a7 e3       	ldi	r26, 0x37	; 55
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	e7 e3       	ldi	r30, 0x37	; 55
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	80 81       	ld	r24, Z
    212e:	48 2f       	mov	r20, r24
    2130:	8a 81       	ldd	r24, Y+2	; 0x02
    2132:	28 2f       	mov	r18, r24
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	02 2e       	mov	r0, r18
    213c:	02 c0       	rjmp	.+4      	; 0x2142 <GPIO_setupPinDirection+0x10c>
    213e:	88 0f       	add	r24, r24
    2140:	99 1f       	adc	r25, r25
    2142:	0a 94       	dec	r0
    2144:	e2 f7       	brpl	.-8      	; 0x213e <GPIO_setupPinDirection+0x108>
    2146:	80 95       	com	r24
    2148:	84 23       	and	r24, r20
    214a:	8c 93       	st	X, r24
    214c:	57 c0       	rjmp	.+174    	; 0x21fc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    214e:	8b 81       	ldd	r24, Y+3	; 0x03
    2150:	81 30       	cpi	r24, 0x01	; 1
    2152:	a1 f4       	brne	.+40     	; 0x217c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    2154:	a4 e3       	ldi	r26, 0x34	; 52
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	e4 e3       	ldi	r30, 0x34	; 52
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	48 2f       	mov	r20, r24
    2160:	8a 81       	ldd	r24, Y+2	; 0x02
    2162:	28 2f       	mov	r18, r24
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	02 2e       	mov	r0, r18
    216c:	02 c0       	rjmp	.+4      	; 0x2172 <GPIO_setupPinDirection+0x13c>
    216e:	88 0f       	add	r24, r24
    2170:	99 1f       	adc	r25, r25
    2172:	0a 94       	dec	r0
    2174:	e2 f7       	brpl	.-8      	; 0x216e <GPIO_setupPinDirection+0x138>
    2176:	84 2b       	or	r24, r20
    2178:	8c 93       	st	X, r24
    217a:	40 c0       	rjmp	.+128    	; 0x21fc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    217c:	a4 e3       	ldi	r26, 0x34	; 52
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	e4 e3       	ldi	r30, 0x34	; 52
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	48 2f       	mov	r20, r24
    2188:	8a 81       	ldd	r24, Y+2	; 0x02
    218a:	28 2f       	mov	r18, r24
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	02 2e       	mov	r0, r18
    2194:	02 c0       	rjmp	.+4      	; 0x219a <GPIO_setupPinDirection+0x164>
    2196:	88 0f       	add	r24, r24
    2198:	99 1f       	adc	r25, r25
    219a:	0a 94       	dec	r0
    219c:	e2 f7       	brpl	.-8      	; 0x2196 <GPIO_setupPinDirection+0x160>
    219e:	80 95       	com	r24
    21a0:	84 23       	and	r24, r20
    21a2:	8c 93       	st	X, r24
    21a4:	2b c0       	rjmp	.+86     	; 0x21fc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    21a6:	8b 81       	ldd	r24, Y+3	; 0x03
    21a8:	81 30       	cpi	r24, 0x01	; 1
    21aa:	a1 f4       	brne	.+40     	; 0x21d4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    21ac:	a1 e3       	ldi	r26, 0x31	; 49
    21ae:	b0 e0       	ldi	r27, 0x00	; 0
    21b0:	e1 e3       	ldi	r30, 0x31	; 49
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	48 2f       	mov	r20, r24
    21b8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ba:	28 2f       	mov	r18, r24
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	02 2e       	mov	r0, r18
    21c4:	02 c0       	rjmp	.+4      	; 0x21ca <GPIO_setupPinDirection+0x194>
    21c6:	88 0f       	add	r24, r24
    21c8:	99 1f       	adc	r25, r25
    21ca:	0a 94       	dec	r0
    21cc:	e2 f7       	brpl	.-8      	; 0x21c6 <GPIO_setupPinDirection+0x190>
    21ce:	84 2b       	or	r24, r20
    21d0:	8c 93       	st	X, r24
    21d2:	14 c0       	rjmp	.+40     	; 0x21fc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    21d4:	a1 e3       	ldi	r26, 0x31	; 49
    21d6:	b0 e0       	ldi	r27, 0x00	; 0
    21d8:	e1 e3       	ldi	r30, 0x31	; 49
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	80 81       	ld	r24, Z
    21de:	48 2f       	mov	r20, r24
    21e0:	8a 81       	ldd	r24, Y+2	; 0x02
    21e2:	28 2f       	mov	r18, r24
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	02 2e       	mov	r0, r18
    21ec:	02 c0       	rjmp	.+4      	; 0x21f2 <GPIO_setupPinDirection+0x1bc>
    21ee:	88 0f       	add	r24, r24
    21f0:	99 1f       	adc	r25, r25
    21f2:	0a 94       	dec	r0
    21f4:	e2 f7       	brpl	.-8      	; 0x21ee <GPIO_setupPinDirection+0x1b8>
    21f6:	80 95       	com	r24
    21f8:	84 23       	and	r24, r20
    21fa:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    21fc:	0f 90       	pop	r0
    21fe:	0f 90       	pop	r0
    2200:	0f 90       	pop	r0
    2202:	0f 90       	pop	r0
    2204:	0f 90       	pop	r0
    2206:	cf 91       	pop	r28
    2208:	df 91       	pop	r29
    220a:	08 95       	ret

0000220c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    220c:	df 93       	push	r29
    220e:	cf 93       	push	r28
    2210:	00 d0       	rcall	.+0      	; 0x2212 <GPIO_writePin+0x6>
    2212:	00 d0       	rcall	.+0      	; 0x2214 <GPIO_writePin+0x8>
    2214:	0f 92       	push	r0
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
    221a:	89 83       	std	Y+1, r24	; 0x01
    221c:	6a 83       	std	Y+2, r22	; 0x02
    221e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2220:	8a 81       	ldd	r24, Y+2	; 0x02
    2222:	88 30       	cpi	r24, 0x08	; 8
    2224:	08 f0       	brcs	.+2      	; 0x2228 <GPIO_writePin+0x1c>
    2226:	d5 c0       	rjmp	.+426    	; 0x23d2 <GPIO_writePin+0x1c6>
    2228:	89 81       	ldd	r24, Y+1	; 0x01
    222a:	84 30       	cpi	r24, 0x04	; 4
    222c:	08 f0       	brcs	.+2      	; 0x2230 <GPIO_writePin+0x24>
    222e:	d1 c0       	rjmp	.+418    	; 0x23d2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    2230:	89 81       	ldd	r24, Y+1	; 0x01
    2232:	28 2f       	mov	r18, r24
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	3d 83       	std	Y+5, r19	; 0x05
    2238:	2c 83       	std	Y+4, r18	; 0x04
    223a:	8c 81       	ldd	r24, Y+4	; 0x04
    223c:	9d 81       	ldd	r25, Y+5	; 0x05
    223e:	81 30       	cpi	r24, 0x01	; 1
    2240:	91 05       	cpc	r25, r1
    2242:	09 f4       	brne	.+2      	; 0x2246 <GPIO_writePin+0x3a>
    2244:	43 c0       	rjmp	.+134    	; 0x22cc <GPIO_writePin+0xc0>
    2246:	2c 81       	ldd	r18, Y+4	; 0x04
    2248:	3d 81       	ldd	r19, Y+5	; 0x05
    224a:	22 30       	cpi	r18, 0x02	; 2
    224c:	31 05       	cpc	r19, r1
    224e:	2c f4       	brge	.+10     	; 0x225a <GPIO_writePin+0x4e>
    2250:	8c 81       	ldd	r24, Y+4	; 0x04
    2252:	9d 81       	ldd	r25, Y+5	; 0x05
    2254:	00 97       	sbiw	r24, 0x00	; 0
    2256:	71 f0       	breq	.+28     	; 0x2274 <GPIO_writePin+0x68>
    2258:	bc c0       	rjmp	.+376    	; 0x23d2 <GPIO_writePin+0x1c6>
    225a:	2c 81       	ldd	r18, Y+4	; 0x04
    225c:	3d 81       	ldd	r19, Y+5	; 0x05
    225e:	22 30       	cpi	r18, 0x02	; 2
    2260:	31 05       	cpc	r19, r1
    2262:	09 f4       	brne	.+2      	; 0x2266 <GPIO_writePin+0x5a>
    2264:	5f c0       	rjmp	.+190    	; 0x2324 <GPIO_writePin+0x118>
    2266:	8c 81       	ldd	r24, Y+4	; 0x04
    2268:	9d 81       	ldd	r25, Y+5	; 0x05
    226a:	83 30       	cpi	r24, 0x03	; 3
    226c:	91 05       	cpc	r25, r1
    226e:	09 f4       	brne	.+2      	; 0x2272 <GPIO_writePin+0x66>
    2270:	85 c0       	rjmp	.+266    	; 0x237c <GPIO_writePin+0x170>
    2272:	af c0       	rjmp	.+350    	; 0x23d2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    2274:	8b 81       	ldd	r24, Y+3	; 0x03
    2276:	81 30       	cpi	r24, 0x01	; 1
    2278:	a1 f4       	brne	.+40     	; 0x22a2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    227a:	ab e3       	ldi	r26, 0x3B	; 59
    227c:	b0 e0       	ldi	r27, 0x00	; 0
    227e:	eb e3       	ldi	r30, 0x3B	; 59
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	80 81       	ld	r24, Z
    2284:	48 2f       	mov	r20, r24
    2286:	8a 81       	ldd	r24, Y+2	; 0x02
    2288:	28 2f       	mov	r18, r24
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	81 e0       	ldi	r24, 0x01	; 1
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	02 2e       	mov	r0, r18
    2292:	02 c0       	rjmp	.+4      	; 0x2298 <GPIO_writePin+0x8c>
    2294:	88 0f       	add	r24, r24
    2296:	99 1f       	adc	r25, r25
    2298:	0a 94       	dec	r0
    229a:	e2 f7       	brpl	.-8      	; 0x2294 <GPIO_writePin+0x88>
    229c:	84 2b       	or	r24, r20
    229e:	8c 93       	st	X, r24
    22a0:	98 c0       	rjmp	.+304    	; 0x23d2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    22a2:	ab e3       	ldi	r26, 0x3B	; 59
    22a4:	b0 e0       	ldi	r27, 0x00	; 0
    22a6:	eb e3       	ldi	r30, 0x3B	; 59
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
    22ac:	48 2f       	mov	r20, r24
    22ae:	8a 81       	ldd	r24, Y+2	; 0x02
    22b0:	28 2f       	mov	r18, r24
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	02 2e       	mov	r0, r18
    22ba:	02 c0       	rjmp	.+4      	; 0x22c0 <GPIO_writePin+0xb4>
    22bc:	88 0f       	add	r24, r24
    22be:	99 1f       	adc	r25, r25
    22c0:	0a 94       	dec	r0
    22c2:	e2 f7       	brpl	.-8      	; 0x22bc <GPIO_writePin+0xb0>
    22c4:	80 95       	com	r24
    22c6:	84 23       	and	r24, r20
    22c8:	8c 93       	st	X, r24
    22ca:	83 c0       	rjmp	.+262    	; 0x23d2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    22cc:	8b 81       	ldd	r24, Y+3	; 0x03
    22ce:	81 30       	cpi	r24, 0x01	; 1
    22d0:	a1 f4       	brne	.+40     	; 0x22fa <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    22d2:	a8 e3       	ldi	r26, 0x38	; 56
    22d4:	b0 e0       	ldi	r27, 0x00	; 0
    22d6:	e8 e3       	ldi	r30, 0x38	; 56
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	80 81       	ld	r24, Z
    22dc:	48 2f       	mov	r20, r24
    22de:	8a 81       	ldd	r24, Y+2	; 0x02
    22e0:	28 2f       	mov	r18, r24
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	02 2e       	mov	r0, r18
    22ea:	02 c0       	rjmp	.+4      	; 0x22f0 <GPIO_writePin+0xe4>
    22ec:	88 0f       	add	r24, r24
    22ee:	99 1f       	adc	r25, r25
    22f0:	0a 94       	dec	r0
    22f2:	e2 f7       	brpl	.-8      	; 0x22ec <GPIO_writePin+0xe0>
    22f4:	84 2b       	or	r24, r20
    22f6:	8c 93       	st	X, r24
    22f8:	6c c0       	rjmp	.+216    	; 0x23d2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    22fa:	a8 e3       	ldi	r26, 0x38	; 56
    22fc:	b0 e0       	ldi	r27, 0x00	; 0
    22fe:	e8 e3       	ldi	r30, 0x38	; 56
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	80 81       	ld	r24, Z
    2304:	48 2f       	mov	r20, r24
    2306:	8a 81       	ldd	r24, Y+2	; 0x02
    2308:	28 2f       	mov	r18, r24
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	81 e0       	ldi	r24, 0x01	; 1
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	02 2e       	mov	r0, r18
    2312:	02 c0       	rjmp	.+4      	; 0x2318 <GPIO_writePin+0x10c>
    2314:	88 0f       	add	r24, r24
    2316:	99 1f       	adc	r25, r25
    2318:	0a 94       	dec	r0
    231a:	e2 f7       	brpl	.-8      	; 0x2314 <GPIO_writePin+0x108>
    231c:	80 95       	com	r24
    231e:	84 23       	and	r24, r20
    2320:	8c 93       	st	X, r24
    2322:	57 c0       	rjmp	.+174    	; 0x23d2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    2324:	8b 81       	ldd	r24, Y+3	; 0x03
    2326:	81 30       	cpi	r24, 0x01	; 1
    2328:	a1 f4       	brne	.+40     	; 0x2352 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    232a:	a5 e3       	ldi	r26, 0x35	; 53
    232c:	b0 e0       	ldi	r27, 0x00	; 0
    232e:	e5 e3       	ldi	r30, 0x35	; 53
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	80 81       	ld	r24, Z
    2334:	48 2f       	mov	r20, r24
    2336:	8a 81       	ldd	r24, Y+2	; 0x02
    2338:	28 2f       	mov	r18, r24
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	02 2e       	mov	r0, r18
    2342:	02 c0       	rjmp	.+4      	; 0x2348 <GPIO_writePin+0x13c>
    2344:	88 0f       	add	r24, r24
    2346:	99 1f       	adc	r25, r25
    2348:	0a 94       	dec	r0
    234a:	e2 f7       	brpl	.-8      	; 0x2344 <GPIO_writePin+0x138>
    234c:	84 2b       	or	r24, r20
    234e:	8c 93       	st	X, r24
    2350:	40 c0       	rjmp	.+128    	; 0x23d2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2352:	a5 e3       	ldi	r26, 0x35	; 53
    2354:	b0 e0       	ldi	r27, 0x00	; 0
    2356:	e5 e3       	ldi	r30, 0x35	; 53
    2358:	f0 e0       	ldi	r31, 0x00	; 0
    235a:	80 81       	ld	r24, Z
    235c:	48 2f       	mov	r20, r24
    235e:	8a 81       	ldd	r24, Y+2	; 0x02
    2360:	28 2f       	mov	r18, r24
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	02 2e       	mov	r0, r18
    236a:	02 c0       	rjmp	.+4      	; 0x2370 <GPIO_writePin+0x164>
    236c:	88 0f       	add	r24, r24
    236e:	99 1f       	adc	r25, r25
    2370:	0a 94       	dec	r0
    2372:	e2 f7       	brpl	.-8      	; 0x236c <GPIO_writePin+0x160>
    2374:	80 95       	com	r24
    2376:	84 23       	and	r24, r20
    2378:	8c 93       	st	X, r24
    237a:	2b c0       	rjmp	.+86     	; 0x23d2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    237c:	8b 81       	ldd	r24, Y+3	; 0x03
    237e:	81 30       	cpi	r24, 0x01	; 1
    2380:	a1 f4       	brne	.+40     	; 0x23aa <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2382:	a2 e3       	ldi	r26, 0x32	; 50
    2384:	b0 e0       	ldi	r27, 0x00	; 0
    2386:	e2 e3       	ldi	r30, 0x32	; 50
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	80 81       	ld	r24, Z
    238c:	48 2f       	mov	r20, r24
    238e:	8a 81       	ldd	r24, Y+2	; 0x02
    2390:	28 2f       	mov	r18, r24
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	02 2e       	mov	r0, r18
    239a:	02 c0       	rjmp	.+4      	; 0x23a0 <GPIO_writePin+0x194>
    239c:	88 0f       	add	r24, r24
    239e:	99 1f       	adc	r25, r25
    23a0:	0a 94       	dec	r0
    23a2:	e2 f7       	brpl	.-8      	; 0x239c <GPIO_writePin+0x190>
    23a4:	84 2b       	or	r24, r20
    23a6:	8c 93       	st	X, r24
    23a8:	14 c0       	rjmp	.+40     	; 0x23d2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    23aa:	a2 e3       	ldi	r26, 0x32	; 50
    23ac:	b0 e0       	ldi	r27, 0x00	; 0
    23ae:	e2 e3       	ldi	r30, 0x32	; 50
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	80 81       	ld	r24, Z
    23b4:	48 2f       	mov	r20, r24
    23b6:	8a 81       	ldd	r24, Y+2	; 0x02
    23b8:	28 2f       	mov	r18, r24
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	81 e0       	ldi	r24, 0x01	; 1
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	02 2e       	mov	r0, r18
    23c2:	02 c0       	rjmp	.+4      	; 0x23c8 <GPIO_writePin+0x1bc>
    23c4:	88 0f       	add	r24, r24
    23c6:	99 1f       	adc	r25, r25
    23c8:	0a 94       	dec	r0
    23ca:	e2 f7       	brpl	.-8      	; 0x23c4 <GPIO_writePin+0x1b8>
    23cc:	80 95       	com	r24
    23ce:	84 23       	and	r24, r20
    23d0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    23d2:	0f 90       	pop	r0
    23d4:	0f 90       	pop	r0
    23d6:	0f 90       	pop	r0
    23d8:	0f 90       	pop	r0
    23da:	0f 90       	pop	r0
    23dc:	cf 91       	pop	r28
    23de:	df 91       	pop	r29
    23e0:	08 95       	ret

000023e2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    23e2:	df 93       	push	r29
    23e4:	cf 93       	push	r28
    23e6:	00 d0       	rcall	.+0      	; 0x23e8 <GPIO_readPin+0x6>
    23e8:	00 d0       	rcall	.+0      	; 0x23ea <GPIO_readPin+0x8>
    23ea:	0f 92       	push	r0
    23ec:	cd b7       	in	r28, 0x3d	; 61
    23ee:	de b7       	in	r29, 0x3e	; 62
    23f0:	8a 83       	std	Y+2, r24	; 0x02
    23f2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    23f4:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    23f6:	8b 81       	ldd	r24, Y+3	; 0x03
    23f8:	88 30       	cpi	r24, 0x08	; 8
    23fa:	08 f0       	brcs	.+2      	; 0x23fe <GPIO_readPin+0x1c>
    23fc:	84 c0       	rjmp	.+264    	; 0x2506 <GPIO_readPin+0x124>
    23fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2400:	84 30       	cpi	r24, 0x04	; 4
    2402:	08 f0       	brcs	.+2      	; 0x2406 <GPIO_readPin+0x24>
    2404:	80 c0       	rjmp	.+256    	; 0x2506 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2406:	8a 81       	ldd	r24, Y+2	; 0x02
    2408:	28 2f       	mov	r18, r24
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	3d 83       	std	Y+5, r19	; 0x05
    240e:	2c 83       	std	Y+4, r18	; 0x04
    2410:	4c 81       	ldd	r20, Y+4	; 0x04
    2412:	5d 81       	ldd	r21, Y+5	; 0x05
    2414:	41 30       	cpi	r20, 0x01	; 1
    2416:	51 05       	cpc	r21, r1
    2418:	79 f1       	breq	.+94     	; 0x2478 <GPIO_readPin+0x96>
    241a:	8c 81       	ldd	r24, Y+4	; 0x04
    241c:	9d 81       	ldd	r25, Y+5	; 0x05
    241e:	82 30       	cpi	r24, 0x02	; 2
    2420:	91 05       	cpc	r25, r1
    2422:	34 f4       	brge	.+12     	; 0x2430 <GPIO_readPin+0x4e>
    2424:	2c 81       	ldd	r18, Y+4	; 0x04
    2426:	3d 81       	ldd	r19, Y+5	; 0x05
    2428:	21 15       	cp	r18, r1
    242a:	31 05       	cpc	r19, r1
    242c:	69 f0       	breq	.+26     	; 0x2448 <GPIO_readPin+0x66>
    242e:	6b c0       	rjmp	.+214    	; 0x2506 <GPIO_readPin+0x124>
    2430:	4c 81       	ldd	r20, Y+4	; 0x04
    2432:	5d 81       	ldd	r21, Y+5	; 0x05
    2434:	42 30       	cpi	r20, 0x02	; 2
    2436:	51 05       	cpc	r21, r1
    2438:	b9 f1       	breq	.+110    	; 0x24a8 <GPIO_readPin+0xc6>
    243a:	8c 81       	ldd	r24, Y+4	; 0x04
    243c:	9d 81       	ldd	r25, Y+5	; 0x05
    243e:	83 30       	cpi	r24, 0x03	; 3
    2440:	91 05       	cpc	r25, r1
    2442:	09 f4       	brne	.+2      	; 0x2446 <GPIO_readPin+0x64>
    2444:	49 c0       	rjmp	.+146    	; 0x24d8 <GPIO_readPin+0xf6>
    2446:	5f c0       	rjmp	.+190    	; 0x2506 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    2448:	e9 e3       	ldi	r30, 0x39	; 57
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	80 81       	ld	r24, Z
    244e:	28 2f       	mov	r18, r24
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	8b 81       	ldd	r24, Y+3	; 0x03
    2454:	88 2f       	mov	r24, r24
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	a9 01       	movw	r20, r18
    245a:	02 c0       	rjmp	.+4      	; 0x2460 <GPIO_readPin+0x7e>
    245c:	55 95       	asr	r21
    245e:	47 95       	ror	r20
    2460:	8a 95       	dec	r24
    2462:	e2 f7       	brpl	.-8      	; 0x245c <GPIO_readPin+0x7a>
    2464:	ca 01       	movw	r24, r20
    2466:	81 70       	andi	r24, 0x01	; 1
    2468:	90 70       	andi	r25, 0x00	; 0
    246a:	88 23       	and	r24, r24
    246c:	19 f0       	breq	.+6      	; 0x2474 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	89 83       	std	Y+1, r24	; 0x01
    2472:	49 c0       	rjmp	.+146    	; 0x2506 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2474:	19 82       	std	Y+1, r1	; 0x01
    2476:	47 c0       	rjmp	.+142    	; 0x2506 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2478:	e6 e3       	ldi	r30, 0x36	; 54
    247a:	f0 e0       	ldi	r31, 0x00	; 0
    247c:	80 81       	ld	r24, Z
    247e:	28 2f       	mov	r18, r24
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	8b 81       	ldd	r24, Y+3	; 0x03
    2484:	88 2f       	mov	r24, r24
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	a9 01       	movw	r20, r18
    248a:	02 c0       	rjmp	.+4      	; 0x2490 <GPIO_readPin+0xae>
    248c:	55 95       	asr	r21
    248e:	47 95       	ror	r20
    2490:	8a 95       	dec	r24
    2492:	e2 f7       	brpl	.-8      	; 0x248c <GPIO_readPin+0xaa>
    2494:	ca 01       	movw	r24, r20
    2496:	81 70       	andi	r24, 0x01	; 1
    2498:	90 70       	andi	r25, 0x00	; 0
    249a:	88 23       	and	r24, r24
    249c:	19 f0       	breq	.+6      	; 0x24a4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    249e:	81 e0       	ldi	r24, 0x01	; 1
    24a0:	89 83       	std	Y+1, r24	; 0x01
    24a2:	31 c0       	rjmp	.+98     	; 0x2506 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    24a4:	19 82       	std	Y+1, r1	; 0x01
    24a6:	2f c0       	rjmp	.+94     	; 0x2506 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    24a8:	e3 e3       	ldi	r30, 0x33	; 51
    24aa:	f0 e0       	ldi	r31, 0x00	; 0
    24ac:	80 81       	ld	r24, Z
    24ae:	28 2f       	mov	r18, r24
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	8b 81       	ldd	r24, Y+3	; 0x03
    24b4:	88 2f       	mov	r24, r24
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	a9 01       	movw	r20, r18
    24ba:	02 c0       	rjmp	.+4      	; 0x24c0 <GPIO_readPin+0xde>
    24bc:	55 95       	asr	r21
    24be:	47 95       	ror	r20
    24c0:	8a 95       	dec	r24
    24c2:	e2 f7       	brpl	.-8      	; 0x24bc <GPIO_readPin+0xda>
    24c4:	ca 01       	movw	r24, r20
    24c6:	81 70       	andi	r24, 0x01	; 1
    24c8:	90 70       	andi	r25, 0x00	; 0
    24ca:	88 23       	and	r24, r24
    24cc:	19 f0       	breq	.+6      	; 0x24d4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	89 83       	std	Y+1, r24	; 0x01
    24d2:	19 c0       	rjmp	.+50     	; 0x2506 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    24d4:	19 82       	std	Y+1, r1	; 0x01
    24d6:	17 c0       	rjmp	.+46     	; 0x2506 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    24d8:	e0 e3       	ldi	r30, 0x30	; 48
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	80 81       	ld	r24, Z
    24de:	28 2f       	mov	r18, r24
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	8b 81       	ldd	r24, Y+3	; 0x03
    24e4:	88 2f       	mov	r24, r24
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	a9 01       	movw	r20, r18
    24ea:	02 c0       	rjmp	.+4      	; 0x24f0 <GPIO_readPin+0x10e>
    24ec:	55 95       	asr	r21
    24ee:	47 95       	ror	r20
    24f0:	8a 95       	dec	r24
    24f2:	e2 f7       	brpl	.-8      	; 0x24ec <GPIO_readPin+0x10a>
    24f4:	ca 01       	movw	r24, r20
    24f6:	81 70       	andi	r24, 0x01	; 1
    24f8:	90 70       	andi	r25, 0x00	; 0
    24fa:	88 23       	and	r24, r24
    24fc:	19 f0       	breq	.+6      	; 0x2504 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    24fe:	81 e0       	ldi	r24, 0x01	; 1
    2500:	89 83       	std	Y+1, r24	; 0x01
    2502:	01 c0       	rjmp	.+2      	; 0x2506 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2504:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2506:	89 81       	ldd	r24, Y+1	; 0x01
}
    2508:	0f 90       	pop	r0
    250a:	0f 90       	pop	r0
    250c:	0f 90       	pop	r0
    250e:	0f 90       	pop	r0
    2510:	0f 90       	pop	r0
    2512:	cf 91       	pop	r28
    2514:	df 91       	pop	r29
    2516:	08 95       	ret

00002518 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2518:	df 93       	push	r29
    251a:	cf 93       	push	r28
    251c:	00 d0       	rcall	.+0      	; 0x251e <GPIO_setupPortDirection+0x6>
    251e:	00 d0       	rcall	.+0      	; 0x2520 <GPIO_setupPortDirection+0x8>
    2520:	cd b7       	in	r28, 0x3d	; 61
    2522:	de b7       	in	r29, 0x3e	; 62
    2524:	89 83       	std	Y+1, r24	; 0x01
    2526:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2528:	89 81       	ldd	r24, Y+1	; 0x01
    252a:	84 30       	cpi	r24, 0x04	; 4
    252c:	90 f5       	brcc	.+100    	; 0x2592 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    252e:	89 81       	ldd	r24, Y+1	; 0x01
    2530:	28 2f       	mov	r18, r24
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	3c 83       	std	Y+4, r19	; 0x04
    2536:	2b 83       	std	Y+3, r18	; 0x03
    2538:	8b 81       	ldd	r24, Y+3	; 0x03
    253a:	9c 81       	ldd	r25, Y+4	; 0x04
    253c:	81 30       	cpi	r24, 0x01	; 1
    253e:	91 05       	cpc	r25, r1
    2540:	d1 f0       	breq	.+52     	; 0x2576 <GPIO_setupPortDirection+0x5e>
    2542:	2b 81       	ldd	r18, Y+3	; 0x03
    2544:	3c 81       	ldd	r19, Y+4	; 0x04
    2546:	22 30       	cpi	r18, 0x02	; 2
    2548:	31 05       	cpc	r19, r1
    254a:	2c f4       	brge	.+10     	; 0x2556 <GPIO_setupPortDirection+0x3e>
    254c:	8b 81       	ldd	r24, Y+3	; 0x03
    254e:	9c 81       	ldd	r25, Y+4	; 0x04
    2550:	00 97       	sbiw	r24, 0x00	; 0
    2552:	61 f0       	breq	.+24     	; 0x256c <GPIO_setupPortDirection+0x54>
    2554:	1e c0       	rjmp	.+60     	; 0x2592 <GPIO_setupPortDirection+0x7a>
    2556:	2b 81       	ldd	r18, Y+3	; 0x03
    2558:	3c 81       	ldd	r19, Y+4	; 0x04
    255a:	22 30       	cpi	r18, 0x02	; 2
    255c:	31 05       	cpc	r19, r1
    255e:	81 f0       	breq	.+32     	; 0x2580 <GPIO_setupPortDirection+0x68>
    2560:	8b 81       	ldd	r24, Y+3	; 0x03
    2562:	9c 81       	ldd	r25, Y+4	; 0x04
    2564:	83 30       	cpi	r24, 0x03	; 3
    2566:	91 05       	cpc	r25, r1
    2568:	81 f0       	breq	.+32     	; 0x258a <GPIO_setupPortDirection+0x72>
    256a:	13 c0       	rjmp	.+38     	; 0x2592 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    256c:	ea e3       	ldi	r30, 0x3A	; 58
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	8a 81       	ldd	r24, Y+2	; 0x02
    2572:	80 83       	st	Z, r24
    2574:	0e c0       	rjmp	.+28     	; 0x2592 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2576:	e7 e3       	ldi	r30, 0x37	; 55
    2578:	f0 e0       	ldi	r31, 0x00	; 0
    257a:	8a 81       	ldd	r24, Y+2	; 0x02
    257c:	80 83       	st	Z, r24
    257e:	09 c0       	rjmp	.+18     	; 0x2592 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2580:	e4 e3       	ldi	r30, 0x34	; 52
    2582:	f0 e0       	ldi	r31, 0x00	; 0
    2584:	8a 81       	ldd	r24, Y+2	; 0x02
    2586:	80 83       	st	Z, r24
    2588:	04 c0       	rjmp	.+8      	; 0x2592 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    258a:	e1 e3       	ldi	r30, 0x31	; 49
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	8a 81       	ldd	r24, Y+2	; 0x02
    2590:	80 83       	st	Z, r24
			break;
		}
	}
}
    2592:	0f 90       	pop	r0
    2594:	0f 90       	pop	r0
    2596:	0f 90       	pop	r0
    2598:	0f 90       	pop	r0
    259a:	cf 91       	pop	r28
    259c:	df 91       	pop	r29
    259e:	08 95       	ret

000025a0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    25a0:	df 93       	push	r29
    25a2:	cf 93       	push	r28
    25a4:	00 d0       	rcall	.+0      	; 0x25a6 <GPIO_writePort+0x6>
    25a6:	00 d0       	rcall	.+0      	; 0x25a8 <GPIO_writePort+0x8>
    25a8:	cd b7       	in	r28, 0x3d	; 61
    25aa:	de b7       	in	r29, 0x3e	; 62
    25ac:	89 83       	std	Y+1, r24	; 0x01
    25ae:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    25b0:	89 81       	ldd	r24, Y+1	; 0x01
    25b2:	84 30       	cpi	r24, 0x04	; 4
    25b4:	90 f5       	brcc	.+100    	; 0x261a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    25b6:	89 81       	ldd	r24, Y+1	; 0x01
    25b8:	28 2f       	mov	r18, r24
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	3c 83       	std	Y+4, r19	; 0x04
    25be:	2b 83       	std	Y+3, r18	; 0x03
    25c0:	8b 81       	ldd	r24, Y+3	; 0x03
    25c2:	9c 81       	ldd	r25, Y+4	; 0x04
    25c4:	81 30       	cpi	r24, 0x01	; 1
    25c6:	91 05       	cpc	r25, r1
    25c8:	d1 f0       	breq	.+52     	; 0x25fe <GPIO_writePort+0x5e>
    25ca:	2b 81       	ldd	r18, Y+3	; 0x03
    25cc:	3c 81       	ldd	r19, Y+4	; 0x04
    25ce:	22 30       	cpi	r18, 0x02	; 2
    25d0:	31 05       	cpc	r19, r1
    25d2:	2c f4       	brge	.+10     	; 0x25de <GPIO_writePort+0x3e>
    25d4:	8b 81       	ldd	r24, Y+3	; 0x03
    25d6:	9c 81       	ldd	r25, Y+4	; 0x04
    25d8:	00 97       	sbiw	r24, 0x00	; 0
    25da:	61 f0       	breq	.+24     	; 0x25f4 <GPIO_writePort+0x54>
    25dc:	1e c0       	rjmp	.+60     	; 0x261a <GPIO_writePort+0x7a>
    25de:	2b 81       	ldd	r18, Y+3	; 0x03
    25e0:	3c 81       	ldd	r19, Y+4	; 0x04
    25e2:	22 30       	cpi	r18, 0x02	; 2
    25e4:	31 05       	cpc	r19, r1
    25e6:	81 f0       	breq	.+32     	; 0x2608 <GPIO_writePort+0x68>
    25e8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ea:	9c 81       	ldd	r25, Y+4	; 0x04
    25ec:	83 30       	cpi	r24, 0x03	; 3
    25ee:	91 05       	cpc	r25, r1
    25f0:	81 f0       	breq	.+32     	; 0x2612 <GPIO_writePort+0x72>
    25f2:	13 c0       	rjmp	.+38     	; 0x261a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    25f4:	eb e3       	ldi	r30, 0x3B	; 59
    25f6:	f0 e0       	ldi	r31, 0x00	; 0
    25f8:	8a 81       	ldd	r24, Y+2	; 0x02
    25fa:	80 83       	st	Z, r24
    25fc:	0e c0       	rjmp	.+28     	; 0x261a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    25fe:	e8 e3       	ldi	r30, 0x38	; 56
    2600:	f0 e0       	ldi	r31, 0x00	; 0
    2602:	8a 81       	ldd	r24, Y+2	; 0x02
    2604:	80 83       	st	Z, r24
    2606:	09 c0       	rjmp	.+18     	; 0x261a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2608:	e5 e3       	ldi	r30, 0x35	; 53
    260a:	f0 e0       	ldi	r31, 0x00	; 0
    260c:	8a 81       	ldd	r24, Y+2	; 0x02
    260e:	80 83       	st	Z, r24
    2610:	04 c0       	rjmp	.+8      	; 0x261a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2612:	e2 e3       	ldi	r30, 0x32	; 50
    2614:	f0 e0       	ldi	r31, 0x00	; 0
    2616:	8a 81       	ldd	r24, Y+2	; 0x02
    2618:	80 83       	st	Z, r24
			break;
		}
	}
}
    261a:	0f 90       	pop	r0
    261c:	0f 90       	pop	r0
    261e:	0f 90       	pop	r0
    2620:	0f 90       	pop	r0
    2622:	cf 91       	pop	r28
    2624:	df 91       	pop	r29
    2626:	08 95       	ret

00002628 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2628:	df 93       	push	r29
    262a:	cf 93       	push	r28
    262c:	00 d0       	rcall	.+0      	; 0x262e <GPIO_readPort+0x6>
    262e:	00 d0       	rcall	.+0      	; 0x2630 <GPIO_readPort+0x8>
    2630:	cd b7       	in	r28, 0x3d	; 61
    2632:	de b7       	in	r29, 0x3e	; 62
    2634:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2636:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2638:	8a 81       	ldd	r24, Y+2	; 0x02
    263a:	84 30       	cpi	r24, 0x04	; 4
    263c:	90 f5       	brcc	.+100    	; 0x26a2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    263e:	8a 81       	ldd	r24, Y+2	; 0x02
    2640:	28 2f       	mov	r18, r24
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	3c 83       	std	Y+4, r19	; 0x04
    2646:	2b 83       	std	Y+3, r18	; 0x03
    2648:	8b 81       	ldd	r24, Y+3	; 0x03
    264a:	9c 81       	ldd	r25, Y+4	; 0x04
    264c:	81 30       	cpi	r24, 0x01	; 1
    264e:	91 05       	cpc	r25, r1
    2650:	d1 f0       	breq	.+52     	; 0x2686 <GPIO_readPort+0x5e>
    2652:	2b 81       	ldd	r18, Y+3	; 0x03
    2654:	3c 81       	ldd	r19, Y+4	; 0x04
    2656:	22 30       	cpi	r18, 0x02	; 2
    2658:	31 05       	cpc	r19, r1
    265a:	2c f4       	brge	.+10     	; 0x2666 <GPIO_readPort+0x3e>
    265c:	8b 81       	ldd	r24, Y+3	; 0x03
    265e:	9c 81       	ldd	r25, Y+4	; 0x04
    2660:	00 97       	sbiw	r24, 0x00	; 0
    2662:	61 f0       	breq	.+24     	; 0x267c <GPIO_readPort+0x54>
    2664:	1e c0       	rjmp	.+60     	; 0x26a2 <GPIO_readPort+0x7a>
    2666:	2b 81       	ldd	r18, Y+3	; 0x03
    2668:	3c 81       	ldd	r19, Y+4	; 0x04
    266a:	22 30       	cpi	r18, 0x02	; 2
    266c:	31 05       	cpc	r19, r1
    266e:	81 f0       	breq	.+32     	; 0x2690 <GPIO_readPort+0x68>
    2670:	8b 81       	ldd	r24, Y+3	; 0x03
    2672:	9c 81       	ldd	r25, Y+4	; 0x04
    2674:	83 30       	cpi	r24, 0x03	; 3
    2676:	91 05       	cpc	r25, r1
    2678:	81 f0       	breq	.+32     	; 0x269a <GPIO_readPort+0x72>
    267a:	13 c0       	rjmp	.+38     	; 0x26a2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    267c:	e9 e3       	ldi	r30, 0x39	; 57
    267e:	f0 e0       	ldi	r31, 0x00	; 0
    2680:	80 81       	ld	r24, Z
    2682:	89 83       	std	Y+1, r24	; 0x01
    2684:	0e c0       	rjmp	.+28     	; 0x26a2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2686:	e6 e3       	ldi	r30, 0x36	; 54
    2688:	f0 e0       	ldi	r31, 0x00	; 0
    268a:	80 81       	ld	r24, Z
    268c:	89 83       	std	Y+1, r24	; 0x01
    268e:	09 c0       	rjmp	.+18     	; 0x26a2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2690:	e3 e3       	ldi	r30, 0x33	; 51
    2692:	f0 e0       	ldi	r31, 0x00	; 0
    2694:	80 81       	ld	r24, Z
    2696:	89 83       	std	Y+1, r24	; 0x01
    2698:	04 c0       	rjmp	.+8      	; 0x26a2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    269a:	e0 e3       	ldi	r30, 0x30	; 48
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	80 81       	ld	r24, Z
    26a0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    26a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    26a4:	0f 90       	pop	r0
    26a6:	0f 90       	pop	r0
    26a8:	0f 90       	pop	r0
    26aa:	0f 90       	pop	r0
    26ac:	cf 91       	pop	r28
    26ae:	df 91       	pop	r29
    26b0:	08 95       	ret

000026b2 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    26b2:	df 93       	push	r29
    26b4:	cf 93       	push	r28
    26b6:	cd b7       	in	r28, 0x3d	; 61
    26b8:	de b7       	in	r29, 0x3e	; 62
    26ba:	60 97       	sbiw	r28, 0x10	; 16
    26bc:	0f b6       	in	r0, 0x3f	; 63
    26be:	f8 94       	cli
    26c0:	de bf       	out	0x3e, r29	; 62
    26c2:	0f be       	out	0x3f, r0	; 63
    26c4:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	60 e0       	ldi	r22, 0x00	; 0
    26ca:	40 e0       	ldi	r20, 0x00	; 0
    26cc:	0e 94 1b 10 	call	0x2036	; 0x2036 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	61 e0       	ldi	r22, 0x01	; 1
    26d4:	40 e0       	ldi	r20, 0x00	; 0
    26d6:	0e 94 1b 10 	call	0x2036	; 0x2036 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    26da:	81 e0       	ldi	r24, 0x01	; 1
    26dc:	62 e0       	ldi	r22, 0x02	; 2
    26de:	40 e0       	ldi	r20, 0x00	; 0
    26e0:	0e 94 1b 10 	call	0x2036	; 0x2036 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	63 e0       	ldi	r22, 0x03	; 3
    26e8:	40 e0       	ldi	r20, 0x00	; 0
    26ea:	0e 94 1b 10 	call	0x2036	; 0x2036 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    26ee:	81 e0       	ldi	r24, 0x01	; 1
    26f0:	64 e0       	ldi	r22, 0x04	; 4
    26f2:	40 e0       	ldi	r20, 0x00	; 0
    26f4:	0e 94 1b 10 	call	0x2036	; 0x2036 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	65 e0       	ldi	r22, 0x05	; 5
    26fc:	40 e0       	ldi	r20, 0x00	; 0
    26fe:	0e 94 1b 10 	call	0x2036	; 0x2036 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    2702:	81 e0       	ldi	r24, 0x01	; 1
    2704:	66 e0       	ldi	r22, 0x06	; 6
    2706:	40 e0       	ldi	r20, 0x00	; 0
    2708:	0e 94 1b 10 	call	0x2036	; 0x2036 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	67 e0       	ldi	r22, 0x07	; 7
    2710:	40 e0       	ldi	r20, 0x00	; 0
    2712:	0e 94 1b 10 	call	0x2036	; 0x2036 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2716:	1f 86       	std	Y+15, r1	; 0x0f
    2718:	ab c0       	rjmp	.+342    	; 0x2870 <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    271a:	81 e0       	ldi	r24, 0x01	; 1
    271c:	6f 85       	ldd	r22, Y+15	; 0x0f
    271e:	41 e0       	ldi	r20, 0x01	; 1
    2720:	0e 94 1b 10 	call	0x2036	; 0x2036 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    2724:	81 e0       	ldi	r24, 0x01	; 1
    2726:	6f 85       	ldd	r22, Y+15	; 0x0f
    2728:	40 e0       	ldi	r20, 0x00	; 0
    272a:	0e 94 06 11 	call	0x220c	; 0x220c <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    272e:	18 8a       	std	Y+16, r1	; 0x10
    2730:	22 c0       	rjmp	.+68     	; 0x2776 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    2732:	88 89       	ldd	r24, Y+16	; 0x10
    2734:	98 2f       	mov	r25, r24
    2736:	9c 5f       	subi	r25, 0xFC	; 252
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	69 2f       	mov	r22, r25
    273c:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <GPIO_readPin>
    2740:	88 23       	and	r24, r24
    2742:	b1 f4       	brne	.+44     	; 0x2770 <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2744:	8f 85       	ldd	r24, Y+15	; 0x0f
    2746:	88 2f       	mov	r24, r24
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	88 0f       	add	r24, r24
    274c:	99 1f       	adc	r25, r25
    274e:	88 0f       	add	r24, r24
    2750:	99 1f       	adc	r25, r25
    2752:	98 2f       	mov	r25, r24
    2754:	88 89       	ldd	r24, Y+16	; 0x10
    2756:	89 0f       	add	r24, r25
    2758:	8f 5f       	subi	r24, 0xFF	; 255
    275a:	0e 94 3d 14 	call	0x287a	; 0x287a <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    275e:	60 96       	adiw	r28, 0x10	; 16
    2760:	0f b6       	in	r0, 0x3f	; 63
    2762:	f8 94       	cli
    2764:	de bf       	out	0x3e, r29	; 62
    2766:	0f be       	out	0x3f, r0	; 63
    2768:	cd bf       	out	0x3d, r28	; 61
    276a:	cf 91       	pop	r28
    276c:	df 91       	pop	r29
    276e:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2770:	88 89       	ldd	r24, Y+16	; 0x10
    2772:	8f 5f       	subi	r24, 0xFF	; 255
    2774:	88 8b       	std	Y+16, r24	; 0x10
    2776:	88 89       	ldd	r24, Y+16	; 0x10
    2778:	84 30       	cpi	r24, 0x04	; 4
    277a:	d8 f2       	brcs	.-74     	; 0x2732 <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    277c:	81 e0       	ldi	r24, 0x01	; 1
    277e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2780:	40 e0       	ldi	r20, 0x00	; 0
    2782:	0e 94 1b 10 	call	0x2036	; 0x2036 <GPIO_setupPinDirection>
    2786:	80 e0       	ldi	r24, 0x00	; 0
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	a0 ea       	ldi	r26, 0xA0	; 160
    278c:	b0 e4       	ldi	r27, 0x40	; 64
    278e:	8b 87       	std	Y+11, r24	; 0x0b
    2790:	9c 87       	std	Y+12, r25	; 0x0c
    2792:	ad 87       	std	Y+13, r26	; 0x0d
    2794:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2796:	6b 85       	ldd	r22, Y+11	; 0x0b
    2798:	7c 85       	ldd	r23, Y+12	; 0x0c
    279a:	8d 85       	ldd	r24, Y+13	; 0x0d
    279c:	9e 85       	ldd	r25, Y+14	; 0x0e
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	4a ef       	ldi	r20, 0xFA	; 250
    27a4:	54 e4       	ldi	r21, 0x44	; 68
    27a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27aa:	dc 01       	movw	r26, r24
    27ac:	cb 01       	movw	r24, r22
    27ae:	8f 83       	std	Y+7, r24	; 0x07
    27b0:	98 87       	std	Y+8, r25	; 0x08
    27b2:	a9 87       	std	Y+9, r26	; 0x09
    27b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27b6:	6f 81       	ldd	r22, Y+7	; 0x07
    27b8:	78 85       	ldd	r23, Y+8	; 0x08
    27ba:	89 85       	ldd	r24, Y+9	; 0x09
    27bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	40 e8       	ldi	r20, 0x80	; 128
    27c4:	5f e3       	ldi	r21, 0x3F	; 63
    27c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27ca:	88 23       	and	r24, r24
    27cc:	2c f4       	brge	.+10     	; 0x27d8 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    27ce:	81 e0       	ldi	r24, 0x01	; 1
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	9e 83       	std	Y+6, r25	; 0x06
    27d4:	8d 83       	std	Y+5, r24	; 0x05
    27d6:	3f c0       	rjmp	.+126    	; 0x2856 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    27d8:	6f 81       	ldd	r22, Y+7	; 0x07
    27da:	78 85       	ldd	r23, Y+8	; 0x08
    27dc:	89 85       	ldd	r24, Y+9	; 0x09
    27de:	9a 85       	ldd	r25, Y+10	; 0x0a
    27e0:	20 e0       	ldi	r18, 0x00	; 0
    27e2:	3f ef       	ldi	r19, 0xFF	; 255
    27e4:	4f e7       	ldi	r20, 0x7F	; 127
    27e6:	57 e4       	ldi	r21, 0x47	; 71
    27e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27ec:	18 16       	cp	r1, r24
    27ee:	4c f5       	brge	.+82     	; 0x2842 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    27f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    27f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    27f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	40 e2       	ldi	r20, 0x20	; 32
    27fe:	51 e4       	ldi	r21, 0x41	; 65
    2800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2804:	dc 01       	movw	r26, r24
    2806:	cb 01       	movw	r24, r22
    2808:	bc 01       	movw	r22, r24
    280a:	cd 01       	movw	r24, r26
    280c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2810:	dc 01       	movw	r26, r24
    2812:	cb 01       	movw	r24, r22
    2814:	9e 83       	std	Y+6, r25	; 0x06
    2816:	8d 83       	std	Y+5, r24	; 0x05
    2818:	0f c0       	rjmp	.+30     	; 0x2838 <KEYPAD_getPressedKey+0x186>
    281a:	88 ec       	ldi	r24, 0xC8	; 200
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	9c 83       	std	Y+4, r25	; 0x04
    2820:	8b 83       	std	Y+3, r24	; 0x03
    2822:	8b 81       	ldd	r24, Y+3	; 0x03
    2824:	9c 81       	ldd	r25, Y+4	; 0x04
    2826:	01 97       	sbiw	r24, 0x01	; 1
    2828:	f1 f7       	brne	.-4      	; 0x2826 <KEYPAD_getPressedKey+0x174>
    282a:	9c 83       	std	Y+4, r25	; 0x04
    282c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    282e:	8d 81       	ldd	r24, Y+5	; 0x05
    2830:	9e 81       	ldd	r25, Y+6	; 0x06
    2832:	01 97       	sbiw	r24, 0x01	; 1
    2834:	9e 83       	std	Y+6, r25	; 0x06
    2836:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2838:	8d 81       	ldd	r24, Y+5	; 0x05
    283a:	9e 81       	ldd	r25, Y+6	; 0x06
    283c:	00 97       	sbiw	r24, 0x00	; 0
    283e:	69 f7       	brne	.-38     	; 0x281a <KEYPAD_getPressedKey+0x168>
    2840:	14 c0       	rjmp	.+40     	; 0x286a <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2842:	6f 81       	ldd	r22, Y+7	; 0x07
    2844:	78 85       	ldd	r23, Y+8	; 0x08
    2846:	89 85       	ldd	r24, Y+9	; 0x09
    2848:	9a 85       	ldd	r25, Y+10	; 0x0a
    284a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    284e:	dc 01       	movw	r26, r24
    2850:	cb 01       	movw	r24, r22
    2852:	9e 83       	std	Y+6, r25	; 0x06
    2854:	8d 83       	std	Y+5, r24	; 0x05
    2856:	8d 81       	ldd	r24, Y+5	; 0x05
    2858:	9e 81       	ldd	r25, Y+6	; 0x06
    285a:	9a 83       	std	Y+2, r25	; 0x02
    285c:	89 83       	std	Y+1, r24	; 0x01
    285e:	89 81       	ldd	r24, Y+1	; 0x01
    2860:	9a 81       	ldd	r25, Y+2	; 0x02
    2862:	01 97       	sbiw	r24, 0x01	; 1
    2864:	f1 f7       	brne	.-4      	; 0x2862 <KEYPAD_getPressedKey+0x1b0>
    2866:	9a 83       	std	Y+2, r25	; 0x02
    2868:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    286a:	8f 85       	ldd	r24, Y+15	; 0x0f
    286c:	8f 5f       	subi	r24, 0xFF	; 255
    286e:	8f 87       	std	Y+15, r24	; 0x0f
    2870:	8f 85       	ldd	r24, Y+15	; 0x0f
    2872:	84 30       	cpi	r24, 0x04	; 4
    2874:	08 f4       	brcc	.+2      	; 0x2878 <KEYPAD_getPressedKey+0x1c6>
    2876:	51 cf       	rjmp	.-350    	; 0x271a <KEYPAD_getPressedKey+0x68>
    2878:	4e cf       	rjmp	.-356    	; 0x2716 <KEYPAD_getPressedKey+0x64>

0000287a <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    287a:	df 93       	push	r29
    287c:	cf 93       	push	r28
    287e:	00 d0       	rcall	.+0      	; 0x2880 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2880:	00 d0       	rcall	.+0      	; 0x2882 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2882:	cd b7       	in	r28, 0x3d	; 61
    2884:	de b7       	in	r29, 0x3e	; 62
    2886:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2888:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    288a:	8a 81       	ldd	r24, Y+2	; 0x02
    288c:	28 2f       	mov	r18, r24
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	3c 83       	std	Y+4, r19	; 0x04
    2892:	2b 83       	std	Y+3, r18	; 0x03
    2894:	8b 81       	ldd	r24, Y+3	; 0x03
    2896:	9c 81       	ldd	r25, Y+4	; 0x04
    2898:	88 30       	cpi	r24, 0x08	; 8
    289a:	91 05       	cpc	r25, r1
    289c:	09 f4       	brne	.+2      	; 0x28a0 <KEYPAD_4x4_adjustKeyNumber+0x26>
    289e:	70 c0       	rjmp	.+224    	; 0x2980 <KEYPAD_4x4_adjustKeyNumber+0x106>
    28a0:	2b 81       	ldd	r18, Y+3	; 0x03
    28a2:	3c 81       	ldd	r19, Y+4	; 0x04
    28a4:	29 30       	cpi	r18, 0x09	; 9
    28a6:	31 05       	cpc	r19, r1
    28a8:	5c f5       	brge	.+86     	; 0x2900 <KEYPAD_4x4_adjustKeyNumber+0x86>
    28aa:	8b 81       	ldd	r24, Y+3	; 0x03
    28ac:	9c 81       	ldd	r25, Y+4	; 0x04
    28ae:	84 30       	cpi	r24, 0x04	; 4
    28b0:	91 05       	cpc	r25, r1
    28b2:	09 f4       	brne	.+2      	; 0x28b6 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    28b4:	59 c0       	rjmp	.+178    	; 0x2968 <KEYPAD_4x4_adjustKeyNumber+0xee>
    28b6:	2b 81       	ldd	r18, Y+3	; 0x03
    28b8:	3c 81       	ldd	r19, Y+4	; 0x04
    28ba:	25 30       	cpi	r18, 0x05	; 5
    28bc:	31 05       	cpc	r19, r1
    28be:	9c f4       	brge	.+38     	; 0x28e6 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    28c0:	8b 81       	ldd	r24, Y+3	; 0x03
    28c2:	9c 81       	ldd	r25, Y+4	; 0x04
    28c4:	82 30       	cpi	r24, 0x02	; 2
    28c6:	91 05       	cpc	r25, r1
    28c8:	09 f4       	brne	.+2      	; 0x28cc <KEYPAD_4x4_adjustKeyNumber+0x52>
    28ca:	48 c0       	rjmp	.+144    	; 0x295c <KEYPAD_4x4_adjustKeyNumber+0xe2>
    28cc:	2b 81       	ldd	r18, Y+3	; 0x03
    28ce:	3c 81       	ldd	r19, Y+4	; 0x04
    28d0:	23 30       	cpi	r18, 0x03	; 3
    28d2:	31 05       	cpc	r19, r1
    28d4:	0c f0       	brlt	.+2      	; 0x28d8 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    28d6:	45 c0       	rjmp	.+138    	; 0x2962 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    28d8:	8b 81       	ldd	r24, Y+3	; 0x03
    28da:	9c 81       	ldd	r25, Y+4	; 0x04
    28dc:	81 30       	cpi	r24, 0x01	; 1
    28de:	91 05       	cpc	r25, r1
    28e0:	09 f4       	brne	.+2      	; 0x28e4 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    28e2:	39 c0       	rjmp	.+114    	; 0x2956 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    28e4:	67 c0       	rjmp	.+206    	; 0x29b4 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    28e6:	2b 81       	ldd	r18, Y+3	; 0x03
    28e8:	3c 81       	ldd	r19, Y+4	; 0x04
    28ea:	26 30       	cpi	r18, 0x06	; 6
    28ec:	31 05       	cpc	r19, r1
    28ee:	09 f4       	brne	.+2      	; 0x28f2 <KEYPAD_4x4_adjustKeyNumber+0x78>
    28f0:	41 c0       	rjmp	.+130    	; 0x2974 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    28f2:	8b 81       	ldd	r24, Y+3	; 0x03
    28f4:	9c 81       	ldd	r25, Y+4	; 0x04
    28f6:	87 30       	cpi	r24, 0x07	; 7
    28f8:	91 05       	cpc	r25, r1
    28fa:	0c f0       	brlt	.+2      	; 0x28fe <KEYPAD_4x4_adjustKeyNumber+0x84>
    28fc:	3e c0       	rjmp	.+124    	; 0x297a <KEYPAD_4x4_adjustKeyNumber+0x100>
    28fe:	37 c0       	rjmp	.+110    	; 0x296e <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2900:	2b 81       	ldd	r18, Y+3	; 0x03
    2902:	3c 81       	ldd	r19, Y+4	; 0x04
    2904:	2c 30       	cpi	r18, 0x0C	; 12
    2906:	31 05       	cpc	r19, r1
    2908:	09 f4       	brne	.+2      	; 0x290c <KEYPAD_4x4_adjustKeyNumber+0x92>
    290a:	46 c0       	rjmp	.+140    	; 0x2998 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    290c:	8b 81       	ldd	r24, Y+3	; 0x03
    290e:	9c 81       	ldd	r25, Y+4	; 0x04
    2910:	8d 30       	cpi	r24, 0x0D	; 13
    2912:	91 05       	cpc	r25, r1
    2914:	5c f4       	brge	.+22     	; 0x292c <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2916:	2b 81       	ldd	r18, Y+3	; 0x03
    2918:	3c 81       	ldd	r19, Y+4	; 0x04
    291a:	2a 30       	cpi	r18, 0x0A	; 10
    291c:	31 05       	cpc	r19, r1
    291e:	b1 f1       	breq	.+108    	; 0x298c <KEYPAD_4x4_adjustKeyNumber+0x112>
    2920:	8b 81       	ldd	r24, Y+3	; 0x03
    2922:	9c 81       	ldd	r25, Y+4	; 0x04
    2924:	8b 30       	cpi	r24, 0x0B	; 11
    2926:	91 05       	cpc	r25, r1
    2928:	a4 f5       	brge	.+104    	; 0x2992 <KEYPAD_4x4_adjustKeyNumber+0x118>
    292a:	2d c0       	rjmp	.+90     	; 0x2986 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    292c:	2b 81       	ldd	r18, Y+3	; 0x03
    292e:	3c 81       	ldd	r19, Y+4	; 0x04
    2930:	2e 30       	cpi	r18, 0x0E	; 14
    2932:	31 05       	cpc	r19, r1
    2934:	b9 f1       	breq	.+110    	; 0x29a4 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2936:	8b 81       	ldd	r24, Y+3	; 0x03
    2938:	9c 81       	ldd	r25, Y+4	; 0x04
    293a:	8e 30       	cpi	r24, 0x0E	; 14
    293c:	91 05       	cpc	r25, r1
    293e:	7c f1       	brlt	.+94     	; 0x299e <KEYPAD_4x4_adjustKeyNumber+0x124>
    2940:	2b 81       	ldd	r18, Y+3	; 0x03
    2942:	3c 81       	ldd	r19, Y+4	; 0x04
    2944:	2f 30       	cpi	r18, 0x0F	; 15
    2946:	31 05       	cpc	r19, r1
    2948:	79 f1       	breq	.+94     	; 0x29a8 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    294a:	8b 81       	ldd	r24, Y+3	; 0x03
    294c:	9c 81       	ldd	r25, Y+4	; 0x04
    294e:	80 31       	cpi	r24, 0x10	; 16
    2950:	91 05       	cpc	r25, r1
    2952:	69 f1       	breq	.+90     	; 0x29ae <KEYPAD_4x4_adjustKeyNumber+0x134>
    2954:	2f c0       	rjmp	.+94     	; 0x29b4 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2956:	87 e0       	ldi	r24, 0x07	; 7
    2958:	89 83       	std	Y+1, r24	; 0x01
    295a:	2e c0       	rjmp	.+92     	; 0x29b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    295c:	88 e0       	ldi	r24, 0x08	; 8
    295e:	89 83       	std	Y+1, r24	; 0x01
    2960:	2b c0       	rjmp	.+86     	; 0x29b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2962:	89 e0       	ldi	r24, 0x09	; 9
    2964:	89 83       	std	Y+1, r24	; 0x01
    2966:	28 c0       	rjmp	.+80     	; 0x29b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2968:	85 e2       	ldi	r24, 0x25	; 37
    296a:	89 83       	std	Y+1, r24	; 0x01
    296c:	25 c0       	rjmp	.+74     	; 0x29b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    296e:	84 e0       	ldi	r24, 0x04	; 4
    2970:	89 83       	std	Y+1, r24	; 0x01
    2972:	22 c0       	rjmp	.+68     	; 0x29b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2974:	85 e0       	ldi	r24, 0x05	; 5
    2976:	89 83       	std	Y+1, r24	; 0x01
    2978:	1f c0       	rjmp	.+62     	; 0x29b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    297a:	86 e0       	ldi	r24, 0x06	; 6
    297c:	89 83       	std	Y+1, r24	; 0x01
    297e:	1c c0       	rjmp	.+56     	; 0x29b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2980:	8a e2       	ldi	r24, 0x2A	; 42
    2982:	89 83       	std	Y+1, r24	; 0x01
    2984:	19 c0       	rjmp	.+50     	; 0x29b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2986:	81 e0       	ldi	r24, 0x01	; 1
    2988:	89 83       	std	Y+1, r24	; 0x01
    298a:	16 c0       	rjmp	.+44     	; 0x29b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    298c:	82 e0       	ldi	r24, 0x02	; 2
    298e:	89 83       	std	Y+1, r24	; 0x01
    2990:	13 c0       	rjmp	.+38     	; 0x29b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2992:	83 e0       	ldi	r24, 0x03	; 3
    2994:	89 83       	std	Y+1, r24	; 0x01
    2996:	10 c0       	rjmp	.+32     	; 0x29b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2998:	8d e2       	ldi	r24, 0x2D	; 45
    299a:	89 83       	std	Y+1, r24	; 0x01
    299c:	0d c0       	rjmp	.+26     	; 0x29b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    299e:	8d e0       	ldi	r24, 0x0D	; 13
    29a0:	89 83       	std	Y+1, r24	; 0x01
    29a2:	0a c0       	rjmp	.+20     	; 0x29b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    29a4:	19 82       	std	Y+1, r1	; 0x01
    29a6:	08 c0       	rjmp	.+16     	; 0x29b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    29a8:	8d e3       	ldi	r24, 0x3D	; 61
    29aa:	89 83       	std	Y+1, r24	; 0x01
    29ac:	05 c0       	rjmp	.+10     	; 0x29b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    29ae:	8b e2       	ldi	r24, 0x2B	; 43
    29b0:	89 83       	std	Y+1, r24	; 0x01
    29b2:	02 c0       	rjmp	.+4      	; 0x29b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    29b4:	8a 81       	ldd	r24, Y+2	; 0x02
    29b6:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    29b8:	89 81       	ldd	r24, Y+1	; 0x01
} 
    29ba:	0f 90       	pop	r0
    29bc:	0f 90       	pop	r0
    29be:	0f 90       	pop	r0
    29c0:	0f 90       	pop	r0
    29c2:	cf 91       	pop	r28
    29c4:	df 91       	pop	r29
    29c6:	08 95       	ret

000029c8 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    29c8:	df 93       	push	r29
    29ca:	cf 93       	push	r28
    29cc:	cd b7       	in	r28, 0x3d	; 61
    29ce:	de b7       	in	r29, 0x3e	; 62
    29d0:	2e 97       	sbiw	r28, 0x0e	; 14
    29d2:	0f b6       	in	r0, 0x3f	; 63
    29d4:	f8 94       	cli
    29d6:	de bf       	out	0x3e, r29	; 62
    29d8:	0f be       	out	0x3f, r0	; 63
    29da:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    29dc:	82 e0       	ldi	r24, 0x02	; 2
    29de:	60 e0       	ldi	r22, 0x00	; 0
    29e0:	41 e0       	ldi	r20, 0x01	; 1
    29e2:	0e 94 1b 10 	call	0x2036	; 0x2036 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    29e6:	82 e0       	ldi	r24, 0x02	; 2
    29e8:	61 e0       	ldi	r22, 0x01	; 1
    29ea:	41 e0       	ldi	r20, 0x01	; 1
    29ec:	0e 94 1b 10 	call	0x2036	; 0x2036 <GPIO_setupPinDirection>
    29f0:	80 e0       	ldi	r24, 0x00	; 0
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	a0 ea       	ldi	r26, 0xA0	; 160
    29f6:	b1 e4       	ldi	r27, 0x41	; 65
    29f8:	8b 87       	std	Y+11, r24	; 0x0b
    29fa:	9c 87       	std	Y+12, r25	; 0x0c
    29fc:	ad 87       	std	Y+13, r26	; 0x0d
    29fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a00:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a02:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a04:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a06:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a08:	20 e0       	ldi	r18, 0x00	; 0
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	4a ef       	ldi	r20, 0xFA	; 250
    2a0e:	54 e4       	ldi	r21, 0x44	; 68
    2a10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a14:	dc 01       	movw	r26, r24
    2a16:	cb 01       	movw	r24, r22
    2a18:	8f 83       	std	Y+7, r24	; 0x07
    2a1a:	98 87       	std	Y+8, r25	; 0x08
    2a1c:	a9 87       	std	Y+9, r26	; 0x09
    2a1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a20:	6f 81       	ldd	r22, Y+7	; 0x07
    2a22:	78 85       	ldd	r23, Y+8	; 0x08
    2a24:	89 85       	ldd	r24, Y+9	; 0x09
    2a26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a28:	20 e0       	ldi	r18, 0x00	; 0
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	40 e8       	ldi	r20, 0x80	; 128
    2a2e:	5f e3       	ldi	r21, 0x3F	; 63
    2a30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a34:	88 23       	and	r24, r24
    2a36:	2c f4       	brge	.+10     	; 0x2a42 <LCD_init+0x7a>
		__ticks = 1;
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	9e 83       	std	Y+6, r25	; 0x06
    2a3e:	8d 83       	std	Y+5, r24	; 0x05
    2a40:	3f c0       	rjmp	.+126    	; 0x2ac0 <LCD_init+0xf8>
	else if (__tmp > 65535)
    2a42:	6f 81       	ldd	r22, Y+7	; 0x07
    2a44:	78 85       	ldd	r23, Y+8	; 0x08
    2a46:	89 85       	ldd	r24, Y+9	; 0x09
    2a48:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a4a:	20 e0       	ldi	r18, 0x00	; 0
    2a4c:	3f ef       	ldi	r19, 0xFF	; 255
    2a4e:	4f e7       	ldi	r20, 0x7F	; 127
    2a50:	57 e4       	ldi	r21, 0x47	; 71
    2a52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a56:	18 16       	cp	r1, r24
    2a58:	4c f5       	brge	.+82     	; 0x2aac <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a60:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a62:	20 e0       	ldi	r18, 0x00	; 0
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	40 e2       	ldi	r20, 0x20	; 32
    2a68:	51 e4       	ldi	r21, 0x41	; 65
    2a6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	bc 01       	movw	r22, r24
    2a74:	cd 01       	movw	r24, r26
    2a76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a7a:	dc 01       	movw	r26, r24
    2a7c:	cb 01       	movw	r24, r22
    2a7e:	9e 83       	std	Y+6, r25	; 0x06
    2a80:	8d 83       	std	Y+5, r24	; 0x05
    2a82:	0f c0       	rjmp	.+30     	; 0x2aa2 <LCD_init+0xda>
    2a84:	88 ec       	ldi	r24, 0xC8	; 200
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	9c 83       	std	Y+4, r25	; 0x04
    2a8a:	8b 83       	std	Y+3, r24	; 0x03
    2a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a90:	01 97       	sbiw	r24, 0x01	; 1
    2a92:	f1 f7       	brne	.-4      	; 0x2a90 <LCD_init+0xc8>
    2a94:	9c 83       	std	Y+4, r25	; 0x04
    2a96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a98:	8d 81       	ldd	r24, Y+5	; 0x05
    2a9a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a9c:	01 97       	sbiw	r24, 0x01	; 1
    2a9e:	9e 83       	std	Y+6, r25	; 0x06
    2aa0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aa2:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa4:	9e 81       	ldd	r25, Y+6	; 0x06
    2aa6:	00 97       	sbiw	r24, 0x00	; 0
    2aa8:	69 f7       	brne	.-38     	; 0x2a84 <LCD_init+0xbc>
    2aaa:	14 c0       	rjmp	.+40     	; 0x2ad4 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aac:	6f 81       	ldd	r22, Y+7	; 0x07
    2aae:	78 85       	ldd	r23, Y+8	; 0x08
    2ab0:	89 85       	ldd	r24, Y+9	; 0x09
    2ab2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ab4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab8:	dc 01       	movw	r26, r24
    2aba:	cb 01       	movw	r24, r22
    2abc:	9e 83       	std	Y+6, r25	; 0x06
    2abe:	8d 83       	std	Y+5, r24	; 0x05
    2ac0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ac4:	9a 83       	std	Y+2, r25	; 0x02
    2ac6:	89 83       	std	Y+1, r24	; 0x01
    2ac8:	89 81       	ldd	r24, Y+1	; 0x01
    2aca:	9a 81       	ldd	r25, Y+2	; 0x02
    2acc:	01 97       	sbiw	r24, 0x01	; 1
    2ace:	f1 f7       	brne	.-4      	; 0x2acc <LCD_init+0x104>
    2ad0:	9a 83       	std	Y+2, r25	; 0x02
    2ad2:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2ad4:	80 e0       	ldi	r24, 0x00	; 0
    2ad6:	6f ef       	ldi	r22, 0xFF	; 255
    2ad8:	0e 94 8c 12 	call	0x2518	; 0x2518 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2adc:	88 e3       	ldi	r24, 0x38	; 56
    2ade:	0e 94 80 15 	call	0x2b00	; 0x2b00 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2ae2:	8c e0       	ldi	r24, 0x0C	; 12
    2ae4:	0e 94 80 15 	call	0x2b00	; 0x2b00 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2ae8:	81 e0       	ldi	r24, 0x01	; 1
    2aea:	0e 94 80 15 	call	0x2b00	; 0x2b00 <LCD_sendCommand>
}
    2aee:	2e 96       	adiw	r28, 0x0e	; 14
    2af0:	0f b6       	in	r0, 0x3f	; 63
    2af2:	f8 94       	cli
    2af4:	de bf       	out	0x3e, r29	; 62
    2af6:	0f be       	out	0x3f, r0	; 63
    2af8:	cd bf       	out	0x3d, r28	; 61
    2afa:	cf 91       	pop	r28
    2afc:	df 91       	pop	r29
    2afe:	08 95       	ret

00002b00 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2b00:	df 93       	push	r29
    2b02:	cf 93       	push	r28
    2b04:	cd b7       	in	r28, 0x3d	; 61
    2b06:	de b7       	in	r29, 0x3e	; 62
    2b08:	e9 97       	sbiw	r28, 0x39	; 57
    2b0a:	0f b6       	in	r0, 0x3f	; 63
    2b0c:	f8 94       	cli
    2b0e:	de bf       	out	0x3e, r29	; 62
    2b10:	0f be       	out	0x3f, r0	; 63
    2b12:	cd bf       	out	0x3d, r28	; 61
    2b14:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2b16:	82 e0       	ldi	r24, 0x02	; 2
    2b18:	60 e0       	ldi	r22, 0x00	; 0
    2b1a:	40 e0       	ldi	r20, 0x00	; 0
    2b1c:	0e 94 06 11 	call	0x220c	; 0x220c <GPIO_writePin>
    2b20:	80 e0       	ldi	r24, 0x00	; 0
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	a0 e8       	ldi	r26, 0x80	; 128
    2b26:	bf e3       	ldi	r27, 0x3F	; 63
    2b28:	8d ab       	std	Y+53, r24	; 0x35
    2b2a:	9e ab       	std	Y+54, r25	; 0x36
    2b2c:	af ab       	std	Y+55, r26	; 0x37
    2b2e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b30:	6d a9       	ldd	r22, Y+53	; 0x35
    2b32:	7e a9       	ldd	r23, Y+54	; 0x36
    2b34:	8f a9       	ldd	r24, Y+55	; 0x37
    2b36:	98 ad       	ldd	r25, Y+56	; 0x38
    2b38:	20 e0       	ldi	r18, 0x00	; 0
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	4a ef       	ldi	r20, 0xFA	; 250
    2b3e:	54 e4       	ldi	r21, 0x44	; 68
    2b40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b44:	dc 01       	movw	r26, r24
    2b46:	cb 01       	movw	r24, r22
    2b48:	89 ab       	std	Y+49, r24	; 0x31
    2b4a:	9a ab       	std	Y+50, r25	; 0x32
    2b4c:	ab ab       	std	Y+51, r26	; 0x33
    2b4e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b50:	69 a9       	ldd	r22, Y+49	; 0x31
    2b52:	7a a9       	ldd	r23, Y+50	; 0x32
    2b54:	8b a9       	ldd	r24, Y+51	; 0x33
    2b56:	9c a9       	ldd	r25, Y+52	; 0x34
    2b58:	20 e0       	ldi	r18, 0x00	; 0
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	40 e8       	ldi	r20, 0x80	; 128
    2b5e:	5f e3       	ldi	r21, 0x3F	; 63
    2b60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b64:	88 23       	and	r24, r24
    2b66:	2c f4       	brge	.+10     	; 0x2b72 <LCD_sendCommand+0x72>
		__ticks = 1;
    2b68:	81 e0       	ldi	r24, 0x01	; 1
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	98 ab       	std	Y+48, r25	; 0x30
    2b6e:	8f a7       	std	Y+47, r24	; 0x2f
    2b70:	3f c0       	rjmp	.+126    	; 0x2bf0 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2b72:	69 a9       	ldd	r22, Y+49	; 0x31
    2b74:	7a a9       	ldd	r23, Y+50	; 0x32
    2b76:	8b a9       	ldd	r24, Y+51	; 0x33
    2b78:	9c a9       	ldd	r25, Y+52	; 0x34
    2b7a:	20 e0       	ldi	r18, 0x00	; 0
    2b7c:	3f ef       	ldi	r19, 0xFF	; 255
    2b7e:	4f e7       	ldi	r20, 0x7F	; 127
    2b80:	57 e4       	ldi	r21, 0x47	; 71
    2b82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b86:	18 16       	cp	r1, r24
    2b88:	4c f5       	brge	.+82     	; 0x2bdc <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b8a:	6d a9       	ldd	r22, Y+53	; 0x35
    2b8c:	7e a9       	ldd	r23, Y+54	; 0x36
    2b8e:	8f a9       	ldd	r24, Y+55	; 0x37
    2b90:	98 ad       	ldd	r25, Y+56	; 0x38
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	40 e2       	ldi	r20, 0x20	; 32
    2b98:	51 e4       	ldi	r21, 0x41	; 65
    2b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	bc 01       	movw	r22, r24
    2ba4:	cd 01       	movw	r24, r26
    2ba6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2baa:	dc 01       	movw	r26, r24
    2bac:	cb 01       	movw	r24, r22
    2bae:	98 ab       	std	Y+48, r25	; 0x30
    2bb0:	8f a7       	std	Y+47, r24	; 0x2f
    2bb2:	0f c0       	rjmp	.+30     	; 0x2bd2 <LCD_sendCommand+0xd2>
    2bb4:	88 ec       	ldi	r24, 0xC8	; 200
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	9e a7       	std	Y+46, r25	; 0x2e
    2bba:	8d a7       	std	Y+45, r24	; 0x2d
    2bbc:	8d a5       	ldd	r24, Y+45	; 0x2d
    2bbe:	9e a5       	ldd	r25, Y+46	; 0x2e
    2bc0:	01 97       	sbiw	r24, 0x01	; 1
    2bc2:	f1 f7       	brne	.-4      	; 0x2bc0 <LCD_sendCommand+0xc0>
    2bc4:	9e a7       	std	Y+46, r25	; 0x2e
    2bc6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bc8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bca:	98 a9       	ldd	r25, Y+48	; 0x30
    2bcc:	01 97       	sbiw	r24, 0x01	; 1
    2bce:	98 ab       	std	Y+48, r25	; 0x30
    2bd0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bd2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bd4:	98 a9       	ldd	r25, Y+48	; 0x30
    2bd6:	00 97       	sbiw	r24, 0x00	; 0
    2bd8:	69 f7       	brne	.-38     	; 0x2bb4 <LCD_sendCommand+0xb4>
    2bda:	14 c0       	rjmp	.+40     	; 0x2c04 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bdc:	69 a9       	ldd	r22, Y+49	; 0x31
    2bde:	7a a9       	ldd	r23, Y+50	; 0x32
    2be0:	8b a9       	ldd	r24, Y+51	; 0x33
    2be2:	9c a9       	ldd	r25, Y+52	; 0x34
    2be4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be8:	dc 01       	movw	r26, r24
    2bea:	cb 01       	movw	r24, r22
    2bec:	98 ab       	std	Y+48, r25	; 0x30
    2bee:	8f a7       	std	Y+47, r24	; 0x2f
    2bf0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bf2:	98 a9       	ldd	r25, Y+48	; 0x30
    2bf4:	9c a7       	std	Y+44, r25	; 0x2c
    2bf6:	8b a7       	std	Y+43, r24	; 0x2b
    2bf8:	8b a5       	ldd	r24, Y+43	; 0x2b
    2bfa:	9c a5       	ldd	r25, Y+44	; 0x2c
    2bfc:	01 97       	sbiw	r24, 0x01	; 1
    2bfe:	f1 f7       	brne	.-4      	; 0x2bfc <LCD_sendCommand+0xfc>
    2c00:	9c a7       	std	Y+44, r25	; 0x2c
    2c02:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2c04:	82 e0       	ldi	r24, 0x02	; 2
    2c06:	61 e0       	ldi	r22, 0x01	; 1
    2c08:	41 e0       	ldi	r20, 0x01	; 1
    2c0a:	0e 94 06 11 	call	0x220c	; 0x220c <GPIO_writePin>
    2c0e:	80 e0       	ldi	r24, 0x00	; 0
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	a0 e8       	ldi	r26, 0x80	; 128
    2c14:	bf e3       	ldi	r27, 0x3F	; 63
    2c16:	8f a3       	std	Y+39, r24	; 0x27
    2c18:	98 a7       	std	Y+40, r25	; 0x28
    2c1a:	a9 a7       	std	Y+41, r26	; 0x29
    2c1c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c1e:	6f a1       	ldd	r22, Y+39	; 0x27
    2c20:	78 a5       	ldd	r23, Y+40	; 0x28
    2c22:	89 a5       	ldd	r24, Y+41	; 0x29
    2c24:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c26:	20 e0       	ldi	r18, 0x00	; 0
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	4a ef       	ldi	r20, 0xFA	; 250
    2c2c:	54 e4       	ldi	r21, 0x44	; 68
    2c2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c32:	dc 01       	movw	r26, r24
    2c34:	cb 01       	movw	r24, r22
    2c36:	8b a3       	std	Y+35, r24	; 0x23
    2c38:	9c a3       	std	Y+36, r25	; 0x24
    2c3a:	ad a3       	std	Y+37, r26	; 0x25
    2c3c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c3e:	6b a1       	ldd	r22, Y+35	; 0x23
    2c40:	7c a1       	ldd	r23, Y+36	; 0x24
    2c42:	8d a1       	ldd	r24, Y+37	; 0x25
    2c44:	9e a1       	ldd	r25, Y+38	; 0x26
    2c46:	20 e0       	ldi	r18, 0x00	; 0
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	40 e8       	ldi	r20, 0x80	; 128
    2c4c:	5f e3       	ldi	r21, 0x3F	; 63
    2c4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c52:	88 23       	and	r24, r24
    2c54:	2c f4       	brge	.+10     	; 0x2c60 <LCD_sendCommand+0x160>
		__ticks = 1;
    2c56:	81 e0       	ldi	r24, 0x01	; 1
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	9a a3       	std	Y+34, r25	; 0x22
    2c5c:	89 a3       	std	Y+33, r24	; 0x21
    2c5e:	3f c0       	rjmp	.+126    	; 0x2cde <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2c60:	6b a1       	ldd	r22, Y+35	; 0x23
    2c62:	7c a1       	ldd	r23, Y+36	; 0x24
    2c64:	8d a1       	ldd	r24, Y+37	; 0x25
    2c66:	9e a1       	ldd	r25, Y+38	; 0x26
    2c68:	20 e0       	ldi	r18, 0x00	; 0
    2c6a:	3f ef       	ldi	r19, 0xFF	; 255
    2c6c:	4f e7       	ldi	r20, 0x7F	; 127
    2c6e:	57 e4       	ldi	r21, 0x47	; 71
    2c70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c74:	18 16       	cp	r1, r24
    2c76:	4c f5       	brge	.+82     	; 0x2cca <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c78:	6f a1       	ldd	r22, Y+39	; 0x27
    2c7a:	78 a5       	ldd	r23, Y+40	; 0x28
    2c7c:	89 a5       	ldd	r24, Y+41	; 0x29
    2c7e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c80:	20 e0       	ldi	r18, 0x00	; 0
    2c82:	30 e0       	ldi	r19, 0x00	; 0
    2c84:	40 e2       	ldi	r20, 0x20	; 32
    2c86:	51 e4       	ldi	r21, 0x41	; 65
    2c88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c8c:	dc 01       	movw	r26, r24
    2c8e:	cb 01       	movw	r24, r22
    2c90:	bc 01       	movw	r22, r24
    2c92:	cd 01       	movw	r24, r26
    2c94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c98:	dc 01       	movw	r26, r24
    2c9a:	cb 01       	movw	r24, r22
    2c9c:	9a a3       	std	Y+34, r25	; 0x22
    2c9e:	89 a3       	std	Y+33, r24	; 0x21
    2ca0:	0f c0       	rjmp	.+30     	; 0x2cc0 <LCD_sendCommand+0x1c0>
    2ca2:	88 ec       	ldi	r24, 0xC8	; 200
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	98 a3       	std	Y+32, r25	; 0x20
    2ca8:	8f 8f       	std	Y+31, r24	; 0x1f
    2caa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2cac:	98 a1       	ldd	r25, Y+32	; 0x20
    2cae:	01 97       	sbiw	r24, 0x01	; 1
    2cb0:	f1 f7       	brne	.-4      	; 0x2cae <LCD_sendCommand+0x1ae>
    2cb2:	98 a3       	std	Y+32, r25	; 0x20
    2cb4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cb6:	89 a1       	ldd	r24, Y+33	; 0x21
    2cb8:	9a a1       	ldd	r25, Y+34	; 0x22
    2cba:	01 97       	sbiw	r24, 0x01	; 1
    2cbc:	9a a3       	std	Y+34, r25	; 0x22
    2cbe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cc0:	89 a1       	ldd	r24, Y+33	; 0x21
    2cc2:	9a a1       	ldd	r25, Y+34	; 0x22
    2cc4:	00 97       	sbiw	r24, 0x00	; 0
    2cc6:	69 f7       	brne	.-38     	; 0x2ca2 <LCD_sendCommand+0x1a2>
    2cc8:	14 c0       	rjmp	.+40     	; 0x2cf2 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cca:	6b a1       	ldd	r22, Y+35	; 0x23
    2ccc:	7c a1       	ldd	r23, Y+36	; 0x24
    2cce:	8d a1       	ldd	r24, Y+37	; 0x25
    2cd0:	9e a1       	ldd	r25, Y+38	; 0x26
    2cd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd6:	dc 01       	movw	r26, r24
    2cd8:	cb 01       	movw	r24, r22
    2cda:	9a a3       	std	Y+34, r25	; 0x22
    2cdc:	89 a3       	std	Y+33, r24	; 0x21
    2cde:	89 a1       	ldd	r24, Y+33	; 0x21
    2ce0:	9a a1       	ldd	r25, Y+34	; 0x22
    2ce2:	9e 8f       	std	Y+30, r25	; 0x1e
    2ce4:	8d 8f       	std	Y+29, r24	; 0x1d
    2ce6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ce8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cea:	01 97       	sbiw	r24, 0x01	; 1
    2cec:	f1 f7       	brne	.-4      	; 0x2cea <LCD_sendCommand+0x1ea>
    2cee:	9e 8f       	std	Y+30, r25	; 0x1e
    2cf0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2cf2:	80 e0       	ldi	r24, 0x00	; 0
    2cf4:	69 ad       	ldd	r22, Y+57	; 0x39
    2cf6:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <GPIO_writePort>
    2cfa:	80 e0       	ldi	r24, 0x00	; 0
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	a0 e8       	ldi	r26, 0x80	; 128
    2d00:	bf e3       	ldi	r27, 0x3F	; 63
    2d02:	89 8f       	std	Y+25, r24	; 0x19
    2d04:	9a 8f       	std	Y+26, r25	; 0x1a
    2d06:	ab 8f       	std	Y+27, r26	; 0x1b
    2d08:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d0a:	69 8d       	ldd	r22, Y+25	; 0x19
    2d0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d12:	20 e0       	ldi	r18, 0x00	; 0
    2d14:	30 e0       	ldi	r19, 0x00	; 0
    2d16:	4a ef       	ldi	r20, 0xFA	; 250
    2d18:	54 e4       	ldi	r21, 0x44	; 68
    2d1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d1e:	dc 01       	movw	r26, r24
    2d20:	cb 01       	movw	r24, r22
    2d22:	8d 8b       	std	Y+21, r24	; 0x15
    2d24:	9e 8b       	std	Y+22, r25	; 0x16
    2d26:	af 8b       	std	Y+23, r26	; 0x17
    2d28:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d2a:	6d 89       	ldd	r22, Y+21	; 0x15
    2d2c:	7e 89       	ldd	r23, Y+22	; 0x16
    2d2e:	8f 89       	ldd	r24, Y+23	; 0x17
    2d30:	98 8d       	ldd	r25, Y+24	; 0x18
    2d32:	20 e0       	ldi	r18, 0x00	; 0
    2d34:	30 e0       	ldi	r19, 0x00	; 0
    2d36:	40 e8       	ldi	r20, 0x80	; 128
    2d38:	5f e3       	ldi	r21, 0x3F	; 63
    2d3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d3e:	88 23       	and	r24, r24
    2d40:	2c f4       	brge	.+10     	; 0x2d4c <LCD_sendCommand+0x24c>
		__ticks = 1;
    2d42:	81 e0       	ldi	r24, 0x01	; 1
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	9c 8b       	std	Y+20, r25	; 0x14
    2d48:	8b 8b       	std	Y+19, r24	; 0x13
    2d4a:	3f c0       	rjmp	.+126    	; 0x2dca <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2d4c:	6d 89       	ldd	r22, Y+21	; 0x15
    2d4e:	7e 89       	ldd	r23, Y+22	; 0x16
    2d50:	8f 89       	ldd	r24, Y+23	; 0x17
    2d52:	98 8d       	ldd	r25, Y+24	; 0x18
    2d54:	20 e0       	ldi	r18, 0x00	; 0
    2d56:	3f ef       	ldi	r19, 0xFF	; 255
    2d58:	4f e7       	ldi	r20, 0x7F	; 127
    2d5a:	57 e4       	ldi	r21, 0x47	; 71
    2d5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d60:	18 16       	cp	r1, r24
    2d62:	4c f5       	brge	.+82     	; 0x2db6 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d64:	69 8d       	ldd	r22, Y+25	; 0x19
    2d66:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d6c:	20 e0       	ldi	r18, 0x00	; 0
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	40 e2       	ldi	r20, 0x20	; 32
    2d72:	51 e4       	ldi	r21, 0x41	; 65
    2d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d78:	dc 01       	movw	r26, r24
    2d7a:	cb 01       	movw	r24, r22
    2d7c:	bc 01       	movw	r22, r24
    2d7e:	cd 01       	movw	r24, r26
    2d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d84:	dc 01       	movw	r26, r24
    2d86:	cb 01       	movw	r24, r22
    2d88:	9c 8b       	std	Y+20, r25	; 0x14
    2d8a:	8b 8b       	std	Y+19, r24	; 0x13
    2d8c:	0f c0       	rjmp	.+30     	; 0x2dac <LCD_sendCommand+0x2ac>
    2d8e:	88 ec       	ldi	r24, 0xC8	; 200
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	9a 8b       	std	Y+18, r25	; 0x12
    2d94:	89 8b       	std	Y+17, r24	; 0x11
    2d96:	89 89       	ldd	r24, Y+17	; 0x11
    2d98:	9a 89       	ldd	r25, Y+18	; 0x12
    2d9a:	01 97       	sbiw	r24, 0x01	; 1
    2d9c:	f1 f7       	brne	.-4      	; 0x2d9a <LCD_sendCommand+0x29a>
    2d9e:	9a 8b       	std	Y+18, r25	; 0x12
    2da0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2da2:	8b 89       	ldd	r24, Y+19	; 0x13
    2da4:	9c 89       	ldd	r25, Y+20	; 0x14
    2da6:	01 97       	sbiw	r24, 0x01	; 1
    2da8:	9c 8b       	std	Y+20, r25	; 0x14
    2daa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dac:	8b 89       	ldd	r24, Y+19	; 0x13
    2dae:	9c 89       	ldd	r25, Y+20	; 0x14
    2db0:	00 97       	sbiw	r24, 0x00	; 0
    2db2:	69 f7       	brne	.-38     	; 0x2d8e <LCD_sendCommand+0x28e>
    2db4:	14 c0       	rjmp	.+40     	; 0x2dde <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2db6:	6d 89       	ldd	r22, Y+21	; 0x15
    2db8:	7e 89       	ldd	r23, Y+22	; 0x16
    2dba:	8f 89       	ldd	r24, Y+23	; 0x17
    2dbc:	98 8d       	ldd	r25, Y+24	; 0x18
    2dbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc2:	dc 01       	movw	r26, r24
    2dc4:	cb 01       	movw	r24, r22
    2dc6:	9c 8b       	std	Y+20, r25	; 0x14
    2dc8:	8b 8b       	std	Y+19, r24	; 0x13
    2dca:	8b 89       	ldd	r24, Y+19	; 0x13
    2dcc:	9c 89       	ldd	r25, Y+20	; 0x14
    2dce:	98 8b       	std	Y+16, r25	; 0x10
    2dd0:	8f 87       	std	Y+15, r24	; 0x0f
    2dd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dd4:	98 89       	ldd	r25, Y+16	; 0x10
    2dd6:	01 97       	sbiw	r24, 0x01	; 1
    2dd8:	f1 f7       	brne	.-4      	; 0x2dd6 <LCD_sendCommand+0x2d6>
    2dda:	98 8b       	std	Y+16, r25	; 0x10
    2ddc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2dde:	82 e0       	ldi	r24, 0x02	; 2
    2de0:	61 e0       	ldi	r22, 0x01	; 1
    2de2:	40 e0       	ldi	r20, 0x00	; 0
    2de4:	0e 94 06 11 	call	0x220c	; 0x220c <GPIO_writePin>
    2de8:	80 e0       	ldi	r24, 0x00	; 0
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	a0 e8       	ldi	r26, 0x80	; 128
    2dee:	bf e3       	ldi	r27, 0x3F	; 63
    2df0:	8b 87       	std	Y+11, r24	; 0x0b
    2df2:	9c 87       	std	Y+12, r25	; 0x0c
    2df4:	ad 87       	std	Y+13, r26	; 0x0d
    2df6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2df8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dfa:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dfc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dfe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e00:	20 e0       	ldi	r18, 0x00	; 0
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	4a ef       	ldi	r20, 0xFA	; 250
    2e06:	54 e4       	ldi	r21, 0x44	; 68
    2e08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e0c:	dc 01       	movw	r26, r24
    2e0e:	cb 01       	movw	r24, r22
    2e10:	8f 83       	std	Y+7, r24	; 0x07
    2e12:	98 87       	std	Y+8, r25	; 0x08
    2e14:	a9 87       	std	Y+9, r26	; 0x09
    2e16:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e18:	6f 81       	ldd	r22, Y+7	; 0x07
    2e1a:	78 85       	ldd	r23, Y+8	; 0x08
    2e1c:	89 85       	ldd	r24, Y+9	; 0x09
    2e1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e20:	20 e0       	ldi	r18, 0x00	; 0
    2e22:	30 e0       	ldi	r19, 0x00	; 0
    2e24:	40 e8       	ldi	r20, 0x80	; 128
    2e26:	5f e3       	ldi	r21, 0x3F	; 63
    2e28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e2c:	88 23       	and	r24, r24
    2e2e:	2c f4       	brge	.+10     	; 0x2e3a <LCD_sendCommand+0x33a>
		__ticks = 1;
    2e30:	81 e0       	ldi	r24, 0x01	; 1
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	9e 83       	std	Y+6, r25	; 0x06
    2e36:	8d 83       	std	Y+5, r24	; 0x05
    2e38:	3f c0       	rjmp	.+126    	; 0x2eb8 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2e3a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e3c:	78 85       	ldd	r23, Y+8	; 0x08
    2e3e:	89 85       	ldd	r24, Y+9	; 0x09
    2e40:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e42:	20 e0       	ldi	r18, 0x00	; 0
    2e44:	3f ef       	ldi	r19, 0xFF	; 255
    2e46:	4f e7       	ldi	r20, 0x7F	; 127
    2e48:	57 e4       	ldi	r21, 0x47	; 71
    2e4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e4e:	18 16       	cp	r1, r24
    2e50:	4c f5       	brge	.+82     	; 0x2ea4 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e52:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e54:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e56:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e58:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e5a:	20 e0       	ldi	r18, 0x00	; 0
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	40 e2       	ldi	r20, 0x20	; 32
    2e60:	51 e4       	ldi	r21, 0x41	; 65
    2e62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e66:	dc 01       	movw	r26, r24
    2e68:	cb 01       	movw	r24, r22
    2e6a:	bc 01       	movw	r22, r24
    2e6c:	cd 01       	movw	r24, r26
    2e6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e72:	dc 01       	movw	r26, r24
    2e74:	cb 01       	movw	r24, r22
    2e76:	9e 83       	std	Y+6, r25	; 0x06
    2e78:	8d 83       	std	Y+5, r24	; 0x05
    2e7a:	0f c0       	rjmp	.+30     	; 0x2e9a <LCD_sendCommand+0x39a>
    2e7c:	88 ec       	ldi	r24, 0xC8	; 200
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	9c 83       	std	Y+4, r25	; 0x04
    2e82:	8b 83       	std	Y+3, r24	; 0x03
    2e84:	8b 81       	ldd	r24, Y+3	; 0x03
    2e86:	9c 81       	ldd	r25, Y+4	; 0x04
    2e88:	01 97       	sbiw	r24, 0x01	; 1
    2e8a:	f1 f7       	brne	.-4      	; 0x2e88 <LCD_sendCommand+0x388>
    2e8c:	9c 83       	std	Y+4, r25	; 0x04
    2e8e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e90:	8d 81       	ldd	r24, Y+5	; 0x05
    2e92:	9e 81       	ldd	r25, Y+6	; 0x06
    2e94:	01 97       	sbiw	r24, 0x01	; 1
    2e96:	9e 83       	std	Y+6, r25	; 0x06
    2e98:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e9e:	00 97       	sbiw	r24, 0x00	; 0
    2ea0:	69 f7       	brne	.-38     	; 0x2e7c <LCD_sendCommand+0x37c>
    2ea2:	14 c0       	rjmp	.+40     	; 0x2ecc <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ea4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ea6:	78 85       	ldd	r23, Y+8	; 0x08
    2ea8:	89 85       	ldd	r24, Y+9	; 0x09
    2eaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb0:	dc 01       	movw	r26, r24
    2eb2:	cb 01       	movw	r24, r22
    2eb4:	9e 83       	std	Y+6, r25	; 0x06
    2eb6:	8d 83       	std	Y+5, r24	; 0x05
    2eb8:	8d 81       	ldd	r24, Y+5	; 0x05
    2eba:	9e 81       	ldd	r25, Y+6	; 0x06
    2ebc:	9a 83       	std	Y+2, r25	; 0x02
    2ebe:	89 83       	std	Y+1, r24	; 0x01
    2ec0:	89 81       	ldd	r24, Y+1	; 0x01
    2ec2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ec4:	01 97       	sbiw	r24, 0x01	; 1
    2ec6:	f1 f7       	brne	.-4      	; 0x2ec4 <LCD_sendCommand+0x3c4>
    2ec8:	9a 83       	std	Y+2, r25	; 0x02
    2eca:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2ecc:	e9 96       	adiw	r28, 0x39	; 57
    2ece:	0f b6       	in	r0, 0x3f	; 63
    2ed0:	f8 94       	cli
    2ed2:	de bf       	out	0x3e, r29	; 62
    2ed4:	0f be       	out	0x3f, r0	; 63
    2ed6:	cd bf       	out	0x3d, r28	; 61
    2ed8:	cf 91       	pop	r28
    2eda:	df 91       	pop	r29
    2edc:	08 95       	ret

00002ede <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2ede:	df 93       	push	r29
    2ee0:	cf 93       	push	r28
    2ee2:	cd b7       	in	r28, 0x3d	; 61
    2ee4:	de b7       	in	r29, 0x3e	; 62
    2ee6:	e9 97       	sbiw	r28, 0x39	; 57
    2ee8:	0f b6       	in	r0, 0x3f	; 63
    2eea:	f8 94       	cli
    2eec:	de bf       	out	0x3e, r29	; 62
    2eee:	0f be       	out	0x3f, r0	; 63
    2ef0:	cd bf       	out	0x3d, r28	; 61
    2ef2:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2ef4:	82 e0       	ldi	r24, 0x02	; 2
    2ef6:	60 e0       	ldi	r22, 0x00	; 0
    2ef8:	41 e0       	ldi	r20, 0x01	; 1
    2efa:	0e 94 06 11 	call	0x220c	; 0x220c <GPIO_writePin>
    2efe:	80 e0       	ldi	r24, 0x00	; 0
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	a0 e8       	ldi	r26, 0x80	; 128
    2f04:	bf e3       	ldi	r27, 0x3F	; 63
    2f06:	8d ab       	std	Y+53, r24	; 0x35
    2f08:	9e ab       	std	Y+54, r25	; 0x36
    2f0a:	af ab       	std	Y+55, r26	; 0x37
    2f0c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f0e:	6d a9       	ldd	r22, Y+53	; 0x35
    2f10:	7e a9       	ldd	r23, Y+54	; 0x36
    2f12:	8f a9       	ldd	r24, Y+55	; 0x37
    2f14:	98 ad       	ldd	r25, Y+56	; 0x38
    2f16:	20 e0       	ldi	r18, 0x00	; 0
    2f18:	30 e0       	ldi	r19, 0x00	; 0
    2f1a:	4a ef       	ldi	r20, 0xFA	; 250
    2f1c:	54 e4       	ldi	r21, 0x44	; 68
    2f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f22:	dc 01       	movw	r26, r24
    2f24:	cb 01       	movw	r24, r22
    2f26:	89 ab       	std	Y+49, r24	; 0x31
    2f28:	9a ab       	std	Y+50, r25	; 0x32
    2f2a:	ab ab       	std	Y+51, r26	; 0x33
    2f2c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f2e:	69 a9       	ldd	r22, Y+49	; 0x31
    2f30:	7a a9       	ldd	r23, Y+50	; 0x32
    2f32:	8b a9       	ldd	r24, Y+51	; 0x33
    2f34:	9c a9       	ldd	r25, Y+52	; 0x34
    2f36:	20 e0       	ldi	r18, 0x00	; 0
    2f38:	30 e0       	ldi	r19, 0x00	; 0
    2f3a:	40 e8       	ldi	r20, 0x80	; 128
    2f3c:	5f e3       	ldi	r21, 0x3F	; 63
    2f3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f42:	88 23       	and	r24, r24
    2f44:	2c f4       	brge	.+10     	; 0x2f50 <LCD_displayCharacter+0x72>
		__ticks = 1;
    2f46:	81 e0       	ldi	r24, 0x01	; 1
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	98 ab       	std	Y+48, r25	; 0x30
    2f4c:	8f a7       	std	Y+47, r24	; 0x2f
    2f4e:	3f c0       	rjmp	.+126    	; 0x2fce <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2f50:	69 a9       	ldd	r22, Y+49	; 0x31
    2f52:	7a a9       	ldd	r23, Y+50	; 0x32
    2f54:	8b a9       	ldd	r24, Y+51	; 0x33
    2f56:	9c a9       	ldd	r25, Y+52	; 0x34
    2f58:	20 e0       	ldi	r18, 0x00	; 0
    2f5a:	3f ef       	ldi	r19, 0xFF	; 255
    2f5c:	4f e7       	ldi	r20, 0x7F	; 127
    2f5e:	57 e4       	ldi	r21, 0x47	; 71
    2f60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f64:	18 16       	cp	r1, r24
    2f66:	4c f5       	brge	.+82     	; 0x2fba <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f68:	6d a9       	ldd	r22, Y+53	; 0x35
    2f6a:	7e a9       	ldd	r23, Y+54	; 0x36
    2f6c:	8f a9       	ldd	r24, Y+55	; 0x37
    2f6e:	98 ad       	ldd	r25, Y+56	; 0x38
    2f70:	20 e0       	ldi	r18, 0x00	; 0
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	40 e2       	ldi	r20, 0x20	; 32
    2f76:	51 e4       	ldi	r21, 0x41	; 65
    2f78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f7c:	dc 01       	movw	r26, r24
    2f7e:	cb 01       	movw	r24, r22
    2f80:	bc 01       	movw	r22, r24
    2f82:	cd 01       	movw	r24, r26
    2f84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f88:	dc 01       	movw	r26, r24
    2f8a:	cb 01       	movw	r24, r22
    2f8c:	98 ab       	std	Y+48, r25	; 0x30
    2f8e:	8f a7       	std	Y+47, r24	; 0x2f
    2f90:	0f c0       	rjmp	.+30     	; 0x2fb0 <LCD_displayCharacter+0xd2>
    2f92:	88 ec       	ldi	r24, 0xC8	; 200
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	9e a7       	std	Y+46, r25	; 0x2e
    2f98:	8d a7       	std	Y+45, r24	; 0x2d
    2f9a:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f9c:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f9e:	01 97       	sbiw	r24, 0x01	; 1
    2fa0:	f1 f7       	brne	.-4      	; 0x2f9e <LCD_displayCharacter+0xc0>
    2fa2:	9e a7       	std	Y+46, r25	; 0x2e
    2fa4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fa6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fa8:	98 a9       	ldd	r25, Y+48	; 0x30
    2faa:	01 97       	sbiw	r24, 0x01	; 1
    2fac:	98 ab       	std	Y+48, r25	; 0x30
    2fae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fb0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fb2:	98 a9       	ldd	r25, Y+48	; 0x30
    2fb4:	00 97       	sbiw	r24, 0x00	; 0
    2fb6:	69 f7       	brne	.-38     	; 0x2f92 <LCD_displayCharacter+0xb4>
    2fb8:	14 c0       	rjmp	.+40     	; 0x2fe2 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fba:	69 a9       	ldd	r22, Y+49	; 0x31
    2fbc:	7a a9       	ldd	r23, Y+50	; 0x32
    2fbe:	8b a9       	ldd	r24, Y+51	; 0x33
    2fc0:	9c a9       	ldd	r25, Y+52	; 0x34
    2fc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc6:	dc 01       	movw	r26, r24
    2fc8:	cb 01       	movw	r24, r22
    2fca:	98 ab       	std	Y+48, r25	; 0x30
    2fcc:	8f a7       	std	Y+47, r24	; 0x2f
    2fce:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fd0:	98 a9       	ldd	r25, Y+48	; 0x30
    2fd2:	9c a7       	std	Y+44, r25	; 0x2c
    2fd4:	8b a7       	std	Y+43, r24	; 0x2b
    2fd6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fd8:	9c a5       	ldd	r25, Y+44	; 0x2c
    2fda:	01 97       	sbiw	r24, 0x01	; 1
    2fdc:	f1 f7       	brne	.-4      	; 0x2fda <LCD_displayCharacter+0xfc>
    2fde:	9c a7       	std	Y+44, r25	; 0x2c
    2fe0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2fe2:	82 e0       	ldi	r24, 0x02	; 2
    2fe4:	61 e0       	ldi	r22, 0x01	; 1
    2fe6:	41 e0       	ldi	r20, 0x01	; 1
    2fe8:	0e 94 06 11 	call	0x220c	; 0x220c <GPIO_writePin>
    2fec:	80 e0       	ldi	r24, 0x00	; 0
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	a0 e8       	ldi	r26, 0x80	; 128
    2ff2:	bf e3       	ldi	r27, 0x3F	; 63
    2ff4:	8f a3       	std	Y+39, r24	; 0x27
    2ff6:	98 a7       	std	Y+40, r25	; 0x28
    2ff8:	a9 a7       	std	Y+41, r26	; 0x29
    2ffa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ffc:	6f a1       	ldd	r22, Y+39	; 0x27
    2ffe:	78 a5       	ldd	r23, Y+40	; 0x28
    3000:	89 a5       	ldd	r24, Y+41	; 0x29
    3002:	9a a5       	ldd	r25, Y+42	; 0x2a
    3004:	20 e0       	ldi	r18, 0x00	; 0
    3006:	30 e0       	ldi	r19, 0x00	; 0
    3008:	4a ef       	ldi	r20, 0xFA	; 250
    300a:	54 e4       	ldi	r21, 0x44	; 68
    300c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3010:	dc 01       	movw	r26, r24
    3012:	cb 01       	movw	r24, r22
    3014:	8b a3       	std	Y+35, r24	; 0x23
    3016:	9c a3       	std	Y+36, r25	; 0x24
    3018:	ad a3       	std	Y+37, r26	; 0x25
    301a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    301c:	6b a1       	ldd	r22, Y+35	; 0x23
    301e:	7c a1       	ldd	r23, Y+36	; 0x24
    3020:	8d a1       	ldd	r24, Y+37	; 0x25
    3022:	9e a1       	ldd	r25, Y+38	; 0x26
    3024:	20 e0       	ldi	r18, 0x00	; 0
    3026:	30 e0       	ldi	r19, 0x00	; 0
    3028:	40 e8       	ldi	r20, 0x80	; 128
    302a:	5f e3       	ldi	r21, 0x3F	; 63
    302c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3030:	88 23       	and	r24, r24
    3032:	2c f4       	brge	.+10     	; 0x303e <LCD_displayCharacter+0x160>
		__ticks = 1;
    3034:	81 e0       	ldi	r24, 0x01	; 1
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	9a a3       	std	Y+34, r25	; 0x22
    303a:	89 a3       	std	Y+33, r24	; 0x21
    303c:	3f c0       	rjmp	.+126    	; 0x30bc <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    303e:	6b a1       	ldd	r22, Y+35	; 0x23
    3040:	7c a1       	ldd	r23, Y+36	; 0x24
    3042:	8d a1       	ldd	r24, Y+37	; 0x25
    3044:	9e a1       	ldd	r25, Y+38	; 0x26
    3046:	20 e0       	ldi	r18, 0x00	; 0
    3048:	3f ef       	ldi	r19, 0xFF	; 255
    304a:	4f e7       	ldi	r20, 0x7F	; 127
    304c:	57 e4       	ldi	r21, 0x47	; 71
    304e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3052:	18 16       	cp	r1, r24
    3054:	4c f5       	brge	.+82     	; 0x30a8 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3056:	6f a1       	ldd	r22, Y+39	; 0x27
    3058:	78 a5       	ldd	r23, Y+40	; 0x28
    305a:	89 a5       	ldd	r24, Y+41	; 0x29
    305c:	9a a5       	ldd	r25, Y+42	; 0x2a
    305e:	20 e0       	ldi	r18, 0x00	; 0
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	40 e2       	ldi	r20, 0x20	; 32
    3064:	51 e4       	ldi	r21, 0x41	; 65
    3066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    306a:	dc 01       	movw	r26, r24
    306c:	cb 01       	movw	r24, r22
    306e:	bc 01       	movw	r22, r24
    3070:	cd 01       	movw	r24, r26
    3072:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3076:	dc 01       	movw	r26, r24
    3078:	cb 01       	movw	r24, r22
    307a:	9a a3       	std	Y+34, r25	; 0x22
    307c:	89 a3       	std	Y+33, r24	; 0x21
    307e:	0f c0       	rjmp	.+30     	; 0x309e <LCD_displayCharacter+0x1c0>
    3080:	88 ec       	ldi	r24, 0xC8	; 200
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	98 a3       	std	Y+32, r25	; 0x20
    3086:	8f 8f       	std	Y+31, r24	; 0x1f
    3088:	8f 8d       	ldd	r24, Y+31	; 0x1f
    308a:	98 a1       	ldd	r25, Y+32	; 0x20
    308c:	01 97       	sbiw	r24, 0x01	; 1
    308e:	f1 f7       	brne	.-4      	; 0x308c <LCD_displayCharacter+0x1ae>
    3090:	98 a3       	std	Y+32, r25	; 0x20
    3092:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3094:	89 a1       	ldd	r24, Y+33	; 0x21
    3096:	9a a1       	ldd	r25, Y+34	; 0x22
    3098:	01 97       	sbiw	r24, 0x01	; 1
    309a:	9a a3       	std	Y+34, r25	; 0x22
    309c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    309e:	89 a1       	ldd	r24, Y+33	; 0x21
    30a0:	9a a1       	ldd	r25, Y+34	; 0x22
    30a2:	00 97       	sbiw	r24, 0x00	; 0
    30a4:	69 f7       	brne	.-38     	; 0x3080 <LCD_displayCharacter+0x1a2>
    30a6:	14 c0       	rjmp	.+40     	; 0x30d0 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30a8:	6b a1       	ldd	r22, Y+35	; 0x23
    30aa:	7c a1       	ldd	r23, Y+36	; 0x24
    30ac:	8d a1       	ldd	r24, Y+37	; 0x25
    30ae:	9e a1       	ldd	r25, Y+38	; 0x26
    30b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b4:	dc 01       	movw	r26, r24
    30b6:	cb 01       	movw	r24, r22
    30b8:	9a a3       	std	Y+34, r25	; 0x22
    30ba:	89 a3       	std	Y+33, r24	; 0x21
    30bc:	89 a1       	ldd	r24, Y+33	; 0x21
    30be:	9a a1       	ldd	r25, Y+34	; 0x22
    30c0:	9e 8f       	std	Y+30, r25	; 0x1e
    30c2:	8d 8f       	std	Y+29, r24	; 0x1d
    30c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30c8:	01 97       	sbiw	r24, 0x01	; 1
    30ca:	f1 f7       	brne	.-4      	; 0x30c8 <LCD_displayCharacter+0x1ea>
    30cc:	9e 8f       	std	Y+30, r25	; 0x1e
    30ce:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    30d0:	80 e0       	ldi	r24, 0x00	; 0
    30d2:	69 ad       	ldd	r22, Y+57	; 0x39
    30d4:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <GPIO_writePort>
    30d8:	80 e0       	ldi	r24, 0x00	; 0
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	a0 e8       	ldi	r26, 0x80	; 128
    30de:	bf e3       	ldi	r27, 0x3F	; 63
    30e0:	89 8f       	std	Y+25, r24	; 0x19
    30e2:	9a 8f       	std	Y+26, r25	; 0x1a
    30e4:	ab 8f       	std	Y+27, r26	; 0x1b
    30e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30e8:	69 8d       	ldd	r22, Y+25	; 0x19
    30ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30f0:	20 e0       	ldi	r18, 0x00	; 0
    30f2:	30 e0       	ldi	r19, 0x00	; 0
    30f4:	4a ef       	ldi	r20, 0xFA	; 250
    30f6:	54 e4       	ldi	r21, 0x44	; 68
    30f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30fc:	dc 01       	movw	r26, r24
    30fe:	cb 01       	movw	r24, r22
    3100:	8d 8b       	std	Y+21, r24	; 0x15
    3102:	9e 8b       	std	Y+22, r25	; 0x16
    3104:	af 8b       	std	Y+23, r26	; 0x17
    3106:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3108:	6d 89       	ldd	r22, Y+21	; 0x15
    310a:	7e 89       	ldd	r23, Y+22	; 0x16
    310c:	8f 89       	ldd	r24, Y+23	; 0x17
    310e:	98 8d       	ldd	r25, Y+24	; 0x18
    3110:	20 e0       	ldi	r18, 0x00	; 0
    3112:	30 e0       	ldi	r19, 0x00	; 0
    3114:	40 e8       	ldi	r20, 0x80	; 128
    3116:	5f e3       	ldi	r21, 0x3F	; 63
    3118:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    311c:	88 23       	and	r24, r24
    311e:	2c f4       	brge	.+10     	; 0x312a <LCD_displayCharacter+0x24c>
		__ticks = 1;
    3120:	81 e0       	ldi	r24, 0x01	; 1
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	9c 8b       	std	Y+20, r25	; 0x14
    3126:	8b 8b       	std	Y+19, r24	; 0x13
    3128:	3f c0       	rjmp	.+126    	; 0x31a8 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    312a:	6d 89       	ldd	r22, Y+21	; 0x15
    312c:	7e 89       	ldd	r23, Y+22	; 0x16
    312e:	8f 89       	ldd	r24, Y+23	; 0x17
    3130:	98 8d       	ldd	r25, Y+24	; 0x18
    3132:	20 e0       	ldi	r18, 0x00	; 0
    3134:	3f ef       	ldi	r19, 0xFF	; 255
    3136:	4f e7       	ldi	r20, 0x7F	; 127
    3138:	57 e4       	ldi	r21, 0x47	; 71
    313a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    313e:	18 16       	cp	r1, r24
    3140:	4c f5       	brge	.+82     	; 0x3194 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3142:	69 8d       	ldd	r22, Y+25	; 0x19
    3144:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3146:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3148:	9c 8d       	ldd	r25, Y+28	; 0x1c
    314a:	20 e0       	ldi	r18, 0x00	; 0
    314c:	30 e0       	ldi	r19, 0x00	; 0
    314e:	40 e2       	ldi	r20, 0x20	; 32
    3150:	51 e4       	ldi	r21, 0x41	; 65
    3152:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3156:	dc 01       	movw	r26, r24
    3158:	cb 01       	movw	r24, r22
    315a:	bc 01       	movw	r22, r24
    315c:	cd 01       	movw	r24, r26
    315e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3162:	dc 01       	movw	r26, r24
    3164:	cb 01       	movw	r24, r22
    3166:	9c 8b       	std	Y+20, r25	; 0x14
    3168:	8b 8b       	std	Y+19, r24	; 0x13
    316a:	0f c0       	rjmp	.+30     	; 0x318a <LCD_displayCharacter+0x2ac>
    316c:	88 ec       	ldi	r24, 0xC8	; 200
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	9a 8b       	std	Y+18, r25	; 0x12
    3172:	89 8b       	std	Y+17, r24	; 0x11
    3174:	89 89       	ldd	r24, Y+17	; 0x11
    3176:	9a 89       	ldd	r25, Y+18	; 0x12
    3178:	01 97       	sbiw	r24, 0x01	; 1
    317a:	f1 f7       	brne	.-4      	; 0x3178 <LCD_displayCharacter+0x29a>
    317c:	9a 8b       	std	Y+18, r25	; 0x12
    317e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3180:	8b 89       	ldd	r24, Y+19	; 0x13
    3182:	9c 89       	ldd	r25, Y+20	; 0x14
    3184:	01 97       	sbiw	r24, 0x01	; 1
    3186:	9c 8b       	std	Y+20, r25	; 0x14
    3188:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    318a:	8b 89       	ldd	r24, Y+19	; 0x13
    318c:	9c 89       	ldd	r25, Y+20	; 0x14
    318e:	00 97       	sbiw	r24, 0x00	; 0
    3190:	69 f7       	brne	.-38     	; 0x316c <LCD_displayCharacter+0x28e>
    3192:	14 c0       	rjmp	.+40     	; 0x31bc <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3194:	6d 89       	ldd	r22, Y+21	; 0x15
    3196:	7e 89       	ldd	r23, Y+22	; 0x16
    3198:	8f 89       	ldd	r24, Y+23	; 0x17
    319a:	98 8d       	ldd	r25, Y+24	; 0x18
    319c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31a0:	dc 01       	movw	r26, r24
    31a2:	cb 01       	movw	r24, r22
    31a4:	9c 8b       	std	Y+20, r25	; 0x14
    31a6:	8b 8b       	std	Y+19, r24	; 0x13
    31a8:	8b 89       	ldd	r24, Y+19	; 0x13
    31aa:	9c 89       	ldd	r25, Y+20	; 0x14
    31ac:	98 8b       	std	Y+16, r25	; 0x10
    31ae:	8f 87       	std	Y+15, r24	; 0x0f
    31b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    31b2:	98 89       	ldd	r25, Y+16	; 0x10
    31b4:	01 97       	sbiw	r24, 0x01	; 1
    31b6:	f1 f7       	brne	.-4      	; 0x31b4 <LCD_displayCharacter+0x2d6>
    31b8:	98 8b       	std	Y+16, r25	; 0x10
    31ba:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    31bc:	82 e0       	ldi	r24, 0x02	; 2
    31be:	61 e0       	ldi	r22, 0x01	; 1
    31c0:	40 e0       	ldi	r20, 0x00	; 0
    31c2:	0e 94 06 11 	call	0x220c	; 0x220c <GPIO_writePin>
    31c6:	80 e0       	ldi	r24, 0x00	; 0
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	a0 e8       	ldi	r26, 0x80	; 128
    31cc:	bf e3       	ldi	r27, 0x3F	; 63
    31ce:	8b 87       	std	Y+11, r24	; 0x0b
    31d0:	9c 87       	std	Y+12, r25	; 0x0c
    31d2:	ad 87       	std	Y+13, r26	; 0x0d
    31d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    31d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    31da:	8d 85       	ldd	r24, Y+13	; 0x0d
    31dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    31de:	20 e0       	ldi	r18, 0x00	; 0
    31e0:	30 e0       	ldi	r19, 0x00	; 0
    31e2:	4a ef       	ldi	r20, 0xFA	; 250
    31e4:	54 e4       	ldi	r21, 0x44	; 68
    31e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ea:	dc 01       	movw	r26, r24
    31ec:	cb 01       	movw	r24, r22
    31ee:	8f 83       	std	Y+7, r24	; 0x07
    31f0:	98 87       	std	Y+8, r25	; 0x08
    31f2:	a9 87       	std	Y+9, r26	; 0x09
    31f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31f6:	6f 81       	ldd	r22, Y+7	; 0x07
    31f8:	78 85       	ldd	r23, Y+8	; 0x08
    31fa:	89 85       	ldd	r24, Y+9	; 0x09
    31fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    31fe:	20 e0       	ldi	r18, 0x00	; 0
    3200:	30 e0       	ldi	r19, 0x00	; 0
    3202:	40 e8       	ldi	r20, 0x80	; 128
    3204:	5f e3       	ldi	r21, 0x3F	; 63
    3206:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    320a:	88 23       	and	r24, r24
    320c:	2c f4       	brge	.+10     	; 0x3218 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    320e:	81 e0       	ldi	r24, 0x01	; 1
    3210:	90 e0       	ldi	r25, 0x00	; 0
    3212:	9e 83       	std	Y+6, r25	; 0x06
    3214:	8d 83       	std	Y+5, r24	; 0x05
    3216:	3f c0       	rjmp	.+126    	; 0x3296 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    3218:	6f 81       	ldd	r22, Y+7	; 0x07
    321a:	78 85       	ldd	r23, Y+8	; 0x08
    321c:	89 85       	ldd	r24, Y+9	; 0x09
    321e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3220:	20 e0       	ldi	r18, 0x00	; 0
    3222:	3f ef       	ldi	r19, 0xFF	; 255
    3224:	4f e7       	ldi	r20, 0x7F	; 127
    3226:	57 e4       	ldi	r21, 0x47	; 71
    3228:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    322c:	18 16       	cp	r1, r24
    322e:	4c f5       	brge	.+82     	; 0x3282 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3230:	6b 85       	ldd	r22, Y+11	; 0x0b
    3232:	7c 85       	ldd	r23, Y+12	; 0x0c
    3234:	8d 85       	ldd	r24, Y+13	; 0x0d
    3236:	9e 85       	ldd	r25, Y+14	; 0x0e
    3238:	20 e0       	ldi	r18, 0x00	; 0
    323a:	30 e0       	ldi	r19, 0x00	; 0
    323c:	40 e2       	ldi	r20, 0x20	; 32
    323e:	51 e4       	ldi	r21, 0x41	; 65
    3240:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3244:	dc 01       	movw	r26, r24
    3246:	cb 01       	movw	r24, r22
    3248:	bc 01       	movw	r22, r24
    324a:	cd 01       	movw	r24, r26
    324c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3250:	dc 01       	movw	r26, r24
    3252:	cb 01       	movw	r24, r22
    3254:	9e 83       	std	Y+6, r25	; 0x06
    3256:	8d 83       	std	Y+5, r24	; 0x05
    3258:	0f c0       	rjmp	.+30     	; 0x3278 <LCD_displayCharacter+0x39a>
    325a:	88 ec       	ldi	r24, 0xC8	; 200
    325c:	90 e0       	ldi	r25, 0x00	; 0
    325e:	9c 83       	std	Y+4, r25	; 0x04
    3260:	8b 83       	std	Y+3, r24	; 0x03
    3262:	8b 81       	ldd	r24, Y+3	; 0x03
    3264:	9c 81       	ldd	r25, Y+4	; 0x04
    3266:	01 97       	sbiw	r24, 0x01	; 1
    3268:	f1 f7       	brne	.-4      	; 0x3266 <LCD_displayCharacter+0x388>
    326a:	9c 83       	std	Y+4, r25	; 0x04
    326c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    326e:	8d 81       	ldd	r24, Y+5	; 0x05
    3270:	9e 81       	ldd	r25, Y+6	; 0x06
    3272:	01 97       	sbiw	r24, 0x01	; 1
    3274:	9e 83       	std	Y+6, r25	; 0x06
    3276:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3278:	8d 81       	ldd	r24, Y+5	; 0x05
    327a:	9e 81       	ldd	r25, Y+6	; 0x06
    327c:	00 97       	sbiw	r24, 0x00	; 0
    327e:	69 f7       	brne	.-38     	; 0x325a <LCD_displayCharacter+0x37c>
    3280:	14 c0       	rjmp	.+40     	; 0x32aa <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3282:	6f 81       	ldd	r22, Y+7	; 0x07
    3284:	78 85       	ldd	r23, Y+8	; 0x08
    3286:	89 85       	ldd	r24, Y+9	; 0x09
    3288:	9a 85       	ldd	r25, Y+10	; 0x0a
    328a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    328e:	dc 01       	movw	r26, r24
    3290:	cb 01       	movw	r24, r22
    3292:	9e 83       	std	Y+6, r25	; 0x06
    3294:	8d 83       	std	Y+5, r24	; 0x05
    3296:	8d 81       	ldd	r24, Y+5	; 0x05
    3298:	9e 81       	ldd	r25, Y+6	; 0x06
    329a:	9a 83       	std	Y+2, r25	; 0x02
    329c:	89 83       	std	Y+1, r24	; 0x01
    329e:	89 81       	ldd	r24, Y+1	; 0x01
    32a0:	9a 81       	ldd	r25, Y+2	; 0x02
    32a2:	01 97       	sbiw	r24, 0x01	; 1
    32a4:	f1 f7       	brne	.-4      	; 0x32a2 <LCD_displayCharacter+0x3c4>
    32a6:	9a 83       	std	Y+2, r25	; 0x02
    32a8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    32aa:	e9 96       	adiw	r28, 0x39	; 57
    32ac:	0f b6       	in	r0, 0x3f	; 63
    32ae:	f8 94       	cli
    32b0:	de bf       	out	0x3e, r29	; 62
    32b2:	0f be       	out	0x3f, r0	; 63
    32b4:	cd bf       	out	0x3d, r28	; 61
    32b6:	cf 91       	pop	r28
    32b8:	df 91       	pop	r29
    32ba:	08 95       	ret

000032bc <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    32bc:	df 93       	push	r29
    32be:	cf 93       	push	r28
    32c0:	00 d0       	rcall	.+0      	; 0x32c2 <LCD_displayString+0x6>
    32c2:	0f 92       	push	r0
    32c4:	cd b7       	in	r28, 0x3d	; 61
    32c6:	de b7       	in	r29, 0x3e	; 62
    32c8:	9b 83       	std	Y+3, r25	; 0x03
    32ca:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    32cc:	19 82       	std	Y+1, r1	; 0x01
    32ce:	0e c0       	rjmp	.+28     	; 0x32ec <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    32d0:	89 81       	ldd	r24, Y+1	; 0x01
    32d2:	28 2f       	mov	r18, r24
    32d4:	30 e0       	ldi	r19, 0x00	; 0
    32d6:	8a 81       	ldd	r24, Y+2	; 0x02
    32d8:	9b 81       	ldd	r25, Y+3	; 0x03
    32da:	fc 01       	movw	r30, r24
    32dc:	e2 0f       	add	r30, r18
    32de:	f3 1f       	adc	r31, r19
    32e0:	80 81       	ld	r24, Z
    32e2:	0e 94 6f 17 	call	0x2ede	; 0x2ede <LCD_displayCharacter>
		i++;
    32e6:	89 81       	ldd	r24, Y+1	; 0x01
    32e8:	8f 5f       	subi	r24, 0xFF	; 255
    32ea:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    32ec:	89 81       	ldd	r24, Y+1	; 0x01
    32ee:	28 2f       	mov	r18, r24
    32f0:	30 e0       	ldi	r19, 0x00	; 0
    32f2:	8a 81       	ldd	r24, Y+2	; 0x02
    32f4:	9b 81       	ldd	r25, Y+3	; 0x03
    32f6:	fc 01       	movw	r30, r24
    32f8:	e2 0f       	add	r30, r18
    32fa:	f3 1f       	adc	r31, r19
    32fc:	80 81       	ld	r24, Z
    32fe:	88 23       	and	r24, r24
    3300:	39 f7       	brne	.-50     	; 0x32d0 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    3302:	0f 90       	pop	r0
    3304:	0f 90       	pop	r0
    3306:	0f 90       	pop	r0
    3308:	cf 91       	pop	r28
    330a:	df 91       	pop	r29
    330c:	08 95       	ret

0000330e <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    330e:	df 93       	push	r29
    3310:	cf 93       	push	r28
    3312:	00 d0       	rcall	.+0      	; 0x3314 <LCD_moveCursor+0x6>
    3314:	00 d0       	rcall	.+0      	; 0x3316 <LCD_moveCursor+0x8>
    3316:	0f 92       	push	r0
    3318:	cd b7       	in	r28, 0x3d	; 61
    331a:	de b7       	in	r29, 0x3e	; 62
    331c:	8a 83       	std	Y+2, r24	; 0x02
    331e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    3320:	8a 81       	ldd	r24, Y+2	; 0x02
    3322:	28 2f       	mov	r18, r24
    3324:	30 e0       	ldi	r19, 0x00	; 0
    3326:	3d 83       	std	Y+5, r19	; 0x05
    3328:	2c 83       	std	Y+4, r18	; 0x04
    332a:	8c 81       	ldd	r24, Y+4	; 0x04
    332c:	9d 81       	ldd	r25, Y+5	; 0x05
    332e:	81 30       	cpi	r24, 0x01	; 1
    3330:	91 05       	cpc	r25, r1
    3332:	c1 f0       	breq	.+48     	; 0x3364 <LCD_moveCursor+0x56>
    3334:	2c 81       	ldd	r18, Y+4	; 0x04
    3336:	3d 81       	ldd	r19, Y+5	; 0x05
    3338:	22 30       	cpi	r18, 0x02	; 2
    333a:	31 05       	cpc	r19, r1
    333c:	2c f4       	brge	.+10     	; 0x3348 <LCD_moveCursor+0x3a>
    333e:	8c 81       	ldd	r24, Y+4	; 0x04
    3340:	9d 81       	ldd	r25, Y+5	; 0x05
    3342:	00 97       	sbiw	r24, 0x00	; 0
    3344:	61 f0       	breq	.+24     	; 0x335e <LCD_moveCursor+0x50>
    3346:	19 c0       	rjmp	.+50     	; 0x337a <LCD_moveCursor+0x6c>
    3348:	2c 81       	ldd	r18, Y+4	; 0x04
    334a:	3d 81       	ldd	r19, Y+5	; 0x05
    334c:	22 30       	cpi	r18, 0x02	; 2
    334e:	31 05       	cpc	r19, r1
    3350:	69 f0       	breq	.+26     	; 0x336c <LCD_moveCursor+0x5e>
    3352:	8c 81       	ldd	r24, Y+4	; 0x04
    3354:	9d 81       	ldd	r25, Y+5	; 0x05
    3356:	83 30       	cpi	r24, 0x03	; 3
    3358:	91 05       	cpc	r25, r1
    335a:	61 f0       	breq	.+24     	; 0x3374 <LCD_moveCursor+0x66>
    335c:	0e c0       	rjmp	.+28     	; 0x337a <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    335e:	8b 81       	ldd	r24, Y+3	; 0x03
    3360:	89 83       	std	Y+1, r24	; 0x01
    3362:	0b c0       	rjmp	.+22     	; 0x337a <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    3364:	8b 81       	ldd	r24, Y+3	; 0x03
    3366:	80 5c       	subi	r24, 0xC0	; 192
    3368:	89 83       	std	Y+1, r24	; 0x01
    336a:	07 c0       	rjmp	.+14     	; 0x337a <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    336c:	8b 81       	ldd	r24, Y+3	; 0x03
    336e:	80 5f       	subi	r24, 0xF0	; 240
    3370:	89 83       	std	Y+1, r24	; 0x01
    3372:	03 c0       	rjmp	.+6      	; 0x337a <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    3374:	8b 81       	ldd	r24, Y+3	; 0x03
    3376:	80 5b       	subi	r24, 0xB0	; 176
    3378:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    337a:	89 81       	ldd	r24, Y+1	; 0x01
    337c:	80 68       	ori	r24, 0x80	; 128
    337e:	0e 94 80 15 	call	0x2b00	; 0x2b00 <LCD_sendCommand>
}
    3382:	0f 90       	pop	r0
    3384:	0f 90       	pop	r0
    3386:	0f 90       	pop	r0
    3388:	0f 90       	pop	r0
    338a:	0f 90       	pop	r0
    338c:	cf 91       	pop	r28
    338e:	df 91       	pop	r29
    3390:	08 95       	ret

00003392 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3392:	df 93       	push	r29
    3394:	cf 93       	push	r28
    3396:	00 d0       	rcall	.+0      	; 0x3398 <LCD_displayStringRowColumn+0x6>
    3398:	00 d0       	rcall	.+0      	; 0x339a <LCD_displayStringRowColumn+0x8>
    339a:	cd b7       	in	r28, 0x3d	; 61
    339c:	de b7       	in	r29, 0x3e	; 62
    339e:	89 83       	std	Y+1, r24	; 0x01
    33a0:	6a 83       	std	Y+2, r22	; 0x02
    33a2:	5c 83       	std	Y+4, r21	; 0x04
    33a4:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    33a6:	89 81       	ldd	r24, Y+1	; 0x01
    33a8:	6a 81       	ldd	r22, Y+2	; 0x02
    33aa:	0e 94 87 19 	call	0x330e	; 0x330e <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    33ae:	8b 81       	ldd	r24, Y+3	; 0x03
    33b0:	9c 81       	ldd	r25, Y+4	; 0x04
    33b2:	0e 94 5e 19 	call	0x32bc	; 0x32bc <LCD_displayString>
}
    33b6:	0f 90       	pop	r0
    33b8:	0f 90       	pop	r0
    33ba:	0f 90       	pop	r0
    33bc:	0f 90       	pop	r0
    33be:	cf 91       	pop	r28
    33c0:	df 91       	pop	r29
    33c2:	08 95       	ret

000033c4 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    33c4:	df 93       	push	r29
    33c6:	cf 93       	push	r28
    33c8:	cd b7       	in	r28, 0x3d	; 61
    33ca:	de b7       	in	r29, 0x3e	; 62
    33cc:	62 97       	sbiw	r28, 0x12	; 18
    33ce:	0f b6       	in	r0, 0x3f	; 63
    33d0:	f8 94       	cli
    33d2:	de bf       	out	0x3e, r29	; 62
    33d4:	0f be       	out	0x3f, r0	; 63
    33d6:	cd bf       	out	0x3d, r28	; 61
    33d8:	9a 8b       	std	Y+18, r25	; 0x12
    33da:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    33dc:	89 89       	ldd	r24, Y+17	; 0x11
    33de:	9a 89       	ldd	r25, Y+18	; 0x12
    33e0:	9e 01       	movw	r18, r28
    33e2:	2f 5f       	subi	r18, 0xFF	; 255
    33e4:	3f 4f       	sbci	r19, 0xFF	; 255
    33e6:	b9 01       	movw	r22, r18
    33e8:	4a e0       	ldi	r20, 0x0A	; 10
    33ea:	50 e0       	ldi	r21, 0x00	; 0
    33ec:	0e 94 49 1e 	call	0x3c92	; 0x3c92 <itoa>
   LCD_displayString(buff); /* Display the string */
    33f0:	ce 01       	movw	r24, r28
    33f2:	01 96       	adiw	r24, 0x01	; 1
    33f4:	0e 94 5e 19 	call	0x32bc	; 0x32bc <LCD_displayString>
}
    33f8:	62 96       	adiw	r28, 0x12	; 18
    33fa:	0f b6       	in	r0, 0x3f	; 63
    33fc:	f8 94       	cli
    33fe:	de bf       	out	0x3e, r29	; 62
    3400:	0f be       	out	0x3f, r0	; 63
    3402:	cd bf       	out	0x3d, r28	; 61
    3404:	cf 91       	pop	r28
    3406:	df 91       	pop	r29
    3408:	08 95       	ret

0000340a <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    340a:	df 93       	push	r29
    340c:	cf 93       	push	r28
    340e:	cd b7       	in	r28, 0x3d	; 61
    3410:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3412:	81 e0       	ldi	r24, 0x01	; 1
    3414:	0e 94 80 15 	call	0x2b00	; 0x2b00 <LCD_sendCommand>
}
    3418:	cf 91       	pop	r28
    341a:	df 91       	pop	r29
    341c:	08 95       	ret

0000341e <Timer_init>:
static void (*g_timer0CallBackPtr)(void) = NULL_PTR;
static void (*g_timer1CallBackPtr)(void) = NULL_PTR;
static void (*g_timer2CallBackPtr)(void) = NULL_PTR;

/* Timer initialization function */
void Timer_init(const Timer_ConfigType *Config_Ptr) {
    341e:	df 93       	push	r29
    3420:	cf 93       	push	r28
    3422:	00 d0       	rcall	.+0      	; 0x3424 <Timer_init+0x6>
    3424:	00 d0       	rcall	.+0      	; 0x3426 <Timer_init+0x8>
    3426:	cd b7       	in	r28, 0x3d	; 61
    3428:	de b7       	in	r29, 0x3e	; 62
    342a:	9a 83       	std	Y+2, r25	; 0x02
    342c:	89 83       	std	Y+1, r24	; 0x01
	switch (Config_Ptr->timer_ID) {
    342e:	e9 81       	ldd	r30, Y+1	; 0x01
    3430:	fa 81       	ldd	r31, Y+2	; 0x02
    3432:	84 81       	ldd	r24, Z+4	; 0x04
    3434:	28 2f       	mov	r18, r24
    3436:	30 e0       	ldi	r19, 0x00	; 0
    3438:	3c 83       	std	Y+4, r19	; 0x04
    343a:	2b 83       	std	Y+3, r18	; 0x03
    343c:	8b 81       	ldd	r24, Y+3	; 0x03
    343e:	9c 81       	ldd	r25, Y+4	; 0x04
    3440:	81 30       	cpi	r24, 0x01	; 1
    3442:	91 05       	cpc	r25, r1
    3444:	09 f4       	brne	.+2      	; 0x3448 <Timer_init+0x2a>
    3446:	4c c0       	rjmp	.+152    	; 0x34e0 <Timer_init+0xc2>
    3448:	2b 81       	ldd	r18, Y+3	; 0x03
    344a:	3c 81       	ldd	r19, Y+4	; 0x04
    344c:	22 30       	cpi	r18, 0x02	; 2
    344e:	31 05       	cpc	r19, r1
    3450:	09 f4       	brne	.+2      	; 0x3454 <Timer_init+0x36>
    3452:	8b c0       	rjmp	.+278    	; 0x356a <Timer_init+0x14c>
    3454:	8b 81       	ldd	r24, Y+3	; 0x03
    3456:	9c 81       	ldd	r25, Y+4	; 0x04
    3458:	00 97       	sbiw	r24, 0x00	; 0
    345a:	09 f0       	breq	.+2      	; 0x345e <Timer_init+0x40>
    345c:	c6 c0       	rjmp	.+396    	; 0x35ea <Timer_init+0x1cc>
	case TIMER_0:
		/* Set initial value */
		TCNT0 = Config_Ptr->timer_InitialValue;
    345e:	a2 e5       	ldi	r26, 0x52	; 82
    3460:	b0 e0       	ldi	r27, 0x00	; 0
    3462:	e9 81       	ldd	r30, Y+1	; 0x01
    3464:	fa 81       	ldd	r31, Y+2	; 0x02
    3466:	80 81       	ld	r24, Z
    3468:	91 81       	ldd	r25, Z+1	; 0x01
    346a:	8c 93       	st	X, r24

		/* Configure mode (Normal or Compare) */
		if (Config_Ptr->timer_mode == 0) {
    346c:	e9 81       	ldd	r30, Y+1	; 0x01
    346e:	fa 81       	ldd	r31, Y+2	; 0x02
    3470:	86 81       	ldd	r24, Z+6	; 0x06
    3472:	88 23       	and	r24, r24
    3474:	41 f4       	brne	.+16     	; 0x3486 <Timer_init+0x68>
			TCCR0 |= (1 << FOC0);  // Normal mode
    3476:	a3 e5       	ldi	r26, 0x53	; 83
    3478:	b0 e0       	ldi	r27, 0x00	; 0
    347a:	e3 e5       	ldi	r30, 0x53	; 83
    347c:	f0 e0       	ldi	r31, 0x00	; 0
    347e:	80 81       	ld	r24, Z
    3480:	80 68       	ori	r24, 0x80	; 128
    3482:	8c 93       	st	X, r24
    3484:	0e c0       	rjmp	.+28     	; 0x34a2 <Timer_init+0x84>
		} else {
			TCCR0 |= (1 << WGM01);  // Compare mode
    3486:	a3 e5       	ldi	r26, 0x53	; 83
    3488:	b0 e0       	ldi	r27, 0x00	; 0
    348a:	e3 e5       	ldi	r30, 0x53	; 83
    348c:	f0 e0       	ldi	r31, 0x00	; 0
    348e:	80 81       	ld	r24, Z
    3490:	88 60       	ori	r24, 0x08	; 8
    3492:	8c 93       	st	X, r24
			OCR0 = Config_Ptr->timer_compare_MatchValue;
    3494:	ac e5       	ldi	r26, 0x5C	; 92
    3496:	b0 e0       	ldi	r27, 0x00	; 0
    3498:	e9 81       	ldd	r30, Y+1	; 0x01
    349a:	fa 81       	ldd	r31, Y+2	; 0x02
    349c:	82 81       	ldd	r24, Z+2	; 0x02
    349e:	93 81       	ldd	r25, Z+3	; 0x03
    34a0:	8c 93       	st	X, r24
		}

		/* Set clock source */
		TCCR0 |= Config_Ptr->timer_clock;
    34a2:	a3 e5       	ldi	r26, 0x53	; 83
    34a4:	b0 e0       	ldi	r27, 0x00	; 0
    34a6:	e3 e5       	ldi	r30, 0x53	; 83
    34a8:	f0 e0       	ldi	r31, 0x00	; 0
    34aa:	90 81       	ld	r25, Z
    34ac:	e9 81       	ldd	r30, Y+1	; 0x01
    34ae:	fa 81       	ldd	r31, Y+2	; 0x02
    34b0:	85 81       	ldd	r24, Z+5	; 0x05
    34b2:	89 2b       	or	r24, r25
    34b4:	8c 93       	st	X, r24

		/* Enable interrupts based on mode */
		if (Config_Ptr->timer_mode == 0) {
    34b6:	e9 81       	ldd	r30, Y+1	; 0x01
    34b8:	fa 81       	ldd	r31, Y+2	; 0x02
    34ba:	86 81       	ldd	r24, Z+6	; 0x06
    34bc:	88 23       	and	r24, r24
    34be:	41 f4       	brne	.+16     	; 0x34d0 <Timer_init+0xb2>
			TIMSK |= (1 << TOIE0);  // Overflow interrupt enable for TIMER0
    34c0:	a9 e5       	ldi	r26, 0x59	; 89
    34c2:	b0 e0       	ldi	r27, 0x00	; 0
    34c4:	e9 e5       	ldi	r30, 0x59	; 89
    34c6:	f0 e0       	ldi	r31, 0x00	; 0
    34c8:	80 81       	ld	r24, Z
    34ca:	81 60       	ori	r24, 0x01	; 1
    34cc:	8c 93       	st	X, r24
    34ce:	8d c0       	rjmp	.+282    	; 0x35ea <Timer_init+0x1cc>
		} else {
			TIMSK |= (1 << OCIE0);  // Output compare match interrupt enable for TIMER0
    34d0:	a9 e5       	ldi	r26, 0x59	; 89
    34d2:	b0 e0       	ldi	r27, 0x00	; 0
    34d4:	e9 e5       	ldi	r30, 0x59	; 89
    34d6:	f0 e0       	ldi	r31, 0x00	; 0
    34d8:	80 81       	ld	r24, Z
    34da:	82 60       	ori	r24, 0x02	; 2
    34dc:	8c 93       	st	X, r24
    34de:	85 c0       	rjmp	.+266    	; 0x35ea <Timer_init+0x1cc>
		}
		break;

	case TIMER_1:
		/* Set initial value */
		TCNT1 = Config_Ptr->timer_InitialValue;
    34e0:	ac e4       	ldi	r26, 0x4C	; 76
    34e2:	b0 e0       	ldi	r27, 0x00	; 0
    34e4:	e9 81       	ldd	r30, Y+1	; 0x01
    34e6:	fa 81       	ldd	r31, Y+2	; 0x02
    34e8:	80 81       	ld	r24, Z
    34ea:	91 81       	ldd	r25, Z+1	; 0x01
    34ec:	11 96       	adiw	r26, 0x01	; 1
    34ee:	9c 93       	st	X, r25
    34f0:	8e 93       	st	-X, r24

		/* Configure mode (Normal or Compare) */
		if (Config_Ptr->timer_mode == 0) {
    34f2:	e9 81       	ldd	r30, Y+1	; 0x01
    34f4:	fa 81       	ldd	r31, Y+2	; 0x02
    34f6:	86 81       	ldd	r24, Z+6	; 0x06
    34f8:	88 23       	and	r24, r24
    34fa:	41 f4       	brne	.+16     	; 0x350c <Timer_init+0xee>
			TCCR1B |= (1 << FOC1A);  // Normal mode
    34fc:	ae e4       	ldi	r26, 0x4E	; 78
    34fe:	b0 e0       	ldi	r27, 0x00	; 0
    3500:	ee e4       	ldi	r30, 0x4E	; 78
    3502:	f0 e0       	ldi	r31, 0x00	; 0
    3504:	80 81       	ld	r24, Z
    3506:	88 60       	ori	r24, 0x08	; 8
    3508:	8c 93       	st	X, r24
    350a:	10 c0       	rjmp	.+32     	; 0x352c <Timer_init+0x10e>
		} else {
			TCCR1B |= (1 << WGM12);  // Compare mode
    350c:	ae e4       	ldi	r26, 0x4E	; 78
    350e:	b0 e0       	ldi	r27, 0x00	; 0
    3510:	ee e4       	ldi	r30, 0x4E	; 78
    3512:	f0 e0       	ldi	r31, 0x00	; 0
    3514:	80 81       	ld	r24, Z
    3516:	88 60       	ori	r24, 0x08	; 8
    3518:	8c 93       	st	X, r24
			OCR1A = Config_Ptr->timer_compare_MatchValue;
    351a:	aa e4       	ldi	r26, 0x4A	; 74
    351c:	b0 e0       	ldi	r27, 0x00	; 0
    351e:	e9 81       	ldd	r30, Y+1	; 0x01
    3520:	fa 81       	ldd	r31, Y+2	; 0x02
    3522:	82 81       	ldd	r24, Z+2	; 0x02
    3524:	93 81       	ldd	r25, Z+3	; 0x03
    3526:	11 96       	adiw	r26, 0x01	; 1
    3528:	9c 93       	st	X, r25
    352a:	8e 93       	st	-X, r24
		}

		/* Set clock source */
		TCCR1B |= Config_Ptr->timer_clock;
    352c:	ae e4       	ldi	r26, 0x4E	; 78
    352e:	b0 e0       	ldi	r27, 0x00	; 0
    3530:	ee e4       	ldi	r30, 0x4E	; 78
    3532:	f0 e0       	ldi	r31, 0x00	; 0
    3534:	90 81       	ld	r25, Z
    3536:	e9 81       	ldd	r30, Y+1	; 0x01
    3538:	fa 81       	ldd	r31, Y+2	; 0x02
    353a:	85 81       	ldd	r24, Z+5	; 0x05
    353c:	89 2b       	or	r24, r25
    353e:	8c 93       	st	X, r24

		/* Enable interrupts based on mode */
		if (Config_Ptr->timer_mode == 0) {
    3540:	e9 81       	ldd	r30, Y+1	; 0x01
    3542:	fa 81       	ldd	r31, Y+2	; 0x02
    3544:	86 81       	ldd	r24, Z+6	; 0x06
    3546:	88 23       	and	r24, r24
    3548:	41 f4       	brne	.+16     	; 0x355a <Timer_init+0x13c>
			TIMSK |= (1 << TOIE1);  // Overflow interrupt enable for TIMER1
    354a:	a9 e5       	ldi	r26, 0x59	; 89
    354c:	b0 e0       	ldi	r27, 0x00	; 0
    354e:	e9 e5       	ldi	r30, 0x59	; 89
    3550:	f0 e0       	ldi	r31, 0x00	; 0
    3552:	80 81       	ld	r24, Z
    3554:	84 60       	ori	r24, 0x04	; 4
    3556:	8c 93       	st	X, r24
    3558:	48 c0       	rjmp	.+144    	; 0x35ea <Timer_init+0x1cc>
		} else {
			TIMSK |= (1 << OCIE1A);  // Output compare match interrupt enable for TIMER1
    355a:	a9 e5       	ldi	r26, 0x59	; 89
    355c:	b0 e0       	ldi	r27, 0x00	; 0
    355e:	e9 e5       	ldi	r30, 0x59	; 89
    3560:	f0 e0       	ldi	r31, 0x00	; 0
    3562:	80 81       	ld	r24, Z
    3564:	80 61       	ori	r24, 0x10	; 16
    3566:	8c 93       	st	X, r24
    3568:	40 c0       	rjmp	.+128    	; 0x35ea <Timer_init+0x1cc>
		}
		break;

	case TIMER_2:
		/* Set initial value */
		TCNT2 = Config_Ptr->timer_InitialValue;
    356a:	a4 e4       	ldi	r26, 0x44	; 68
    356c:	b0 e0       	ldi	r27, 0x00	; 0
    356e:	e9 81       	ldd	r30, Y+1	; 0x01
    3570:	fa 81       	ldd	r31, Y+2	; 0x02
    3572:	80 81       	ld	r24, Z
    3574:	91 81       	ldd	r25, Z+1	; 0x01
    3576:	8c 93       	st	X, r24

		/* Configure mode (Normal or Compare) */
		if (Config_Ptr->timer_mode == 0) {
    3578:	e9 81       	ldd	r30, Y+1	; 0x01
    357a:	fa 81       	ldd	r31, Y+2	; 0x02
    357c:	86 81       	ldd	r24, Z+6	; 0x06
    357e:	88 23       	and	r24, r24
    3580:	41 f4       	brne	.+16     	; 0x3592 <Timer_init+0x174>
			TCCR2 |= (1 << FOC2);  // Normal mode
    3582:	a5 e4       	ldi	r26, 0x45	; 69
    3584:	b0 e0       	ldi	r27, 0x00	; 0
    3586:	e5 e4       	ldi	r30, 0x45	; 69
    3588:	f0 e0       	ldi	r31, 0x00	; 0
    358a:	80 81       	ld	r24, Z
    358c:	80 68       	ori	r24, 0x80	; 128
    358e:	8c 93       	st	X, r24
    3590:	0e c0       	rjmp	.+28     	; 0x35ae <Timer_init+0x190>
		} else {
			TCCR2 |= (1 << WGM21);  // Compare mode
    3592:	a5 e4       	ldi	r26, 0x45	; 69
    3594:	b0 e0       	ldi	r27, 0x00	; 0
    3596:	e5 e4       	ldi	r30, 0x45	; 69
    3598:	f0 e0       	ldi	r31, 0x00	; 0
    359a:	80 81       	ld	r24, Z
    359c:	88 60       	ori	r24, 0x08	; 8
    359e:	8c 93       	st	X, r24
			OCR2 = Config_Ptr->timer_compare_MatchValue;
    35a0:	a3 e4       	ldi	r26, 0x43	; 67
    35a2:	b0 e0       	ldi	r27, 0x00	; 0
    35a4:	e9 81       	ldd	r30, Y+1	; 0x01
    35a6:	fa 81       	ldd	r31, Y+2	; 0x02
    35a8:	82 81       	ldd	r24, Z+2	; 0x02
    35aa:	93 81       	ldd	r25, Z+3	; 0x03
    35ac:	8c 93       	st	X, r24
		}

		/* Set clock source */
		TCCR2 |= Config_Ptr->timer_clock;
    35ae:	a5 e4       	ldi	r26, 0x45	; 69
    35b0:	b0 e0       	ldi	r27, 0x00	; 0
    35b2:	e5 e4       	ldi	r30, 0x45	; 69
    35b4:	f0 e0       	ldi	r31, 0x00	; 0
    35b6:	90 81       	ld	r25, Z
    35b8:	e9 81       	ldd	r30, Y+1	; 0x01
    35ba:	fa 81       	ldd	r31, Y+2	; 0x02
    35bc:	85 81       	ldd	r24, Z+5	; 0x05
    35be:	89 2b       	or	r24, r25
    35c0:	8c 93       	st	X, r24

		/* Enable interrupts based on mode */
		if (Config_Ptr->timer_mode == 0) {
    35c2:	e9 81       	ldd	r30, Y+1	; 0x01
    35c4:	fa 81       	ldd	r31, Y+2	; 0x02
    35c6:	86 81       	ldd	r24, Z+6	; 0x06
    35c8:	88 23       	and	r24, r24
    35ca:	41 f4       	brne	.+16     	; 0x35dc <Timer_init+0x1be>
			TIMSK |= (1 << TOIE2);  // Overflow interrupt enable for TIMER2
    35cc:	a9 e5       	ldi	r26, 0x59	; 89
    35ce:	b0 e0       	ldi	r27, 0x00	; 0
    35d0:	e9 e5       	ldi	r30, 0x59	; 89
    35d2:	f0 e0       	ldi	r31, 0x00	; 0
    35d4:	80 81       	ld	r24, Z
    35d6:	80 64       	ori	r24, 0x40	; 64
    35d8:	8c 93       	st	X, r24
    35da:	07 c0       	rjmp	.+14     	; 0x35ea <Timer_init+0x1cc>
		} else {
			TIMSK |= (1 << OCIE2);  // Output compare match interrupt enable for TIMER2
    35dc:	a9 e5       	ldi	r26, 0x59	; 89
    35de:	b0 e0       	ldi	r27, 0x00	; 0
    35e0:	e9 e5       	ldi	r30, 0x59	; 89
    35e2:	f0 e0       	ldi	r31, 0x00	; 0
    35e4:	80 81       	ld	r24, Z
    35e6:	80 68       	ori	r24, 0x80	; 128
    35e8:	8c 93       	st	X, r24
		}
		break;
	}
}
    35ea:	0f 90       	pop	r0
    35ec:	0f 90       	pop	r0
    35ee:	0f 90       	pop	r0
    35f0:	0f 90       	pop	r0
    35f2:	cf 91       	pop	r28
    35f4:	df 91       	pop	r29
    35f6:	08 95       	ret

000035f8 <Timer_deInit>:

/* Timer de-initialization function */
void Timer_deInit(Timer_ID_Type timer_type) {
    35f8:	df 93       	push	r29
    35fa:	cf 93       	push	r28
    35fc:	00 d0       	rcall	.+0      	; 0x35fe <Timer_deInit+0x6>
    35fe:	0f 92       	push	r0
    3600:	cd b7       	in	r28, 0x3d	; 61
    3602:	de b7       	in	r29, 0x3e	; 62
    3604:	89 83       	std	Y+1, r24	; 0x01
	switch (timer_type) {
    3606:	89 81       	ldd	r24, Y+1	; 0x01
    3608:	28 2f       	mov	r18, r24
    360a:	30 e0       	ldi	r19, 0x00	; 0
    360c:	3b 83       	std	Y+3, r19	; 0x03
    360e:	2a 83       	std	Y+2, r18	; 0x02
    3610:	8a 81       	ldd	r24, Y+2	; 0x02
    3612:	9b 81       	ldd	r25, Y+3	; 0x03
    3614:	81 30       	cpi	r24, 0x01	; 1
    3616:	91 05       	cpc	r25, r1
    3618:	a1 f0       	breq	.+40     	; 0x3642 <Timer_deInit+0x4a>
    361a:	2a 81       	ldd	r18, Y+2	; 0x02
    361c:	3b 81       	ldd	r19, Y+3	; 0x03
    361e:	22 30       	cpi	r18, 0x02	; 2
    3620:	31 05       	cpc	r19, r1
    3622:	d1 f0       	breq	.+52     	; 0x3658 <Timer_deInit+0x60>
    3624:	8a 81       	ldd	r24, Y+2	; 0x02
    3626:	9b 81       	ldd	r25, Y+3	; 0x03
    3628:	00 97       	sbiw	r24, 0x00	; 0
    362a:	01 f5       	brne	.+64     	; 0x366c <Timer_deInit+0x74>
	case TIMER_0:
		TCCR0 = 0;
    362c:	e3 e5       	ldi	r30, 0x53	; 83
    362e:	f0 e0       	ldi	r31, 0x00	; 0
    3630:	10 82       	st	Z, r1
		TIMSK &= ~((1 << TOIE0) | (1 << OCIE0));  // Disable TIMER0 interrupts
    3632:	a9 e5       	ldi	r26, 0x59	; 89
    3634:	b0 e0       	ldi	r27, 0x00	; 0
    3636:	e9 e5       	ldi	r30, 0x59	; 89
    3638:	f0 e0       	ldi	r31, 0x00	; 0
    363a:	80 81       	ld	r24, Z
    363c:	8c 7f       	andi	r24, 0xFC	; 252
    363e:	8c 93       	st	X, r24
    3640:	15 c0       	rjmp	.+42     	; 0x366c <Timer_deInit+0x74>
		break;
	case TIMER_1:
		TCCR1B = 0;
    3642:	ee e4       	ldi	r30, 0x4E	; 78
    3644:	f0 e0       	ldi	r31, 0x00	; 0
    3646:	10 82       	st	Z, r1
		TIMSK &= ~((1 << TOIE1) | (1 << OCIE1A));  // Disable TIMER1 interrupts
    3648:	a9 e5       	ldi	r26, 0x59	; 89
    364a:	b0 e0       	ldi	r27, 0x00	; 0
    364c:	e9 e5       	ldi	r30, 0x59	; 89
    364e:	f0 e0       	ldi	r31, 0x00	; 0
    3650:	80 81       	ld	r24, Z
    3652:	8b 7e       	andi	r24, 0xEB	; 235
    3654:	8c 93       	st	X, r24
    3656:	0a c0       	rjmp	.+20     	; 0x366c <Timer_deInit+0x74>
		break;
	case TIMER_2:
		TCCR2 = 0;
    3658:	e5 e4       	ldi	r30, 0x45	; 69
    365a:	f0 e0       	ldi	r31, 0x00	; 0
    365c:	10 82       	st	Z, r1
		TIMSK &= ~((1 << TOIE2) | (1 << OCIE2));  // Disable TIMER2 interrupts
    365e:	a9 e5       	ldi	r26, 0x59	; 89
    3660:	b0 e0       	ldi	r27, 0x00	; 0
    3662:	e9 e5       	ldi	r30, 0x59	; 89
    3664:	f0 e0       	ldi	r31, 0x00	; 0
    3666:	80 81       	ld	r24, Z
    3668:	8f 73       	andi	r24, 0x3F	; 63
    366a:	8c 93       	st	X, r24
		break;
	}
}
    366c:	0f 90       	pop	r0
    366e:	0f 90       	pop	r0
    3670:	0f 90       	pop	r0
    3672:	cf 91       	pop	r28
    3674:	df 91       	pop	r29
    3676:	08 95       	ret

00003678 <Timer_setCallBack>:

/* Set callback function for timer interrupts */
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID) {
    3678:	df 93       	push	r29
    367a:	cf 93       	push	r28
    367c:	00 d0       	rcall	.+0      	; 0x367e <Timer_setCallBack+0x6>
    367e:	00 d0       	rcall	.+0      	; 0x3680 <Timer_setCallBack+0x8>
    3680:	0f 92       	push	r0
    3682:	cd b7       	in	r28, 0x3d	; 61
    3684:	de b7       	in	r29, 0x3e	; 62
    3686:	9a 83       	std	Y+2, r25	; 0x02
    3688:	89 83       	std	Y+1, r24	; 0x01
    368a:	6b 83       	std	Y+3, r22	; 0x03
	switch (a_timer_ID) {
    368c:	8b 81       	ldd	r24, Y+3	; 0x03
    368e:	28 2f       	mov	r18, r24
    3690:	30 e0       	ldi	r19, 0x00	; 0
    3692:	3d 83       	std	Y+5, r19	; 0x05
    3694:	2c 83       	std	Y+4, r18	; 0x04
    3696:	8c 81       	ldd	r24, Y+4	; 0x04
    3698:	9d 81       	ldd	r25, Y+5	; 0x05
    369a:	81 30       	cpi	r24, 0x01	; 1
    369c:	91 05       	cpc	r25, r1
    369e:	81 f0       	breq	.+32     	; 0x36c0 <Timer_setCallBack+0x48>
    36a0:	2c 81       	ldd	r18, Y+4	; 0x04
    36a2:	3d 81       	ldd	r19, Y+5	; 0x05
    36a4:	22 30       	cpi	r18, 0x02	; 2
    36a6:	31 05       	cpc	r19, r1
    36a8:	91 f0       	breq	.+36     	; 0x36ce <Timer_setCallBack+0x56>
    36aa:	8c 81       	ldd	r24, Y+4	; 0x04
    36ac:	9d 81       	ldd	r25, Y+5	; 0x05
    36ae:	00 97       	sbiw	r24, 0x00	; 0
    36b0:	a1 f4       	brne	.+40     	; 0x36da <Timer_setCallBack+0x62>
	case TIMER_0:
		g_timer0CallBackPtr = a_ptr;
    36b2:	89 81       	ldd	r24, Y+1	; 0x01
    36b4:	9a 81       	ldd	r25, Y+2	; 0x02
    36b6:	90 93 9b 01 	sts	0x019B, r25
    36ba:	80 93 9a 01 	sts	0x019A, r24
    36be:	0d c0       	rjmp	.+26     	; 0x36da <Timer_setCallBack+0x62>
		break;
	case TIMER_1:
		g_timer1CallBackPtr = a_ptr;
    36c0:	89 81       	ldd	r24, Y+1	; 0x01
    36c2:	9a 81       	ldd	r25, Y+2	; 0x02
    36c4:	90 93 9d 01 	sts	0x019D, r25
    36c8:	80 93 9c 01 	sts	0x019C, r24
    36cc:	06 c0       	rjmp	.+12     	; 0x36da <Timer_setCallBack+0x62>
		break;
	case TIMER_2:
		g_timer2CallBackPtr = a_ptr;
    36ce:	89 81       	ldd	r24, Y+1	; 0x01
    36d0:	9a 81       	ldd	r25, Y+2	; 0x02
    36d2:	90 93 9f 01 	sts	0x019F, r25
    36d6:	80 93 9e 01 	sts	0x019E, r24
		break;
	}
}
    36da:	0f 90       	pop	r0
    36dc:	0f 90       	pop	r0
    36de:	0f 90       	pop	r0
    36e0:	0f 90       	pop	r0
    36e2:	0f 90       	pop	r0
    36e4:	cf 91       	pop	r28
    36e6:	df 91       	pop	r29
    36e8:	08 95       	ret

000036ea <__vector_11>:

/* ISR for TIMER0 overflow */
ISR(TIMER0_OVF_vect) {
    36ea:	1f 92       	push	r1
    36ec:	0f 92       	push	r0
    36ee:	0f b6       	in	r0, 0x3f	; 63
    36f0:	0f 92       	push	r0
    36f2:	11 24       	eor	r1, r1
    36f4:	2f 93       	push	r18
    36f6:	3f 93       	push	r19
    36f8:	4f 93       	push	r20
    36fa:	5f 93       	push	r21
    36fc:	6f 93       	push	r22
    36fe:	7f 93       	push	r23
    3700:	8f 93       	push	r24
    3702:	9f 93       	push	r25
    3704:	af 93       	push	r26
    3706:	bf 93       	push	r27
    3708:	ef 93       	push	r30
    370a:	ff 93       	push	r31
    370c:	df 93       	push	r29
    370e:	cf 93       	push	r28
    3710:	cd b7       	in	r28, 0x3d	; 61
    3712:	de b7       	in	r29, 0x3e	; 62
	if (g_timer0CallBackPtr != NULL_PTR) {
    3714:	80 91 9a 01 	lds	r24, 0x019A
    3718:	90 91 9b 01 	lds	r25, 0x019B
    371c:	00 97       	sbiw	r24, 0x00	; 0
    371e:	29 f0       	breq	.+10     	; 0x372a <__vector_11+0x40>
		(*g_timer0CallBackPtr)();
    3720:	e0 91 9a 01 	lds	r30, 0x019A
    3724:	f0 91 9b 01 	lds	r31, 0x019B
    3728:	09 95       	icall
	}
}
    372a:	cf 91       	pop	r28
    372c:	df 91       	pop	r29
    372e:	ff 91       	pop	r31
    3730:	ef 91       	pop	r30
    3732:	bf 91       	pop	r27
    3734:	af 91       	pop	r26
    3736:	9f 91       	pop	r25
    3738:	8f 91       	pop	r24
    373a:	7f 91       	pop	r23
    373c:	6f 91       	pop	r22
    373e:	5f 91       	pop	r21
    3740:	4f 91       	pop	r20
    3742:	3f 91       	pop	r19
    3744:	2f 91       	pop	r18
    3746:	0f 90       	pop	r0
    3748:	0f be       	out	0x3f, r0	; 63
    374a:	0f 90       	pop	r0
    374c:	1f 90       	pop	r1
    374e:	18 95       	reti

00003750 <__vector_10>:

/* ISR for TIMER0 compare match */
ISR(TIMER0_COMP_vect) {
    3750:	1f 92       	push	r1
    3752:	0f 92       	push	r0
    3754:	0f b6       	in	r0, 0x3f	; 63
    3756:	0f 92       	push	r0
    3758:	11 24       	eor	r1, r1
    375a:	2f 93       	push	r18
    375c:	3f 93       	push	r19
    375e:	4f 93       	push	r20
    3760:	5f 93       	push	r21
    3762:	6f 93       	push	r22
    3764:	7f 93       	push	r23
    3766:	8f 93       	push	r24
    3768:	9f 93       	push	r25
    376a:	af 93       	push	r26
    376c:	bf 93       	push	r27
    376e:	ef 93       	push	r30
    3770:	ff 93       	push	r31
    3772:	df 93       	push	r29
    3774:	cf 93       	push	r28
    3776:	cd b7       	in	r28, 0x3d	; 61
    3778:	de b7       	in	r29, 0x3e	; 62
	if (g_timer0CallBackPtr != NULL_PTR) {
    377a:	80 91 9a 01 	lds	r24, 0x019A
    377e:	90 91 9b 01 	lds	r25, 0x019B
    3782:	00 97       	sbiw	r24, 0x00	; 0
    3784:	29 f0       	breq	.+10     	; 0x3790 <__vector_10+0x40>
		(*g_timer0CallBackPtr)();
    3786:	e0 91 9a 01 	lds	r30, 0x019A
    378a:	f0 91 9b 01 	lds	r31, 0x019B
    378e:	09 95       	icall
	}
}
    3790:	cf 91       	pop	r28
    3792:	df 91       	pop	r29
    3794:	ff 91       	pop	r31
    3796:	ef 91       	pop	r30
    3798:	bf 91       	pop	r27
    379a:	af 91       	pop	r26
    379c:	9f 91       	pop	r25
    379e:	8f 91       	pop	r24
    37a0:	7f 91       	pop	r23
    37a2:	6f 91       	pop	r22
    37a4:	5f 91       	pop	r21
    37a6:	4f 91       	pop	r20
    37a8:	3f 91       	pop	r19
    37aa:	2f 91       	pop	r18
    37ac:	0f 90       	pop	r0
    37ae:	0f be       	out	0x3f, r0	; 63
    37b0:	0f 90       	pop	r0
    37b2:	1f 90       	pop	r1
    37b4:	18 95       	reti

000037b6 <__vector_9>:

/* ISR for TIMER1 overflow */
ISR(TIMER1_OVF_vect) {
    37b6:	1f 92       	push	r1
    37b8:	0f 92       	push	r0
    37ba:	0f b6       	in	r0, 0x3f	; 63
    37bc:	0f 92       	push	r0
    37be:	11 24       	eor	r1, r1
    37c0:	2f 93       	push	r18
    37c2:	3f 93       	push	r19
    37c4:	4f 93       	push	r20
    37c6:	5f 93       	push	r21
    37c8:	6f 93       	push	r22
    37ca:	7f 93       	push	r23
    37cc:	8f 93       	push	r24
    37ce:	9f 93       	push	r25
    37d0:	af 93       	push	r26
    37d2:	bf 93       	push	r27
    37d4:	ef 93       	push	r30
    37d6:	ff 93       	push	r31
    37d8:	df 93       	push	r29
    37da:	cf 93       	push	r28
    37dc:	cd b7       	in	r28, 0x3d	; 61
    37de:	de b7       	in	r29, 0x3e	; 62
	if (g_timer1CallBackPtr != NULL_PTR) {
    37e0:	80 91 9c 01 	lds	r24, 0x019C
    37e4:	90 91 9d 01 	lds	r25, 0x019D
    37e8:	00 97       	sbiw	r24, 0x00	; 0
    37ea:	29 f0       	breq	.+10     	; 0x37f6 <__vector_9+0x40>
		(*g_timer1CallBackPtr)();
    37ec:	e0 91 9c 01 	lds	r30, 0x019C
    37f0:	f0 91 9d 01 	lds	r31, 0x019D
    37f4:	09 95       	icall
	}
}
    37f6:	cf 91       	pop	r28
    37f8:	df 91       	pop	r29
    37fa:	ff 91       	pop	r31
    37fc:	ef 91       	pop	r30
    37fe:	bf 91       	pop	r27
    3800:	af 91       	pop	r26
    3802:	9f 91       	pop	r25
    3804:	8f 91       	pop	r24
    3806:	7f 91       	pop	r23
    3808:	6f 91       	pop	r22
    380a:	5f 91       	pop	r21
    380c:	4f 91       	pop	r20
    380e:	3f 91       	pop	r19
    3810:	2f 91       	pop	r18
    3812:	0f 90       	pop	r0
    3814:	0f be       	out	0x3f, r0	; 63
    3816:	0f 90       	pop	r0
    3818:	1f 90       	pop	r1
    381a:	18 95       	reti

0000381c <__vector_7>:

/* ISR for TIMER1 compare match */
ISR(TIMER1_COMPA_vect) {
    381c:	1f 92       	push	r1
    381e:	0f 92       	push	r0
    3820:	0f b6       	in	r0, 0x3f	; 63
    3822:	0f 92       	push	r0
    3824:	11 24       	eor	r1, r1
    3826:	2f 93       	push	r18
    3828:	3f 93       	push	r19
    382a:	4f 93       	push	r20
    382c:	5f 93       	push	r21
    382e:	6f 93       	push	r22
    3830:	7f 93       	push	r23
    3832:	8f 93       	push	r24
    3834:	9f 93       	push	r25
    3836:	af 93       	push	r26
    3838:	bf 93       	push	r27
    383a:	ef 93       	push	r30
    383c:	ff 93       	push	r31
    383e:	df 93       	push	r29
    3840:	cf 93       	push	r28
    3842:	cd b7       	in	r28, 0x3d	; 61
    3844:	de b7       	in	r29, 0x3e	; 62
	if (g_timer1CallBackPtr != NULL_PTR) {
    3846:	80 91 9c 01 	lds	r24, 0x019C
    384a:	90 91 9d 01 	lds	r25, 0x019D
    384e:	00 97       	sbiw	r24, 0x00	; 0
    3850:	29 f0       	breq	.+10     	; 0x385c <__vector_7+0x40>
		(*g_timer1CallBackPtr)();
    3852:	e0 91 9c 01 	lds	r30, 0x019C
    3856:	f0 91 9d 01 	lds	r31, 0x019D
    385a:	09 95       	icall
	}
}
    385c:	cf 91       	pop	r28
    385e:	df 91       	pop	r29
    3860:	ff 91       	pop	r31
    3862:	ef 91       	pop	r30
    3864:	bf 91       	pop	r27
    3866:	af 91       	pop	r26
    3868:	9f 91       	pop	r25
    386a:	8f 91       	pop	r24
    386c:	7f 91       	pop	r23
    386e:	6f 91       	pop	r22
    3870:	5f 91       	pop	r21
    3872:	4f 91       	pop	r20
    3874:	3f 91       	pop	r19
    3876:	2f 91       	pop	r18
    3878:	0f 90       	pop	r0
    387a:	0f be       	out	0x3f, r0	; 63
    387c:	0f 90       	pop	r0
    387e:	1f 90       	pop	r1
    3880:	18 95       	reti

00003882 <__vector_5>:

/* ISR for TIMER2 overflow */
ISR(TIMER2_OVF_vect) {
    3882:	1f 92       	push	r1
    3884:	0f 92       	push	r0
    3886:	0f b6       	in	r0, 0x3f	; 63
    3888:	0f 92       	push	r0
    388a:	11 24       	eor	r1, r1
    388c:	2f 93       	push	r18
    388e:	3f 93       	push	r19
    3890:	4f 93       	push	r20
    3892:	5f 93       	push	r21
    3894:	6f 93       	push	r22
    3896:	7f 93       	push	r23
    3898:	8f 93       	push	r24
    389a:	9f 93       	push	r25
    389c:	af 93       	push	r26
    389e:	bf 93       	push	r27
    38a0:	ef 93       	push	r30
    38a2:	ff 93       	push	r31
    38a4:	df 93       	push	r29
    38a6:	cf 93       	push	r28
    38a8:	cd b7       	in	r28, 0x3d	; 61
    38aa:	de b7       	in	r29, 0x3e	; 62
	if (g_timer2CallBackPtr != NULL_PTR) {
    38ac:	80 91 9e 01 	lds	r24, 0x019E
    38b0:	90 91 9f 01 	lds	r25, 0x019F
    38b4:	00 97       	sbiw	r24, 0x00	; 0
    38b6:	29 f0       	breq	.+10     	; 0x38c2 <__vector_5+0x40>
		(*g_timer2CallBackPtr)();
    38b8:	e0 91 9e 01 	lds	r30, 0x019E
    38bc:	f0 91 9f 01 	lds	r31, 0x019F
    38c0:	09 95       	icall
	}
}
    38c2:	cf 91       	pop	r28
    38c4:	df 91       	pop	r29
    38c6:	ff 91       	pop	r31
    38c8:	ef 91       	pop	r30
    38ca:	bf 91       	pop	r27
    38cc:	af 91       	pop	r26
    38ce:	9f 91       	pop	r25
    38d0:	8f 91       	pop	r24
    38d2:	7f 91       	pop	r23
    38d4:	6f 91       	pop	r22
    38d6:	5f 91       	pop	r21
    38d8:	4f 91       	pop	r20
    38da:	3f 91       	pop	r19
    38dc:	2f 91       	pop	r18
    38de:	0f 90       	pop	r0
    38e0:	0f be       	out	0x3f, r0	; 63
    38e2:	0f 90       	pop	r0
    38e4:	1f 90       	pop	r1
    38e6:	18 95       	reti

000038e8 <__vector_4>:

/* ISR for TIMER2 compare match */
ISR(TIMER2_COMP_vect) {
    38e8:	1f 92       	push	r1
    38ea:	0f 92       	push	r0
    38ec:	0f b6       	in	r0, 0x3f	; 63
    38ee:	0f 92       	push	r0
    38f0:	11 24       	eor	r1, r1
    38f2:	2f 93       	push	r18
    38f4:	3f 93       	push	r19
    38f6:	4f 93       	push	r20
    38f8:	5f 93       	push	r21
    38fa:	6f 93       	push	r22
    38fc:	7f 93       	push	r23
    38fe:	8f 93       	push	r24
    3900:	9f 93       	push	r25
    3902:	af 93       	push	r26
    3904:	bf 93       	push	r27
    3906:	ef 93       	push	r30
    3908:	ff 93       	push	r31
    390a:	df 93       	push	r29
    390c:	cf 93       	push	r28
    390e:	cd b7       	in	r28, 0x3d	; 61
    3910:	de b7       	in	r29, 0x3e	; 62
	if (g_timer2CallBackPtr != NULL_PTR) {
    3912:	80 91 9e 01 	lds	r24, 0x019E
    3916:	90 91 9f 01 	lds	r25, 0x019F
    391a:	00 97       	sbiw	r24, 0x00	; 0
    391c:	29 f0       	breq	.+10     	; 0x3928 <__vector_4+0x40>
		(*g_timer2CallBackPtr)();
    391e:	e0 91 9e 01 	lds	r30, 0x019E
    3922:	f0 91 9f 01 	lds	r31, 0x019F
    3926:	09 95       	icall
	}
}
    3928:	cf 91       	pop	r28
    392a:	df 91       	pop	r29
    392c:	ff 91       	pop	r31
    392e:	ef 91       	pop	r30
    3930:	bf 91       	pop	r27
    3932:	af 91       	pop	r26
    3934:	9f 91       	pop	r25
    3936:	8f 91       	pop	r24
    3938:	7f 91       	pop	r23
    393a:	6f 91       	pop	r22
    393c:	5f 91       	pop	r21
    393e:	4f 91       	pop	r20
    3940:	3f 91       	pop	r19
    3942:	2f 91       	pop	r18
    3944:	0f 90       	pop	r0
    3946:	0f be       	out	0x3f, r0	; 63
    3948:	0f 90       	pop	r0
    394a:	1f 90       	pop	r1
    394c:	18 95       	reti

0000394e <UART_init>:
 *******************************************************************************/


/* UART_init to use UART_ConfigType */
void UART_init(const UART_ConfigType *Config_Ptr)
{
    394e:	df 93       	push	r29
    3950:	cf 93       	push	r28
    3952:	00 d0       	rcall	.+0      	; 0x3954 <UART_init+0x6>
    3954:	00 d0       	rcall	.+0      	; 0x3956 <UART_init+0x8>
    3956:	cd b7       	in	r28, 0x3d	; 61
    3958:	de b7       	in	r29, 0x3e	; 62
    395a:	9c 83       	std	Y+4, r25	; 0x04
    395c:	8b 83       	std	Y+3, r24	; 0x03
    uint16 ubrr_value = 0;
    395e:	1a 82       	std	Y+2, r1	; 0x02
    3960:	19 82       	std	Y+1, r1	; 0x01

    /* U2X = 1 for double transmission speed */
    UCSRA = (1 << U2X);
    3962:	eb e2       	ldi	r30, 0x2B	; 43
    3964:	f0 e0       	ldi	r31, 0x00	; 0
    3966:	82 e0       	ldi	r24, 0x02	; 2
    3968:	80 83       	st	Z, r24

    /* Configure UCSRB based on data bits */
    UCSRB = (1 << RXEN) | (1 << TXEN);
    396a:	ea e2       	ldi	r30, 0x2A	; 42
    396c:	f0 e0       	ldi	r31, 0x00	; 0
    396e:	88 e1       	ldi	r24, 0x18	; 24
    3970:	80 83       	st	Z, r24
    if (Config_Ptr->bit_data == 9) {
    3972:	eb 81       	ldd	r30, Y+3	; 0x03
    3974:	fc 81       	ldd	r31, Y+4	; 0x04
    3976:	80 81       	ld	r24, Z
    3978:	89 30       	cpi	r24, 0x09	; 9
    397a:	39 f4       	brne	.+14     	; 0x398a <UART_init+0x3c>
        UCSRB |= (1<<URSEL) |(1 << UCSZ2);  // Set for 9-bit data mode if specified
    397c:	aa e2       	ldi	r26, 0x2A	; 42
    397e:	b0 e0       	ldi	r27, 0x00	; 0
    3980:	ea e2       	ldi	r30, 0x2A	; 42
    3982:	f0 e0       	ldi	r31, 0x00	; 0
    3984:	80 81       	ld	r24, Z
    3986:	84 68       	ori	r24, 0x84	; 132
    3988:	8c 93       	st	X, r24

    /* Configure UCSRC for frame format, parity, and stop bits */


    /* Configure data bit size */
    if (Config_Ptr->bit_data == 8) {
    398a:	eb 81       	ldd	r30, Y+3	; 0x03
    398c:	fc 81       	ldd	r31, Y+4	; 0x04
    398e:	80 81       	ld	r24, Z
    3990:	88 30       	cpi	r24, 0x08	; 8
    3992:	41 f4       	brne	.+16     	; 0x39a4 <UART_init+0x56>
        UCSRC |=(1<<URSEL) | (1 << UCSZ1) | (1 << UCSZ0);  // 8-bit data
    3994:	a0 e4       	ldi	r26, 0x40	; 64
    3996:	b0 e0       	ldi	r27, 0x00	; 0
    3998:	e0 e4       	ldi	r30, 0x40	; 64
    399a:	f0 e0       	ldi	r31, 0x00	; 0
    399c:	80 81       	ld	r24, Z
    399e:	86 68       	ori	r24, 0x86	; 134
    39a0:	8c 93       	st	X, r24
    39a2:	34 c0       	rjmp	.+104    	; 0x3a0c <UART_init+0xbe>
    } else if (Config_Ptr->bit_data == 7) {
    39a4:	eb 81       	ldd	r30, Y+3	; 0x03
    39a6:	fc 81       	ldd	r31, Y+4	; 0x04
    39a8:	80 81       	ld	r24, Z
    39aa:	87 30       	cpi	r24, 0x07	; 7
    39ac:	41 f4       	brne	.+16     	; 0x39be <UART_init+0x70>
        UCSRC |= (1<<URSEL) |(1 << UCSZ1);                 // 7-bit data
    39ae:	a0 e4       	ldi	r26, 0x40	; 64
    39b0:	b0 e0       	ldi	r27, 0x00	; 0
    39b2:	e0 e4       	ldi	r30, 0x40	; 64
    39b4:	f0 e0       	ldi	r31, 0x00	; 0
    39b6:	80 81       	ld	r24, Z
    39b8:	84 68       	ori	r24, 0x84	; 132
    39ba:	8c 93       	st	X, r24
    39bc:	27 c0       	rjmp	.+78     	; 0x3a0c <UART_init+0xbe>
    }
    else if (Config_Ptr->bit_data == 6) {
    39be:	eb 81       	ldd	r30, Y+3	; 0x03
    39c0:	fc 81       	ldd	r31, Y+4	; 0x04
    39c2:	80 81       	ld	r24, Z
    39c4:	86 30       	cpi	r24, 0x06	; 6
    39c6:	41 f4       	brne	.+16     	; 0x39d8 <UART_init+0x8a>
            UCSRC |= (1<<URSEL) |(1 << UCSZ0);                 // 6-bit data
    39c8:	a0 e4       	ldi	r26, 0x40	; 64
    39ca:	b0 e0       	ldi	r27, 0x00	; 0
    39cc:	e0 e4       	ldi	r30, 0x40	; 64
    39ce:	f0 e0       	ldi	r31, 0x00	; 0
    39d0:	80 81       	ld	r24, Z
    39d2:	82 68       	ori	r24, 0x82	; 130
    39d4:	8c 93       	st	X, r24
    39d6:	1a c0       	rjmp	.+52     	; 0x3a0c <UART_init+0xbe>
        }
    else if (Config_Ptr->bit_data == 5) {
    39d8:	eb 81       	ldd	r30, Y+3	; 0x03
    39da:	fc 81       	ldd	r31, Y+4	; 0x04
    39dc:	80 81       	ld	r24, Z
    39de:	85 30       	cpi	r24, 0x05	; 5
    39e0:	a9 f4       	brne	.+42     	; 0x3a0c <UART_init+0xbe>
            UCSRC &=~ (1 << UCSZ0);                 // 5-bit data
    39e2:	a0 e4       	ldi	r26, 0x40	; 64
    39e4:	b0 e0       	ldi	r27, 0x00	; 0
    39e6:	e0 e4       	ldi	r30, 0x40	; 64
    39e8:	f0 e0       	ldi	r31, 0x00	; 0
    39ea:	80 81       	ld	r24, Z
    39ec:	8d 7f       	andi	r24, 0xFD	; 253
    39ee:	8c 93       	st	X, r24
            UCSRC &=~ (1 << UCSZ1);
    39f0:	a0 e4       	ldi	r26, 0x40	; 64
    39f2:	b0 e0       	ldi	r27, 0x00	; 0
    39f4:	e0 e4       	ldi	r30, 0x40	; 64
    39f6:	f0 e0       	ldi	r31, 0x00	; 0
    39f8:	80 81       	ld	r24, Z
    39fa:	8b 7f       	andi	r24, 0xFB	; 251
    39fc:	8c 93       	st	X, r24
            UCSRC &=~ (1 << UCSZ2);
    39fe:	a0 e4       	ldi	r26, 0x40	; 64
    3a00:	b0 e0       	ldi	r27, 0x00	; 0
    3a02:	e0 e4       	ldi	r30, 0x40	; 64
    3a04:	f0 e0       	ldi	r31, 0x00	; 0
    3a06:	80 81       	ld	r24, Z
    3a08:	8b 7f       	andi	r24, 0xFB	; 251
    3a0a:	8c 93       	st	X, r24
        }


    /* Configure parity */
    if (Config_Ptr->parity == 1) {
    3a0c:	eb 81       	ldd	r30, Y+3	; 0x03
    3a0e:	fc 81       	ldd	r31, Y+4	; 0x04
    3a10:	81 81       	ldd	r24, Z+1	; 0x01
    3a12:	81 30       	cpi	r24, 0x01	; 1
    3a14:	41 f4       	brne	.+16     	; 0x3a26 <UART_init+0xd8>
        UCSRC |= (1 << UPM1);  // Even parity
    3a16:	a0 e4       	ldi	r26, 0x40	; 64
    3a18:	b0 e0       	ldi	r27, 0x00	; 0
    3a1a:	e0 e4       	ldi	r30, 0x40	; 64
    3a1c:	f0 e0       	ldi	r31, 0x00	; 0
    3a1e:	80 81       	ld	r24, Z
    3a20:	80 62       	ori	r24, 0x20	; 32
    3a22:	8c 93       	st	X, r24
    3a24:	0c c0       	rjmp	.+24     	; 0x3a3e <UART_init+0xf0>
    } else if (Config_Ptr->parity == 2) {
    3a26:	eb 81       	ldd	r30, Y+3	; 0x03
    3a28:	fc 81       	ldd	r31, Y+4	; 0x04
    3a2a:	81 81       	ldd	r24, Z+1	; 0x01
    3a2c:	82 30       	cpi	r24, 0x02	; 2
    3a2e:	39 f4       	brne	.+14     	; 0x3a3e <UART_init+0xf0>
        UCSRC |= (1 << UPM1) | (1 << UPM0);  // Odd parity
    3a30:	a0 e4       	ldi	r26, 0x40	; 64
    3a32:	b0 e0       	ldi	r27, 0x00	; 0
    3a34:	e0 e4       	ldi	r30, 0x40	; 64
    3a36:	f0 e0       	ldi	r31, 0x00	; 0
    3a38:	80 81       	ld	r24, Z
    3a3a:	80 63       	ori	r24, 0x30	; 48
    3a3c:	8c 93       	st	X, r24
    }

    /* Configure stop bits */
    if (Config_Ptr->stop_bit == 2) {
    3a3e:	eb 81       	ldd	r30, Y+3	; 0x03
    3a40:	fc 81       	ldd	r31, Y+4	; 0x04
    3a42:	82 81       	ldd	r24, Z+2	; 0x02
    3a44:	82 30       	cpi	r24, 0x02	; 2
    3a46:	39 f4       	brne	.+14     	; 0x3a56 <UART_init+0x108>
        UCSRC |= (1 << USBS);  // 2 stop bits
    3a48:	a0 e4       	ldi	r26, 0x40	; 64
    3a4a:	b0 e0       	ldi	r27, 0x00	; 0
    3a4c:	e0 e4       	ldi	r30, 0x40	; 64
    3a4e:	f0 e0       	ldi	r31, 0x00	; 0
    3a50:	80 81       	ld	r24, Z
    3a52:	88 60       	ori	r24, 0x08	; 8
    3a54:	8c 93       	st	X, r24
    }

    /* Calculate the UBRR register value for the specified baud rate */
    ubrr_value = (uint16_t)((F_CPU / (Config_Ptr->baud_rate * 8UL)) - 1);
    3a56:	eb 81       	ldd	r30, Y+3	; 0x03
    3a58:	fc 81       	ldd	r31, Y+4	; 0x04
    3a5a:	83 81       	ldd	r24, Z+3	; 0x03
    3a5c:	94 81       	ldd	r25, Z+4	; 0x04
    3a5e:	a5 81       	ldd	r26, Z+5	; 0x05
    3a60:	b6 81       	ldd	r27, Z+6	; 0x06
    3a62:	88 0f       	add	r24, r24
    3a64:	99 1f       	adc	r25, r25
    3a66:	aa 1f       	adc	r26, r26
    3a68:	bb 1f       	adc	r27, r27
    3a6a:	88 0f       	add	r24, r24
    3a6c:	99 1f       	adc	r25, r25
    3a6e:	aa 1f       	adc	r26, r26
    3a70:	bb 1f       	adc	r27, r27
    3a72:	88 0f       	add	r24, r24
    3a74:	99 1f       	adc	r25, r25
    3a76:	aa 1f       	adc	r26, r26
    3a78:	bb 1f       	adc	r27, r27
    3a7a:	9c 01       	movw	r18, r24
    3a7c:	ad 01       	movw	r20, r26
    3a7e:	80 e0       	ldi	r24, 0x00	; 0
    3a80:	92 e1       	ldi	r25, 0x12	; 18
    3a82:	aa e7       	ldi	r26, 0x7A	; 122
    3a84:	b0 e0       	ldi	r27, 0x00	; 0
    3a86:	bc 01       	movw	r22, r24
    3a88:	cd 01       	movw	r24, r26
    3a8a:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <__udivmodsi4>
    3a8e:	da 01       	movw	r26, r20
    3a90:	c9 01       	movw	r24, r18
    3a92:	01 97       	sbiw	r24, 0x01	; 1
    3a94:	9a 83       	std	Y+2, r25	; 0x02
    3a96:	89 83       	std	Y+1, r24	; 0x01

    /* Set UBRR register */
    UBRRH = ubrr_value >> 8;
    3a98:	e0 e4       	ldi	r30, 0x40	; 64
    3a9a:	f0 e0       	ldi	r31, 0x00	; 0
    3a9c:	89 81       	ldd	r24, Y+1	; 0x01
    3a9e:	9a 81       	ldd	r25, Y+2	; 0x02
    3aa0:	89 2f       	mov	r24, r25
    3aa2:	99 27       	eor	r25, r25
    3aa4:	80 83       	st	Z, r24
    UBRRL = ubrr_value;
    3aa6:	e9 e2       	ldi	r30, 0x29	; 41
    3aa8:	f0 e0       	ldi	r31, 0x00	; 0
    3aaa:	89 81       	ldd	r24, Y+1	; 0x01
    3aac:	80 83       	st	Z, r24
}
    3aae:	0f 90       	pop	r0
    3ab0:	0f 90       	pop	r0
    3ab2:	0f 90       	pop	r0
    3ab4:	0f 90       	pop	r0
    3ab6:	cf 91       	pop	r28
    3ab8:	df 91       	pop	r29
    3aba:	08 95       	ret

00003abc <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3abc:	df 93       	push	r29
    3abe:	cf 93       	push	r28
    3ac0:	0f 92       	push	r0
    3ac2:	cd b7       	in	r28, 0x3d	; 61
    3ac4:	de b7       	in	r29, 0x3e	; 62
    3ac6:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3ac8:	eb e2       	ldi	r30, 0x2B	; 43
    3aca:	f0 e0       	ldi	r31, 0x00	; 0
    3acc:	80 81       	ld	r24, Z
    3ace:	88 2f       	mov	r24, r24
    3ad0:	90 e0       	ldi	r25, 0x00	; 0
    3ad2:	80 72       	andi	r24, 0x20	; 32
    3ad4:	90 70       	andi	r25, 0x00	; 0
    3ad6:	00 97       	sbiw	r24, 0x00	; 0
    3ad8:	b9 f3       	breq	.-18     	; 0x3ac8 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3ada:	ec e2       	ldi	r30, 0x2C	; 44
    3adc:	f0 e0       	ldi	r31, 0x00	; 0
    3ade:	89 81       	ldd	r24, Y+1	; 0x01
    3ae0:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3ae2:	0f 90       	pop	r0
    3ae4:	cf 91       	pop	r28
    3ae6:	df 91       	pop	r29
    3ae8:	08 95       	ret

00003aea <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3aea:	df 93       	push	r29
    3aec:	cf 93       	push	r28
    3aee:	cd b7       	in	r28, 0x3d	; 61
    3af0:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3af2:	eb e2       	ldi	r30, 0x2B	; 43
    3af4:	f0 e0       	ldi	r31, 0x00	; 0
    3af6:	80 81       	ld	r24, Z
    3af8:	88 23       	and	r24, r24
    3afa:	dc f7       	brge	.-10     	; 0x3af2 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    3afc:	ec e2       	ldi	r30, 0x2C	; 44
    3afe:	f0 e0       	ldi	r31, 0x00	; 0
    3b00:	80 81       	ld	r24, Z
}
    3b02:	cf 91       	pop	r28
    3b04:	df 91       	pop	r29
    3b06:	08 95       	ret

00003b08 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3b08:	df 93       	push	r29
    3b0a:	cf 93       	push	r28
    3b0c:	00 d0       	rcall	.+0      	; 0x3b0e <UART_sendString+0x6>
    3b0e:	0f 92       	push	r0
    3b10:	cd b7       	in	r28, 0x3d	; 61
    3b12:	de b7       	in	r29, 0x3e	; 62
    3b14:	9b 83       	std	Y+3, r25	; 0x03
    3b16:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3b18:	19 82       	std	Y+1, r1	; 0x01
    3b1a:	0e c0       	rjmp	.+28     	; 0x3b38 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3b1c:	89 81       	ldd	r24, Y+1	; 0x01
    3b1e:	28 2f       	mov	r18, r24
    3b20:	30 e0       	ldi	r19, 0x00	; 0
    3b22:	8a 81       	ldd	r24, Y+2	; 0x02
    3b24:	9b 81       	ldd	r25, Y+3	; 0x03
    3b26:	fc 01       	movw	r30, r24
    3b28:	e2 0f       	add	r30, r18
    3b2a:	f3 1f       	adc	r31, r19
    3b2c:	80 81       	ld	r24, Z
    3b2e:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <UART_sendByte>
		i++;
    3b32:	89 81       	ldd	r24, Y+1	; 0x01
    3b34:	8f 5f       	subi	r24, 0xFF	; 255
    3b36:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3b38:	89 81       	ldd	r24, Y+1	; 0x01
    3b3a:	28 2f       	mov	r18, r24
    3b3c:	30 e0       	ldi	r19, 0x00	; 0
    3b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b40:	9b 81       	ldd	r25, Y+3	; 0x03
    3b42:	fc 01       	movw	r30, r24
    3b44:	e2 0f       	add	r30, r18
    3b46:	f3 1f       	adc	r31, r19
    3b48:	80 81       	ld	r24, Z
    3b4a:	88 23       	and	r24, r24
    3b4c:	39 f7       	brne	.-50     	; 0x3b1c <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3b4e:	0f 90       	pop	r0
    3b50:	0f 90       	pop	r0
    3b52:	0f 90       	pop	r0
    3b54:	cf 91       	pop	r28
    3b56:	df 91       	pop	r29
    3b58:	08 95       	ret

00003b5a <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3b5a:	0f 93       	push	r16
    3b5c:	1f 93       	push	r17
    3b5e:	df 93       	push	r29
    3b60:	cf 93       	push	r28
    3b62:	00 d0       	rcall	.+0      	; 0x3b64 <UART_receiveString+0xa>
    3b64:	0f 92       	push	r0
    3b66:	cd b7       	in	r28, 0x3d	; 61
    3b68:	de b7       	in	r29, 0x3e	; 62
    3b6a:	9b 83       	std	Y+3, r25	; 0x03
    3b6c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3b6e:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3b70:	89 81       	ldd	r24, Y+1	; 0x01
    3b72:	28 2f       	mov	r18, r24
    3b74:	30 e0       	ldi	r19, 0x00	; 0
    3b76:	8a 81       	ldd	r24, Y+2	; 0x02
    3b78:	9b 81       	ldd	r25, Y+3	; 0x03
    3b7a:	8c 01       	movw	r16, r24
    3b7c:	02 0f       	add	r16, r18
    3b7e:	13 1f       	adc	r17, r19
    3b80:	0e 94 75 1d 	call	0x3aea	; 0x3aea <UART_recieveByte>
    3b84:	f8 01       	movw	r30, r16
    3b86:	80 83       	st	Z, r24
    3b88:	0f c0       	rjmp	.+30     	; 0x3ba8 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3b8a:	89 81       	ldd	r24, Y+1	; 0x01
    3b8c:	8f 5f       	subi	r24, 0xFF	; 255
    3b8e:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3b90:	89 81       	ldd	r24, Y+1	; 0x01
    3b92:	28 2f       	mov	r18, r24
    3b94:	30 e0       	ldi	r19, 0x00	; 0
    3b96:	8a 81       	ldd	r24, Y+2	; 0x02
    3b98:	9b 81       	ldd	r25, Y+3	; 0x03
    3b9a:	8c 01       	movw	r16, r24
    3b9c:	02 0f       	add	r16, r18
    3b9e:	13 1f       	adc	r17, r19
    3ba0:	0e 94 75 1d 	call	0x3aea	; 0x3aea <UART_recieveByte>
    3ba4:	f8 01       	movw	r30, r16
    3ba6:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3ba8:	89 81       	ldd	r24, Y+1	; 0x01
    3baa:	28 2f       	mov	r18, r24
    3bac:	30 e0       	ldi	r19, 0x00	; 0
    3bae:	8a 81       	ldd	r24, Y+2	; 0x02
    3bb0:	9b 81       	ldd	r25, Y+3	; 0x03
    3bb2:	fc 01       	movw	r30, r24
    3bb4:	e2 0f       	add	r30, r18
    3bb6:	f3 1f       	adc	r31, r19
    3bb8:	80 81       	ld	r24, Z
    3bba:	83 32       	cpi	r24, 0x23	; 35
    3bbc:	31 f7       	brne	.-52     	; 0x3b8a <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3bbe:	89 81       	ldd	r24, Y+1	; 0x01
    3bc0:	28 2f       	mov	r18, r24
    3bc2:	30 e0       	ldi	r19, 0x00	; 0
    3bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    3bc6:	9b 81       	ldd	r25, Y+3	; 0x03
    3bc8:	fc 01       	movw	r30, r24
    3bca:	e2 0f       	add	r30, r18
    3bcc:	f3 1f       	adc	r31, r19
    3bce:	10 82       	st	Z, r1
}
    3bd0:	0f 90       	pop	r0
    3bd2:	0f 90       	pop	r0
    3bd4:	0f 90       	pop	r0
    3bd6:	cf 91       	pop	r28
    3bd8:	df 91       	pop	r29
    3bda:	1f 91       	pop	r17
    3bdc:	0f 91       	pop	r16
    3bde:	08 95       	ret

00003be0 <__udivmodsi4>:
    3be0:	a1 e2       	ldi	r26, 0x21	; 33
    3be2:	1a 2e       	mov	r1, r26
    3be4:	aa 1b       	sub	r26, r26
    3be6:	bb 1b       	sub	r27, r27
    3be8:	fd 01       	movw	r30, r26
    3bea:	0d c0       	rjmp	.+26     	; 0x3c06 <__udivmodsi4_ep>

00003bec <__udivmodsi4_loop>:
    3bec:	aa 1f       	adc	r26, r26
    3bee:	bb 1f       	adc	r27, r27
    3bf0:	ee 1f       	adc	r30, r30
    3bf2:	ff 1f       	adc	r31, r31
    3bf4:	a2 17       	cp	r26, r18
    3bf6:	b3 07       	cpc	r27, r19
    3bf8:	e4 07       	cpc	r30, r20
    3bfa:	f5 07       	cpc	r31, r21
    3bfc:	20 f0       	brcs	.+8      	; 0x3c06 <__udivmodsi4_ep>
    3bfe:	a2 1b       	sub	r26, r18
    3c00:	b3 0b       	sbc	r27, r19
    3c02:	e4 0b       	sbc	r30, r20
    3c04:	f5 0b       	sbc	r31, r21

00003c06 <__udivmodsi4_ep>:
    3c06:	66 1f       	adc	r22, r22
    3c08:	77 1f       	adc	r23, r23
    3c0a:	88 1f       	adc	r24, r24
    3c0c:	99 1f       	adc	r25, r25
    3c0e:	1a 94       	dec	r1
    3c10:	69 f7       	brne	.-38     	; 0x3bec <__udivmodsi4_loop>
    3c12:	60 95       	com	r22
    3c14:	70 95       	com	r23
    3c16:	80 95       	com	r24
    3c18:	90 95       	com	r25
    3c1a:	9b 01       	movw	r18, r22
    3c1c:	ac 01       	movw	r20, r24
    3c1e:	bd 01       	movw	r22, r26
    3c20:	cf 01       	movw	r24, r30
    3c22:	08 95       	ret

00003c24 <__prologue_saves__>:
    3c24:	2f 92       	push	r2
    3c26:	3f 92       	push	r3
    3c28:	4f 92       	push	r4
    3c2a:	5f 92       	push	r5
    3c2c:	6f 92       	push	r6
    3c2e:	7f 92       	push	r7
    3c30:	8f 92       	push	r8
    3c32:	9f 92       	push	r9
    3c34:	af 92       	push	r10
    3c36:	bf 92       	push	r11
    3c38:	cf 92       	push	r12
    3c3a:	df 92       	push	r13
    3c3c:	ef 92       	push	r14
    3c3e:	ff 92       	push	r15
    3c40:	0f 93       	push	r16
    3c42:	1f 93       	push	r17
    3c44:	cf 93       	push	r28
    3c46:	df 93       	push	r29
    3c48:	cd b7       	in	r28, 0x3d	; 61
    3c4a:	de b7       	in	r29, 0x3e	; 62
    3c4c:	ca 1b       	sub	r28, r26
    3c4e:	db 0b       	sbc	r29, r27
    3c50:	0f b6       	in	r0, 0x3f	; 63
    3c52:	f8 94       	cli
    3c54:	de bf       	out	0x3e, r29	; 62
    3c56:	0f be       	out	0x3f, r0	; 63
    3c58:	cd bf       	out	0x3d, r28	; 61
    3c5a:	09 94       	ijmp

00003c5c <__epilogue_restores__>:
    3c5c:	2a 88       	ldd	r2, Y+18	; 0x12
    3c5e:	39 88       	ldd	r3, Y+17	; 0x11
    3c60:	48 88       	ldd	r4, Y+16	; 0x10
    3c62:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c64:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c66:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c68:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c6a:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c6c:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c6e:	b9 84       	ldd	r11, Y+9	; 0x09
    3c70:	c8 84       	ldd	r12, Y+8	; 0x08
    3c72:	df 80       	ldd	r13, Y+7	; 0x07
    3c74:	ee 80       	ldd	r14, Y+6	; 0x06
    3c76:	fd 80       	ldd	r15, Y+5	; 0x05
    3c78:	0c 81       	ldd	r16, Y+4	; 0x04
    3c7a:	1b 81       	ldd	r17, Y+3	; 0x03
    3c7c:	aa 81       	ldd	r26, Y+2	; 0x02
    3c7e:	b9 81       	ldd	r27, Y+1	; 0x01
    3c80:	ce 0f       	add	r28, r30
    3c82:	d1 1d       	adc	r29, r1
    3c84:	0f b6       	in	r0, 0x3f	; 63
    3c86:	f8 94       	cli
    3c88:	de bf       	out	0x3e, r29	; 62
    3c8a:	0f be       	out	0x3f, r0	; 63
    3c8c:	cd bf       	out	0x3d, r28	; 61
    3c8e:	ed 01       	movw	r28, r26
    3c90:	08 95       	ret

00003c92 <itoa>:
    3c92:	fb 01       	movw	r30, r22
    3c94:	9f 01       	movw	r18, r30
    3c96:	e8 94       	clt
    3c98:	42 30       	cpi	r20, 0x02	; 2
    3c9a:	c4 f0       	brlt	.+48     	; 0x3ccc <itoa+0x3a>
    3c9c:	45 32       	cpi	r20, 0x25	; 37
    3c9e:	b4 f4       	brge	.+44     	; 0x3ccc <itoa+0x3a>
    3ca0:	4a 30       	cpi	r20, 0x0A	; 10
    3ca2:	29 f4       	brne	.+10     	; 0x3cae <itoa+0x1c>
    3ca4:	97 fb       	bst	r25, 7
    3ca6:	1e f4       	brtc	.+6      	; 0x3cae <itoa+0x1c>
    3ca8:	90 95       	com	r25
    3caa:	81 95       	neg	r24
    3cac:	9f 4f       	sbci	r25, 0xFF	; 255
    3cae:	64 2f       	mov	r22, r20
    3cb0:	77 27       	eor	r23, r23
    3cb2:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <__udivmodhi4>
    3cb6:	80 5d       	subi	r24, 0xD0	; 208
    3cb8:	8a 33       	cpi	r24, 0x3A	; 58
    3cba:	0c f0       	brlt	.+2      	; 0x3cbe <itoa+0x2c>
    3cbc:	89 5d       	subi	r24, 0xD9	; 217
    3cbe:	81 93       	st	Z+, r24
    3cc0:	cb 01       	movw	r24, r22
    3cc2:	00 97       	sbiw	r24, 0x00	; 0
    3cc4:	a1 f7       	brne	.-24     	; 0x3cae <itoa+0x1c>
    3cc6:	16 f4       	brtc	.+4      	; 0x3ccc <itoa+0x3a>
    3cc8:	5d e2       	ldi	r21, 0x2D	; 45
    3cca:	51 93       	st	Z+, r21
    3ccc:	10 82       	st	Z, r1
    3cce:	c9 01       	movw	r24, r18
    3cd0:	0c 94 6a 1e 	jmp	0x3cd4	; 0x3cd4 <strrev>

00003cd4 <strrev>:
    3cd4:	dc 01       	movw	r26, r24
    3cd6:	fc 01       	movw	r30, r24
    3cd8:	67 2f       	mov	r22, r23
    3cda:	71 91       	ld	r23, Z+
    3cdc:	77 23       	and	r23, r23
    3cde:	e1 f7       	brne	.-8      	; 0x3cd8 <strrev+0x4>
    3ce0:	32 97       	sbiw	r30, 0x02	; 2
    3ce2:	04 c0       	rjmp	.+8      	; 0x3cec <strrev+0x18>
    3ce4:	7c 91       	ld	r23, X
    3ce6:	6d 93       	st	X+, r22
    3ce8:	70 83       	st	Z, r23
    3cea:	62 91       	ld	r22, -Z
    3cec:	ae 17       	cp	r26, r30
    3cee:	bf 07       	cpc	r27, r31
    3cf0:	c8 f3       	brcs	.-14     	; 0x3ce4 <strrev+0x10>
    3cf2:	08 95       	ret

00003cf4 <__udivmodhi4>:
    3cf4:	aa 1b       	sub	r26, r26
    3cf6:	bb 1b       	sub	r27, r27
    3cf8:	51 e1       	ldi	r21, 0x11	; 17
    3cfa:	07 c0       	rjmp	.+14     	; 0x3d0a <__udivmodhi4_ep>

00003cfc <__udivmodhi4_loop>:
    3cfc:	aa 1f       	adc	r26, r26
    3cfe:	bb 1f       	adc	r27, r27
    3d00:	a6 17       	cp	r26, r22
    3d02:	b7 07       	cpc	r27, r23
    3d04:	10 f0       	brcs	.+4      	; 0x3d0a <__udivmodhi4_ep>
    3d06:	a6 1b       	sub	r26, r22
    3d08:	b7 0b       	sbc	r27, r23

00003d0a <__udivmodhi4_ep>:
    3d0a:	88 1f       	adc	r24, r24
    3d0c:	99 1f       	adc	r25, r25
    3d0e:	5a 95       	dec	r21
    3d10:	a9 f7       	brne	.-22     	; 0x3cfc <__udivmodhi4_loop>
    3d12:	80 95       	com	r24
    3d14:	90 95       	com	r25
    3d16:	bc 01       	movw	r22, r24
    3d18:	cd 01       	movw	r24, r26
    3d1a:	08 95       	ret

00003d1c <_exit>:
    3d1c:	f8 94       	cli

00003d1e <__stop_program>:
    3d1e:	ff cf       	rjmp	.-2      	; 0x3d1e <__stop_program>
